Sending build context to Docker daemon  382.6MB
Step 1/45 : FROM klee/llvm:60_O_D_A_ubuntu_xenial-20181005 as llvm_base
 ---> 09d0124d757d
Step 2/45 : FROM klee/gtest:1.7.0_ubuntu_xenial-20181005 as gtest_base
 ---> ed74db721884
Step 3/45 : FROM klee/uclibc:klee_uclibc_v1.2_60_ubuntu_xenial-20181005 as uclibc_base
 ---> 58f671e20b92
Step 4/45 : FROM klee/tcmalloc:2.7_ubuntu_xenial-20181005 as tcmalloc_base
 ---> a984724b8893
Step 5/45 : FROM klee/stp:2.3.3_ubuntu_xenial-20181005 as stp_base
 ---> 9c33153b3eb3
Step 6/45 : FROM klee/z3:4.8.4_ubuntu_xenial-20181005 as z3_base
 ---> 09e800fc99c2
Step 7/45 : FROM klee/libcxx:60_ubuntu_xenial-20181005 as libcxx_base
 ---> f182733898b0
Step 8/45 : FROM llvm_base as intermediate
 ---> 09d0124d757d
Step 9/45 : COPY --from=gtest_base /tmp /tmp/
 ---> Using cache
 ---> 798971f5bcd2
Step 10/45 : COPY --from=uclibc_base /tmp /tmp/
 ---> Using cache
 ---> 334b87b60831
Step 11/45 : COPY --from=tcmalloc_base /tmp /tmp/
 ---> Using cache
 ---> d9b9f6a3e5b0
Step 12/45 : COPY --from=stp_base /tmp /tmp/
 ---> Using cache
 ---> eb2296213acf
Step 13/45 : COPY --from=z3_base /tmp /tmp/
 ---> Using cache
 ---> 7d1406ccf3b6
Step 14/45 : COPY --from=libcxx_base /tmp /tmp/
 ---> Using cache
 ---> ce67364bc5f4
Step 15/45 : ENV COVERAGE=0
 ---> Using cache
 ---> cff4512673d3
Step 16/45 : ENV USE_TCMALLOC=1
 ---> Using cache
 ---> fd7e61c21c9d
Step 17/45 : ENV BASE=/tmp
 ---> Using cache
 ---> 8abd001dea5d
Step 18/45 : ENV LLVM_VERSION=6.0
 ---> Using cache
 ---> 3f038741ade1
Step 19/45 : ENV ENABLE_OPTIMIZED=1
 ---> Using cache
 ---> 7bef0e387f98
Step 20/45 : ENV ENABLE_DEBUG=1
 ---> Using cache
 ---> 3914a29ba88f
Step 21/45 : ENV DISABLE_ASSERTIONS=0
 ---> Using cache
 ---> eb5ab0359ad7
Step 22/45 : ENV REQUIRES_RTTI=0
 ---> Using cache
 ---> 1224c5b99eaa
Step 23/45 : ENV SOLVERS=STP:Z3
 ---> Using cache
 ---> 19b92e9424e9
Step 24/45 : ENV GTEST_VERSION=1.7.0
 ---> Using cache
 ---> b26d4adcf27d
Step 25/45 : ENV UCLIBC_VERSION=klee_uclibc_v1.2
 ---> Using cache
 ---> d69869b30018
Step 26/45 : ENV LLVM_VERSION=6.0
 ---> Using cache
 ---> a9028e1bd1fb
Step 27/45 : ENV TCMALLOC_VERSION=2.7
 ---> Using cache
 ---> f35b1ec69e09
Step 28/45 : ENV SANITIZER_BUILD=
 ---> Using cache
 ---> 1b135c599a4f
Step 29/45 : ENV LLVM_VERSION=6.0
 ---> Using cache
 ---> 20b2f1cefa60
Step 30/45 : ENV STP_VERSION=2.3.3
 ---> Using cache
 ---> 273b7966493c
Step 31/45 : ENV MINISAT_VERSION=master
 ---> Using cache
 ---> bd22e61e3cbb
Step 32/45 : ENV Z3_VERSION=4.8.4
 ---> Using cache
 ---> 029dcd92534e
Step 33/45 : ENV USE_LIBCXX=1
 ---> Using cache
 ---> ab8f06f32e11
Step 34/45 : ENV KLEE_RUNTIME_BUILD="Debug+Asserts"
 ---> Using cache
 ---> 8ce085bd5b34
Step 35/45 : LABEL maintainer="KLEE Developers"
 ---> Using cache
 ---> 6e412c5571b7
Step 36/45 : RUN apt update && apt -y --no-install-recommends install sudo emacs vim file &&     rm -rf /var/lib/apt/lists/* &&     useradd -m klee &&     echo klee:klee | chpasswd &&     cp /etc/sudoers /etc/sudoers.bak &&     echo 'klee  ALL=(root) NOPASSWD: ALL' >> /etc/sudoers
 ---> Using cache
 ---> c356e49901c7
Step 37/45 : COPY --chown=klee:klee . /tmp/klee_src/
 ---> beedeb7a2676
Step 38/45 : RUN /tmp/klee_src/scripts/build/build.sh --debug --install-system-deps klee && chown -R klee:klee /tmp/klee_build*
 ---> Running in 071b3114f8bd
[91m+ for i in '"$@"'
+ case $i in
+ INSTALL_SYSTEM_DEPS=1
+ for i in '"$@"'
+ case $i in
+ COMPONENTS+=("$i")
[0m[91m+ [[ 1 -eq 0 ]]
+ [[ 0 -eq 1 ]]
+ for c in '"${COMPONENTS[@]}"'
+ validate_component klee v
+ local component=klee
+ local c_type=v
+ local component_path=/tmp/klee_src/scripts/build/v-klee.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-klee.inc ]]
+ [[ 0 == \1 ]]
[0m[91m+ check_os
[0m[91m+ [[ linux-gnu == \l\i\n\u\x\-\g\n\u ]]
+ OS=linux
[0m[91m++ grep '^ID=' /etc/os-release
[0m[91m+ DISTRIBUTION=ID=ubuntu
+ DISTRIBUTION=ubuntu
[0m[91m++ grep '^VERSION_ID=' /etc/os-release
[0m[91m+ DISTRIBUTION_VER='VERSION_ID="16.04"'
+ DISTRIBUTION_VER='"16.04"'
+ DISTRIBUTION_VER='16.04"'
+ DISTRIBUTION_VER=16.04
+ echo 'Detected OS: linux'
[0mDetected OS: linux
OS=linux
Detected distribution: ubuntu
DISTRIBUTION=ubuntu
Detected version: 16.04
DISTRIBUTION_VER=16.04
[91m+ echo OS=linux
+ echo 'Detected distribution: ubuntu'
+ echo DISTRIBUTION=ubuntu
+ echo 'Detected version: 16.04'
+ echo DISTRIBUTION_VER=16.04
[0m[91m+ for c in '"${COMPONENTS[@]}"'
+ install_component klee
[0m[91m+ local component=klee
+ load_component klee v
[0m[91m+ local component=klee
+ local c_type=v
+ local component_path=/tmp/klee_src/scripts/build/v-klee.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-klee.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-klee.inc
[0m[91m++ required_variables_klee=("COVERAGE" "KLEE_RUNTIME_BUILD" "USE_TCMALLOC" "USE_LIBCXX")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_klee
[0m[91m+ local list_name=artifact_dependency_klee
[0m[91m++ type -t artifact_dependency_klee
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_klee
[0m[91m++ local list_name=artifact_dependency_klee
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_klee
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
++ mapfile -t result
[0m[91m+++ artifact_dependency_klee
[0m[91m+++ dependencies=("llvm" "solvers" "gtest" "sqlite")
[0m[91m+++ local dependencies
[0m[91m+++ [[ linux != \o\s\x ]]
+++ dependencies+=(uclibc)
[0m[91m+++ [[ 1 -eq 1 ]]
+++ dependencies+=("tcmalloc")
[0m[91m+++ [[ 1 -eq 1 ]]
+++ dependencies+=("libcxx")
[0m[91m+++ for d in '"${dependencies[@]}"'
+++ echo llvm
[0m[91m+++ for d in '"${dependencies[@]}"'
+++ echo solvers
+++ for d in '"${dependencies[@]}"'
+++ echo gtest
[0m[91m+++ for d in '"${dependencies[@]}"'
+++ echo sqlite
+++ for d in '"${dependencies[@]}"'
+++ echo uclibc
[0m[91m+++ for d in '"${dependencies[@]}"'
+++ echo tcmalloc
[0m[91m+++ for d in '"${dependencies[@]}"'
+++ echo libcxx
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z llvm ]]
[0m[91m++ echo llvm
++ for i in '"${result[@]}"'
++ [[ -z solvers ]]
[0m[91m++ echo solvers
[0m[91m++ for i in '"${result[@]}"'
[0m[91m++ [[ -z gtest ]]
[0m[91m++ echo gtest
++ for i in '"${result[@]}"'
++ [[ -z sqlite ]]
++ echo sqlite
++ for i in '"${result[@]}"'
++ [[ -z uclibc ]]
++ echo uclibc
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z tcmalloc ]]
++ echo tcmalloc
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z libcxx ]]
[0m[91m++ echo libcxx
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z llvm ]]
[0m[91m+ install_component llvm
[0m[91m+ local component=llvm
[0m[91m+ load_component llvm v
[0m[91m+ local component=llvm
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-llvm.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-llvm.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-llvm.inc
[0m[91m++ required_variables_llvm=("LLVM_VERSION" "ENABLE_OPTIMIZED" "ENABLE_DEBUG" "DISABLE_ASSERTIONS" "REQUIRES_RTTI")
[0m[91m++ export_variables_llvm=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m++ artifact_dependency_llvm=("sanitizer")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_llvm
[0m[91m+ local list_name=artifact_dependency_llvm
[0m[91m++ type -t artifact_dependency_llvm
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_llvm[@]'
+ [[ -n x ]]
+ return 0
+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_llvm
[0m[91m++ local list_name=artifact_dependency_llvm
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_llvm
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_llvm[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z sanitizer ]]
+ install_component sanitizer
[0m[91m+ local component=sanitizer
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ gather_dependencies sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ local depending_components
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sanitizer
[0m[91m+ local action=is_installed
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ execution_action install_binary_artifact sanitizer
+ local action=install_binary_artifact
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ validate_build_variables
[0m[91m+ [[ -z x ]]
+ [[ -z /tmp ]]
[0m[91m+ validate_component sanitizer p
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=p
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/p-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
+ echo 'Component sanitizer not found.'
[0m[91m+ return 1
+ return 0
[0mComponent sanitizer not found.
[91m+ validate_required_variables llvm required_variables
[0m[91m+ local component=llvm
[0m[91m+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_llvm
+ local list_name=required_variables_llvm
[0m[91m++ type -t required_variables_llvm
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_llvm[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_llvm
[0m[91m++ local list_name=required_variables_llvm
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_llvm
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_llvm[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
++ for i in '"${result[@]}"'
++ [[ -z ENABLE_OPTIMIZED ]]
[0m[91m++ echo ENABLE_OPTIMIZED
++ for i in '"${result[@]}"'
[0m[91m++ [[ -z ENABLE_DEBUG ]]
++ echo ENABLE_DEBUG
++ for i in '"${result[@]}"'
++ [[ -z DISABLE_ASSERTIONS ]]
[0m[91m++ echo DISABLE_ASSERTIONS
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z REQUIRES_RTTI ]]
++ echo REQUIRES_RTTI
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ENABLE_OPTIMIZED ENABLE_DEBUG DISABLE_ASSERTIONS REQUIRES_RTTI ]]
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z x ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_llvm
[0m[91m+ fct=required_variables_check_llvm
[0m[91m++ type -t required_variables_check_llvm
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_llvm
[0m[91m+ check_bool ENABLE_DEBUG
[0m[91m+ local v=ENABLE_DEBUG
[0m[91m+ local result
[0m[91m++ to_bool 1
++ [[ 1 == \1 ]]
++ echo 1
++ return 0
[0m[91m+ result=1
[0m[91m+ check_bool ENABLE_OPTIMIZED
+ local v=ENABLE_OPTIMIZED
[0m[91m+ local result
[0m[91m++ to_bool 1
[0m[91m++ [[ 1 == \1 ]]
++ echo 1
[0m[91m++ return 0
[0m[91m+ result=1
[0m[91m+ check_bool DISABLE_ASSERTIONS
[0m[91m+ local v=DISABLE_ASSERTIONS
+ local result
[0m[91m++ to_bool 0
[0m[91m++ [[ 0 == \1 ]]
++ [[ 0 == \O\N ]]
++ [[ 0 == \Y\E\S ]]
++ [[ 0 == \T\R\U\E ]]
++ [[ 0 == \T ]]
++ [[ 0 == \0 ]]
[0m[91m++ echo 0
++ return 0
[0m[91m+ result=0
[0m[91m+ check_bool REQUIRES_RTTI
[0m[91m+ local v=REQUIRES_RTTI
[0m[91m+ local result
[0m[91m++ to_bool 0
[0m[91m++ [[ 0 == \1 ]]
++ [[ 0 == \O\N ]]
++ [[ 0 == \Y\E\S ]]
++ [[ 0 == \T\R\U\E ]]
++ [[ 0 == \T ]]
++ [[ 0 == \0 ]]
++ echo 0
[0m[91m++ return 0
[0m[91m+ result=0
[0m[91m+ return 0
[0m[91m+ gather_dependencies llvm artifact setup_variables
[0m[91m+ local component=llvm
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_llvm
[0m[91m+ local list_name=artifact_dependency_llvm
[0m[91m++ type -t artifact_dependency_llvm
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_llvm[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_llvm
[0m[91m++ local list_name=artifact_dependency_llvm
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_llvm
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_llvm[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_llvm
[0m[91m+ fct=setup_variables_llvm
[0m[91m++ type -t setup_variables_llvm
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
+ setup_variables_llvm
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ execution_action is_installed llvm
[0m[91m+ local action=is_installed
+ local component=llvm
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-llvm-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
+ source /tmp/klee_src/scripts/build/p-llvm-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_llvm
[0m[91m+ fct=is_installed_llvm
[0m[91m++ type -t is_installed_llvm
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ is_installed_llvm
[0m[91m+ local lc=
[0m[91m++ which llvm-config-6.0
[0m[91m+ lc=
+ [[ -z '' ]]
+ return 1
+ failed=1
[0m[91m+ return 1
+ failed=1
[0m[91m+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-llvm-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-llvm-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-llvm.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-llvm.inc
[0m[91m+ local failed=0
[0m[91m+ try_execute is_installed_llvm
[0m[91m+ fct=is_installed_llvm
[0m[91m++ type -t is_installed_llvm
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ is_installed_llvm
[0m[91m+ setup_build_variables_llvm
[0m[91m+ LLVM_SUFFIX=
+ local BuildMode=
[0m[91m++ to_bool 1
++ [[ 1 == \1 ]]
[0m[91m++ echo 1
++ return 0
[0m[91m+ local enable_optimized=1
[0m[91m++ to_bool 1
++ [[ 1 == \1 ]]
++ echo 1
++ return 0
[0m[91m+ local enable_debug=1
[0m[91m++ to_bool 0
++ [[ 0 == \1 ]]
++ [[ 0 == \O\N ]]
++ [[ 0 == \Y\E\S ]]
++ [[ 0 == \T\R\U\E ]]
++ [[ 0 == \T ]]
++ [[ 0 == \0 ]]
++ echo 0
++ return 0
[0m[91m+ local disable_assertions=0
[0m[91m++ to_bool 0
++ [[ 0 == \1 ]]
++ [[ 0 == \O\N ]]
++ [[ 0 == \Y\E\S ]]
++ [[ 0 == \T\R\U\E ]]
++ [[ 0 == \T ]]
++ [[ 0 == \0 ]]
++ echo 0
++ return 0
[0m[91m+ local requires_rtti=0
[0m[91m+ [[ 1 == \1 ]]
[0m[91m+ LLVM_SUFFIX+=_O
+ BuildMode=Release
[0m[91m+ [[ 1 == \1 ]]
+ LLVM_SUFFIX+=_D
[0m[91m+ '[' -z Release ']'
[0m[91m+ BuildMode=Release+Debug
[0m[91m+ [[ 0 == \1 ]]
+ [[ -z 0 ]]
+ LLVM_SUFFIX+=_A
+ '[' -z Release+Debug ']'
[0m[91m+ BuildMode=Release+Debug+Asserts
+ [[ 0 == \1 ]]
[0m[91m+ [[ x != \x ]]
[0m[91m+ LLVM_SRC_BASE=/tmp/llvm-60
[0m[91m+ LLVM_BUILD=/tmp/llvm-60-build_O_D_A
[0m[91m+ LLVM_INSTALL=/tmp/llvm-60-install_O_D_A
+ LLVM_BIN=/tmp/llvm-60-install_O_D_A/bin
[0m[91m+ LLVM_BUILD_BIN=/tmp/llvm-60-build_O_D_A/bin
+ LLVM_CONFIG=/tmp/llvm-60-install_O_D_A/bin/llvm-config
+ BITCODE_CC=/tmp/llvm-60-install_O_D_A/bin/clang
[0m[91m+ BITCODE_CXX=/tmp/llvm-60-install_O_D_A/bin/clang++
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ [[ -f /tmp/llvm-60-build_O_D_A/bin/llvm-config ]]
[0m[91m+ [[ -f /tmp/llvm-60-install_O_D_A/.install_finished ]]
[0m[91m+ return 0
+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables llvm
[0m[91m+ local action=setup_artifact_variables
[0m[91m+ local component=llvm
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-llvm-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-llvm-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute setup_artifact_variables_llvm
[0m[91m+ fct=setup_artifact_variables_llvm
[0m[91m++ type -t setup_artifact_variables_llvm
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_artifact_variables_llvm
+ setup_build_variables_llvm
[0m[91m+ LLVM_SUFFIX=
+ local BuildMode=
[0m[91m++ to_bool 1
[0m[91m++ [[ 1 == \1 ]]
++ echo 1
[0m[91m++ return 0
[0m[91m+ local enable_optimized=1
[0m[91m++ to_bool 1
[0m[91m++ [[ 1 == \1 ]]
++ echo 1
[0m[91m++ return 0
[0m[91m+ local enable_debug=1
[0m[91m++ to_bool 0
++ [[ 0 == \1 ]]
++ [[ 0 == \O\N ]]
++ [[ 0 == \Y\E\S ]]
++ [[ 0 == \T\R\U\E ]]
++ [[ 0 == \T ]]
++ [[ 0 == \0 ]]
++ echo 0
++ return 0
[0m[91m+ local disable_assertions=0
[0m[91m++ to_bool 0
[0m[91m++ [[ 0 == \1 ]]
++ [[ 0 == \O\N ]]
++ [[ 0 == \Y\E\S ]]
++ [[ 0 == \T\R\U\E ]]
++ [[ 0 == \T ]]
++ [[ 0 == \0 ]]
++ echo 0
[0m[91m++ return 0
[0m[91m+ local requires_rtti=0
+ [[ 1 == \1 ]]
[0m[91m+ LLVM_SUFFIX+=_O
+ BuildMode=Release
+ [[ 1 == \1 ]]
+ LLVM_SUFFIX+=_D
[0m[91m+ '[' -z Release ']'
[0m[91m+ BuildMode=Release+Debug
+ [[ 0 == \1 ]]
+ [[ -z 0 ]]
+ LLVM_SUFFIX+=_A
[0m[91m+ '[' -z Release+Debug ']'
+ BuildMode=Release+Debug+Asserts
[0m[91m+ [[ 0 == \1 ]]
+ [[ x != \x ]]
+ LLVM_SRC_BASE=/tmp/llvm-60
[0m[91m+ LLVM_BUILD=/tmp/llvm-60-build_O_D_A
+ LLVM_INSTALL=/tmp/llvm-60-install_O_D_A
[0m[91m+ LLVM_BIN=/tmp/llvm-60-install_O_D_A/bin
+ LLVM_BUILD_BIN=/tmp/llvm-60-build_O_D_A/bin
[0m[91m+ LLVM_CONFIG=/tmp/llvm-60-install_O_D_A/bin/llvm-config
[0m[91m+ BITCODE_CC=/tmp/llvm-60-install_O_D_A/bin/clang
+ BITCODE_CXX=/tmp/llvm-60-install_O_D_A/bin/clang++
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ validate_required_variables llvm export_variables
[0m[91m+ local component=llvm
[0m[91m+ local type=export_variables
+ local variables
[0m[91m+ check_list required_variables_llvm
[0m[91m+ local list_name=required_variables_llvm
[0m[91m++ type -t required_variables_llvm
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_llvm[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_llvm
[0m[91m++ local list_name=export_variables_llvm
++ result=("")
++ local result
[0m[91m+++ type -t export_variables_llvm
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='export_variables_llvm[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_CONFIG ]]
[0m[91m++ echo LLVM_CONFIG
[0m[91m++ for i in '"${result[@]}"'
[0m[91m++ [[ -z BITCODE_CC ]]
[0m[91m++ echo BITCODE_CC
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z BITCODE_CXX ]]
++ echo BITCODE_CXX
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_CONFIG BITCODE_CC BITCODE_CXX ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_llvm
[0m[91m+ fct=required_variables_check_llvm
[0m[91m++ type -t required_variables_check_llvm
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_llvm
[0m[91m+ check_bool ENABLE_DEBUG
[0m[91m+ local v=ENABLE_DEBUG
+ local result
[0m[91m++ to_bool 1
[0m[91m++ [[ 1 == \1 ]]
++ echo 1
[0m[91m++ return 0
[0m[91m+ result=1
[0m[91m+ check_bool ENABLE_OPTIMIZED
+ local v=ENABLE_OPTIMIZED
[0m[91m+ local result
[0m[91m++ to_bool 1
[0m[91m++ [[ 1 == \1 ]]
++ echo 1
[0m[91m++ return 0
[0m[91m+ result=1
[0m[91m+ check_bool DISABLE_ASSERTIONS
+ local v=DISABLE_ASSERTIONS
[0m[91m+ local result
[0m[91m++ to_bool 0
[0m[91m++ [[ 0 == \1 ]]
++ [[ 0 == \O\N ]]
++ [[ 0 == \Y\E\S ]]
[0m[91m++ [[ 0 == \T\R\U\E ]]
++ [[ 0 == \T ]]
[0m[91m++ [[ 0 == \0 ]]
[0m[91m++ echo 0
[0m[91m++ return 0
[0m[91m+ result=0
[0m[91m+ check_bool REQUIRES_RTTI
[0m[91m+ local v=REQUIRES_RTTI
[0m[91m+ local result
[0m[91m++ to_bool 0
++ [[ 0 == \1 ]]
++ [[ 0 == \O\N ]]
[0m[91m++ [[ 0 == \Y\E\S ]]
++ [[ 0 == \T\R\U\E ]]
++ [[ 0 == \T ]]
[0m[91m++ [[ 0 == \0 ]]
[0m[91m++ echo 0
[0m[91m++ return 0
[0m[91m+ result=0
[0m[91m+ return 0
[0m[91m+ echo 'Already installed llvm'
+ return 0
[0mAlready installed llvm
[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z solvers ]]
+ install_component solvers
[0m[91m+ local component=solvers
+ load_component solvers v
+ local component=solvers
+ local c_type=v
+ local component_path=/tmp/klee_src/scripts/build/v-solvers.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-solvers.inc ]]
+ source /tmp/klee_src/scripts/build/v-solvers.inc
[0m[91m++ required_variables_solvers=("SOLVERS")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_solvers
+ local list_name=artifact_dependency_solvers
[0m[91m++ type -t artifact_dependency_solvers
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_solvers
[0m[91m++ local list_name=artifact_dependency_solvers
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_solvers
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
++ mapfile -t result
[0m[91m+++ artifact_dependency_solvers
+++ setup_variables_solvers
+++ local solvers
+++ IFS=:
+++ read -r -a solvers
[0m[91m+++ SELECTED_SOLVERS=()
+++ for solver in '"${solvers[@]}"'
[0m[91m+++ [[ -z STP ]]
[0m[91m++++ to_lower STP
[0m[91m++++ echo STP
[0m[91m++++ tr '[:upper:]' '[:lower:]'
[0m[91m+++ solver=stp
+++ [[ stp == \z\3 ]]
+++ [[ stp == \s\t\p ]]
+++ SELECTED_SOLVERS+=("stp")
+++ continue
+++ for solver in '"${solvers[@]}"'
+++ [[ -z Z3 ]]
[0m[91m++++ to_lower Z3
[0m[91m++++ echo Z3
[0m[91m++++ tr '[:upper:]' '[:lower:]'
[0m[91m+++ solver=z3
+++ [[ z3 == \z\3 ]]
+++ SELECTED_SOLVERS+=("z3")
+++ continue
+++ SELECTED_SOLVERS=($( for e in "${SELECTED_SOLVERS[@]}"; do echo "$e"; done | sort|uniq))
[0m[91m++++ for e in '"${SELECTED_SOLVERS[@]}"'
++++ echo stp
[0m[91m++++ for e in '"${SELECTED_SOLVERS[@]}"'
++++ echo z3
[0m[91m++++ sort
[0m[91m++++ uniq
[0m[91m++++ IFS=_
++++ echo stp_z3
[0m[91m+++ SOLVER_SUFFIX=stp_z3
[0m[91m+++ for solver in '"${SELECTED_SOLVERS[@]}"'
+++ echo stp
[0m[91m+++ for solver in '"${SELECTED_SOLVERS[@]}"'
+++ echo z3
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z stp ]]
[0m[91m++ echo stp
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z z3 ]]
++ echo z3
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z stp ]]
+ install_component stp
[0m[91m+ local component=stp
+ load_component stp v
[0m[91m+ local component=stp
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-stp.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-stp.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-stp.inc
[0m[91m++ required_variables_stp=("STP_VERSION" "MINISAT_VERSION")
[0m[91m++ artifact_dependency_stp=("sanitizer_compiler")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_stp
[0m[91m+ local list_name=artifact_dependency_stp
[0m[91m++ type -t artifact_dependency_stp
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_stp[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_stp
[0m[91m++ local list_name=artifact_dependency_stp
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_stp
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_stp[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer_compiler ]]
[0m[91m++ echo sanitizer_compiler
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
[0m[91m+ [[ -z sanitizer_compiler ]]
[0m[91m+ install_component sanitizer_compiler
[0m[91m+ local component=sanitizer_compiler
+ load_component sanitizer_compiler v
[0m[91m+ local component=sanitizer_compiler
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m++ required_variables_sanitizer_compiler=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
[0m[91m+++ echo sanitizer
+++ [[ -n x ]]
[0m[91m+++ [[ '' == \m\e\m\o\r\y ]]
+++ [[ '' != \m\e\m\o\r\y ]]
[0m[91m+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z sanitizer ]]
+ install_component sanitizer
+ local component=sanitizer
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ gather_dependencies sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_sanitizer
+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sanitizer
++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
+ SANITIZER_SUFFIX=
[0m[91m+ return 0
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sanitizer
[0m[91m+ local action=is_installed
+ local component=sanitizer
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ execution_action install_binary_artifact sanitizer
[0m[91m+ local action=install_binary_artifact
+ local component=sanitizer
[0m[91m+ local found=0
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ validate_build_variables
[0m[91m+ [[ -z x ]]
+ [[ -z /tmp ]]
[0m[91m+ validate_component sanitizer p
[0m[91m+ local component=sanitizer
+ local c_type=p
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/p-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ echo 'Component sanitizer not found.'
[0mComponent sanitizer not found.
[91m+ return 1
+ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z clang ]]
[0m[91m+ install_component clang
[0m[91m+ local component=clang
+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ local depending_artifact_components
[0m[91m+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_clang
++ local list_name=artifact_dependency_clang
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ install_component sanitizer
[0m[91m+ local component=sanitizer
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sanitizer
++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
[0m[91m+ [[ -z '' ]]
+ continue
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ gather_dependencies sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sanitizer
[0m[91m+ local action=is_installed
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ execution_action install_binary_artifact sanitizer
[0m[91m+ local action=install_binary_artifact
+ local component=sanitizer
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
[0m[91m+ return 2
[0m[91m+ validate_build_variables
[0m[91m+ [[ -z x ]]
+ [[ -z /tmp ]]
[0m[91m+ validate_component sanitizer p
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=p
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/p-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ echo 'Component sanitizer not found.'
[0m[91m+ return 1
+ return 0
[0mComponent sanitizer not found.
[91m+ validate_required_variables clang required_variables
[0m[91m+ local component=clang
+ local type=required_variables
[0m[91m+ local variables
+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
++ local list_name=required_variables_clang
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
[0m[91m++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ gather_dependencies clang artifact setup_variables
+ local component=clang
[0m[91m+ local dependency_type=artifact
+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_clang
++ local list_name=artifact_dependency_clang
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
++ local list_name=required_variables_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
+ return 0
[0m[91m+ execution_action is_installed clang
[0m[91m+ local action=is_installed
+ local component=clang
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_clang
[0m[91m+ fct=is_installed_clang
[0m[91m++ type -t is_installed_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-clang-linux.inc
[0m[91m+ local failed=0
+ try_execute is_installed_clang
[0m[91m+ fct=is_installed_clang
[0m[91m++ type -t is_installed_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ is_installed_clang
[0m[91m+ which llvm-config-6.0
[0m[91m+ failed=1
+ return 1
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang.inc ]]
[0m[91m+ [[ 1 -eq 1 ]]
+ return 1
[0m[91m+ execution_action install_binary_artifact clang
[0m[91m+ local action=install_binary_artifact
+ local component=clang
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc ]]
+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute install_binary_artifact_clang
[0m[91m+ fct=install_binary_artifact_clang
[0m[91m++ type -t install_binary_artifact_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
+ install_binary_artifact_clang
[0m[91m+ local LLVM_VERSION_MAJOR=6
+ local LLVM_VERSION_MINOR=0
[0m[91m+ local version=
[0m[91m+ [[ 6 -le 6 ]]
[0m[91m+ version=-6.0
+ [[ 6 -ge 7 ]]
+ [[ 6 -gt 6 ]]
[0m[91m+ apt update -y
[0m[91m
WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

[0mGet:1 http://archive.ubuntu.com/ubuntu xenial InRelease [247 kB]
Get:2 http://security.ubuntu.com/ubuntu xenial-security InRelease [109 kB]
Get:3 http://archive.ubuntu.com/ubuntu xenial-updates InRelease [109 kB]
Get:4 http://archive.ubuntu.com/ubuntu xenial-backports InRelease [107 kB]
Get:5 http://archive.ubuntu.com/ubuntu xenial/main amd64 Packages [1558 kB]
Get:6 http://security.ubuntu.com/ubuntu xenial-security/main amd64 Packages [1019 kB]
Get:7 http://archive.ubuntu.com/ubuntu xenial/restricted amd64 Packages [14.1 kB]
Get:8 http://archive.ubuntu.com/ubuntu xenial/universe amd64 Packages [9827 kB]
Get:9 http://security.ubuntu.com/ubuntu xenial-security/restricted amd64 Packages [12.7 kB]
Get:10 http://security.ubuntu.com/ubuntu xenial-security/universe amd64 Packages [593 kB]
Get:11 http://archive.ubuntu.com/ubuntu xenial/multiverse amd64 Packages [176 kB]
Get:12 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 Packages [1408 kB]
Get:13 http://security.ubuntu.com/ubuntu xenial-security/multiverse amd64 Packages [6280 B]
Get:14 http://archive.ubuntu.com/ubuntu xenial-updates/restricted amd64 Packages [13.1 kB]
Get:15 http://archive.ubuntu.com/ubuntu xenial-updates/universe amd64 Packages [997 kB]
Get:16 http://archive.ubuntu.com/ubuntu xenial-updates/multiverse amd64 Packages [19.3 kB]
Get:17 http://archive.ubuntu.com/ubuntu xenial-backports/main amd64 Packages [7942 B]
Get:18 http://archive.ubuntu.com/ubuntu xenial-backports/universe amd64 Packages [8807 B]
Fetched 16.2 MB in 3s (4219 kB/s)
Reading package lists...
Building dependency tree...
Reading state information...
33 packages can be upgraded. Run 'apt list --upgradable' to see them.
[91m+ dependencies=("llvm${version}" "clang${version}")
[0m[91m+ apt -y --no-install-recommends install llvm-6.0 clang-6.0
[0m[91m
WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

[0mReading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  binfmt-support binutils lib32gcc1 lib32stdc++6 libasan2 libatomic1
  libc-dev-bin libc6 libc6-dev libc6-i386 libcilkrts5 libclang-common-6.0-dev
  libclang1-6.0 libgcc-5-dev libitm1 libjsoncpp1 liblsan0 libmpx0
  libobjc-5-dev libobjc4 libpipeline1 libquadmath0 libstdc++-5-dev libtsan0
  libubsan0 linux-libc-dev llvm-6.0-runtime
Suggested packages:
  binutils-doc gnustep gnustep-devel clang-6.0-doc glibc-doc locales
  manpages-dev libstdc++-5-doc llvm-6.0-doc
Recommended packages:
  llvm-6.0-dev python libomp-dev manpages manpages-dev
The following NEW packages will be installed:
  binfmt-support binutils clang-6.0 lib32gcc1 lib32stdc++6 libasan2 libatomic1
  libc-dev-bin libc6-dev libc6-i386 libcilkrts5 libclang-common-6.0-dev
  libclang1-6.0 libgcc-5-dev libitm1 libjsoncpp1 liblsan0 libmpx0
  libobjc-5-dev libobjc4 libpipeline1 libquadmath0 libstdc++-5-dev libtsan0
  libubsan0 linux-libc-dev llvm-6.0 llvm-6.0-runtime
The following packages will be upgraded:
  libc6
1 upgraded, 28 newly installed, 0 to remove and 32 not upgraded.
Need to get 38.5 MB of archives.
After this operation, 200 MB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libc6 amd64 2.23-0ubuntu11 [2577 kB]
Get:2 http://archive.ubuntu.com/ubuntu xenial/main amd64 libpipeline1 amd64 1.4.1-2 [24.6 kB]
Get:3 http://archive.ubuntu.com/ubuntu xenial/main amd64 binfmt-support amd64 2.1.6-1 [50.7 kB]
Get:4 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 binutils amd64 2.26.1-1ubuntu1~16.04.8 [2312 kB]
Get:5 http://archive.ubuntu.com/ubuntu xenial/main amd64 libjsoncpp1 amd64 1.7.2-1 [73.0 kB]
Get:6 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libitm1 amd64 5.4.0-6ubuntu1~16.04.12 [27.4 kB]
Get:7 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libatomic1 amd64 5.4.0-6ubuntu1~16.04.12 [8892 B]
Get:8 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libasan2 amd64 5.4.0-6ubuntu1~16.04.12 [265 kB]
Get:9 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 liblsan0 amd64 5.4.0-6ubuntu1~16.04.12 [105 kB]
Get:10 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libtsan0 amd64 5.4.0-6ubuntu1~16.04.12 [244 kB]
Get:11 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libubsan0 amd64 5.4.0-6ubuntu1~16.04.12 [95.3 kB]
Get:12 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libcilkrts5 amd64 5.4.0-6ubuntu1~16.04.12 [40.0 kB]
Get:13 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libmpx0 amd64 5.4.0-6ubuntu1~16.04.12 [9762 B]
Get:14 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libquadmath0 amd64 5.4.0-6ubuntu1~16.04.12 [131 kB]
Get:15 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libgcc-5-dev amd64 5.4.0-6ubuntu1~16.04.12 [2239 kB]
Get:16 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libc-dev-bin amd64 2.23-0ubuntu11 [68.5 kB]
Get:17 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 linux-libc-dev amd64 4.4.0-171.200 [844 kB]
Get:18 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libc6-dev amd64 2.23-0ubuntu11 [2086 kB]
Get:19 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libstdc++-5-dev amd64 5.4.0-6ubuntu1~16.04.12 [1428 kB]
Get:20 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libobjc4 amd64 5.4.0-6ubuntu1~16.04.12 [111 kB]
Get:21 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libobjc-5-dev amd64 5.4.0-6ubuntu1~16.04.12 [381 kB]
Get:22 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libc6-i386 amd64 2.23-0ubuntu11 [2328 kB]
Get:23 http://archive.ubuntu.com/ubuntu xenial/main amd64 lib32gcc1 amd64 1:6.0.1-0ubuntu1 [46.6 kB]
Get:24 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 lib32stdc++6 amd64 5.4.0-6ubuntu1~16.04.12 [404 kB]
Get:25 http://archive.ubuntu.com/ubuntu xenial-updates/universe amd64 libclang-common-6.0-dev amd64 1:6.0-1ubuntu2~16.04.1 [3075 kB]
Get:26 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libclang1-6.0 amd64 1:6.0-1ubuntu2~16.04.1 [6774 kB]
Get:27 http://archive.ubuntu.com/ubuntu xenial-updates/universe amd64 clang-6.0 amd64 1:6.0-1ubuntu2~16.04.1 [8680 kB]
Get:28 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 llvm-6.0-runtime amd64 1:6.0-1ubuntu2~16.04.1 [203 kB]
Get:29 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 llvm-6.0 amd64 1:6.0-1ubuntu2~16.04.1 [3870 kB]
[91mdebconf: delaying package configuration, since apt-utils is not installed
[0mFetched 38.5 MB in 6s (5637 kB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 26005 files and directories currently installed.)
Preparing to unpack .../libc6_2.23-0ubuntu11_amd64.deb ...
debconf: unable to initialize frontend: Dialog
debconf: (TERM is not set, so the dialog frontend is not usable.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (Can't locate Term/ReadLine.pm in @INC (you may need to install the Term::ReadLine module) (@INC contains: /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.22.1 /usr/local/share/perl/5.22.1 /usr/lib/x86_64-linux-gnu/perl5/5.22 /usr/share/perl5 /usr/lib/x86_64-linux-gnu/perl/5.22 /usr/share/perl/5.22 /usr/local/lib/site_perl /usr/lib/x86_64-linux-gnu/perl-base .) at /usr/share/perl5/Debconf/FrontEnd/Readline.pm line 7.)
debconf: falling back to frontend: Teletype
Unpacking libc6:amd64 (2.23-0ubuntu11) over (2.23-0ubuntu10) ...
Setting up libc6:amd64 (2.23-0ubuntu11) ...
debconf: unable to initialize frontend: Dialog
debconf: (TERM is not set, so the dialog frontend is not usable.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (Can't locate Term/ReadLine.pm in @INC (you may need to install the Term::ReadLine module) (@INC contains: /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.22.1 /usr/local/share/perl/5.22.1 /usr/lib/x86_64-linux-gnu/perl5/5.22 /usr/share/perl5 /usr/lib/x86_64-linux-gnu/perl/5.22 /usr/share/perl/5.22 /usr/local/lib/site_perl /usr/lib/x86_64-linux-gnu/perl-base .) at /usr/share/perl5/Debconf/FrontEnd/Readline.pm line 7.)
debconf: falling back to frontend: Teletype
Processing triggers for libc-bin (2.23-0ubuntu10) ...
Selecting previously unselected package libpipeline1:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 26005 files and directories currently installed.)
Preparing to unpack .../libpipeline1_1.4.1-2_amd64.deb ...
Unpacking libpipeline1:amd64 (1.4.1-2) ...
Selecting previously unselected package binfmt-support.
Preparing to unpack .../binfmt-support_2.1.6-1_amd64.deb ...
Unpacking binfmt-support (2.1.6-1) ...
Selecting previously unselected package binutils.
Preparing to unpack .../binutils_2.26.1-1ubuntu1~16.04.8_amd64.deb ...
Unpacking binutils (2.26.1-1ubuntu1~16.04.8) ...
Selecting previously unselected package libjsoncpp1:amd64.
Preparing to unpack .../libjsoncpp1_1.7.2-1_amd64.deb ...
Unpacking libjsoncpp1:amd64 (1.7.2-1) ...
Selecting previously unselected package libitm1:amd64.
Preparing to unpack .../libitm1_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libitm1:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libatomic1:amd64.
Preparing to unpack .../libatomic1_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libatomic1:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libasan2:amd64.
Preparing to unpack .../libasan2_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libasan2:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package liblsan0:amd64.
Preparing to unpack .../liblsan0_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking liblsan0:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libtsan0:amd64.
Preparing to unpack .../libtsan0_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libtsan0:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libubsan0:amd64.
Preparing to unpack .../libubsan0_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libubsan0:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libcilkrts5:amd64.
Preparing to unpack .../libcilkrts5_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libcilkrts5:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libmpx0:amd64.
Preparing to unpack .../libmpx0_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libmpx0:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libquadmath0:amd64.
Preparing to unpack .../libquadmath0_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libquadmath0:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libgcc-5-dev:amd64.
Preparing to unpack .../libgcc-5-dev_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libgcc-5-dev:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libc-dev-bin.
Preparing to unpack .../libc-dev-bin_2.23-0ubuntu11_amd64.deb ...
Unpacking libc-dev-bin (2.23-0ubuntu11) ...
Selecting previously unselected package linux-libc-dev:amd64.
Preparing to unpack .../linux-libc-dev_4.4.0-171.200_amd64.deb ...
Unpacking linux-libc-dev:amd64 (4.4.0-171.200) ...
Selecting previously unselected package libc6-dev:amd64.
Preparing to unpack .../libc6-dev_2.23-0ubuntu11_amd64.deb ...
Unpacking libc6-dev:amd64 (2.23-0ubuntu11) ...
Selecting previously unselected package libstdc++-5-dev:amd64.
Preparing to unpack .../libstdc++-5-dev_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libstdc++-5-dev:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libobjc4:amd64.
Preparing to unpack .../libobjc4_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libobjc4:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libobjc-5-dev:amd64.
Preparing to unpack .../libobjc-5-dev_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libobjc-5-dev:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libc6-i386.
Preparing to unpack .../libc6-i386_2.23-0ubuntu11_amd64.deb ...
Unpacking libc6-i386 (2.23-0ubuntu11) ...
Selecting previously unselected package lib32gcc1.
Preparing to unpack .../lib32gcc1_1%3a6.0.1-0ubuntu1_amd64.deb ...
Unpacking lib32gcc1 (1:6.0.1-0ubuntu1) ...
Selecting previously unselected package lib32stdc++6.
Preparing to unpack .../lib32stdc++6_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking lib32stdc++6 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package libclang-common-6.0-dev.
Preparing to unpack .../libclang-common-6.0-dev_1%3a6.0-1ubuntu2~16.04.1_amd64.deb ...
Unpacking libclang-common-6.0-dev (1:6.0-1ubuntu2~16.04.1) ...
Selecting previously unselected package libclang1-6.0:amd64.
Preparing to unpack .../libclang1-6.0_1%3a6.0-1ubuntu2~16.04.1_amd64.deb ...
Unpacking libclang1-6.0:amd64 (1:6.0-1ubuntu2~16.04.1) ...
Selecting previously unselected package clang-6.0.
Preparing to unpack .../clang-6.0_1%3a6.0-1ubuntu2~16.04.1_amd64.deb ...
Unpacking clang-6.0 (1:6.0-1ubuntu2~16.04.1) ...
Selecting previously unselected package llvm-6.0-runtime.
Preparing to unpack .../llvm-6.0-runtime_1%3a6.0-1ubuntu2~16.04.1_amd64.deb ...
Unpacking llvm-6.0-runtime (1:6.0-1ubuntu2~16.04.1) ...
Selecting previously unselected package llvm-6.0.
Preparing to unpack .../llvm-6.0_1%3a6.0-1ubuntu2~16.04.1_amd64.deb ...
Unpacking llvm-6.0 (1:6.0-1ubuntu2~16.04.1) ...
Processing triggers for libc-bin (2.23-0ubuntu10) ...
Processing triggers for systemd (229-4ubuntu21.4) ...
Setting up libpipeline1:amd64 (1.4.1-2) ...
Setting up binfmt-support (2.1.6-1) ...
mount: permission denied
update-binfmts: warning: Couldn't mount the binfmt_misc filesystem on /proc/sys/fs/binfmt_misc.
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up binutils (2.26.1-1ubuntu1~16.04.8) ...
Setting up libjsoncpp1:amd64 (1.7.2-1) ...
Setting up libitm1:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libatomic1:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libasan2:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up liblsan0:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libtsan0:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libubsan0:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libcilkrts5:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libmpx0:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libquadmath0:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libgcc-5-dev:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libc-dev-bin (2.23-0ubuntu11) ...
Setting up linux-libc-dev:amd64 (4.4.0-171.200) ...
Setting up libc6-dev:amd64 (2.23-0ubuntu11) ...
Setting up libstdc++-5-dev:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libobjc4:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libobjc-5-dev:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libc6-i386 (2.23-0ubuntu11) ...
Setting up lib32gcc1 (1:6.0.1-0ubuntu1) ...
Setting up lib32stdc++6 (5.4.0-6ubuntu1~16.04.12) ...
Setting up libclang-common-6.0-dev (1:6.0-1ubuntu2~16.04.1) ...
Setting up libclang1-6.0:amd64 (1:6.0-1ubuntu2~16.04.1) ...
Setting up clang-6.0 (1:6.0-1ubuntu2~16.04.1) ...
Setting up llvm-6.0-runtime (1:6.0-1ubuntu2~16.04.1) ...
mount: permission denied
update-binfmts: warning: Couldn't mount the binfmt_misc filesystem on /proc/sys/fs/binfmt_misc.
Setting up llvm-6.0 (1:6.0-1ubuntu2~16.04.1) ...
Processing triggers for libc-bin (2.23-0ubuntu10) ...
Processing triggers for systemd (229-4ubuntu21.4) ...
[91m+ return 0
+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables clang
[0m[91m+ local action=setup_artifact_variables
+ local component=clang
[0m[91m+ local found=0
+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute setup_artifact_variables_clang
[0m[91m+ fct=setup_artifact_variables_clang
[0m[91m++ type -t setup_artifact_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_artifact_variables_clang
[0m[91m+ local LLVM_VERSION_MAJOR=6
+ local LLVM_VERSION_MINOR=0
[0m[91m+ local version=
+ [[ 6 -le 6 ]]
[0m[91m+ version=-6.0
+ [[ 6 -ge 7 ]]
[0m[91m+ [[ -z x ]]
+ local bin_path=
[0m[91m++++ which clang-6.0
[0m[91m+++ readlink -f /usr/bin/clang-6.0
[0m[91m++ dirname /usr/lib/llvm-6.0/bin/clang
[0m[91m+ bin_path=/usr/lib/llvm-6.0/bin
+ BITCODE_CC=/usr/lib/llvm-6.0/bin/clang
+ BITCODE_CXX=/usr/lib/llvm-6.0/bin/clang++
+ SANITIZER_C_COMPILER=/usr/lib/llvm-6.0/bin/clang
+ SANITIZER_CXX_COMPILER=/usr/lib/llvm-6.0/bin/clang++
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
[0m[91m+ return 0
[0m[91m+ validate_required_variables clang export_variables
[0m[91m+ local component=clang
+ local type=export_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_clang
[0m[91m++ local list_name=export_variables_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t export_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='export_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_CONFIG ]]
[0m[91m++ echo LLVM_CONFIG
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z BITCODE_CC ]]
++ echo BITCODE_CC
++ for i in '"${result[@]}"'
++ [[ -z BITCODE_CXX ]]
++ echo BITCODE_CXX
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_CONFIG BITCODE_CC BITCODE_CXX ]]
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ echo 'Package installed clang'
+ return 0
[0mPackage installed clang
[91m+ validate_required_variables sanitizer_compiler required_variables
+ local component=sanitizer_compiler
[0m[91m+ local type=required_variables
+ local variables
+ check_list required_variables_sanitizer_compiler
[0m[91m+ local list_name=required_variables_sanitizer_compiler
[0m[91m++ type -t required_variables_sanitizer_compiler
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer_compiler[@]'
[0m[91m+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer_compiler
++ local list_name=required_variables_sanitizer_compiler
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer_compiler
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer_compiler[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer_compiler
[0m[91m+ fct=required_variables_check_sanitizer_compiler
[0m[91m++ type -t required_variables_check_sanitizer_compiler
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ gather_dependencies sanitizer_compiler artifact setup_variables
[0m[91m+ local component=sanitizer_compiler
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
+++ echo sanitizer
[0m[91m+++ [[ -n x ]]
[0m[91m+++ [[ '' == \m\e\m\o\r\y ]]
[0m[91m+++ [[ '' != \m\e\m\o\r\y ]]
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
++ for i in '"${result[@]}"'
++ [[ -z clang ]]
[0m[91m++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z sanitizer ]]
+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
++ local list_name=required_variables_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
[0m[91m+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
[0m[91m+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sanitizer_compiler
[0m[91m+ fct=setup_variables_sanitizer_compiler
[0m[91m++ type -t setup_variables_sanitizer_compiler
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer_compiler
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sanitizer_compiler
[0m[91m+ local action=is_installed
+ local component=sanitizer_compiler
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
[0m[91m+ return 2
[0m[91m+ execution_action install_binary_artifact sanitizer_compiler
[0m[91m+ local action=install_binary_artifact
+ local component=sanitizer_compiler
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux-ubuntu-16.04.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ validate_build_variables
[0m[91m+ [[ -z x ]]
+ [[ -z /tmp ]]
[0m[91m+ validate_component sanitizer_compiler p
[0m[91m+ local component=sanitizer_compiler
[0m[91m+ local c_type=p
+ local component_path=/tmp/klee_src/scripts/build/p-sanitizer_compiler.inc
+ [[ ! -f /tmp/klee_src/scripts/build/p-sanitizer_compiler.inc ]]
[0mComponent sanitizer_compiler not found.
[91m+ echo 'Component sanitizer_compiler not found.'
+ return 1
+ return 0
[0m[91m+ validate_required_variables stp required_variables
+ local component=stp
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_stp
[0m[91m+ local list_name=required_variables_stp
[0m[91m++ type -t required_variables_stp
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_stp[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_stp
[0m[91m++ local list_name=required_variables_stp
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_stp
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
++ list_array='required_variables_stp[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z STP_VERSION ]]
[0m[91m++ echo STP_VERSION
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z MINISAT_VERSION ]]
[0m[91m++ echo MINISAT_VERSION
++ return 0
[0m[91m+ [[ -n STP_VERSION MINISAT_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_stp
[0m[91m+ fct=required_variables_check_stp
[0m[91m++ type -t required_variables_check_stp
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ gather_dependencies stp artifact setup_variables
[0m[91m+ local component=stp
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_stp
[0m[91m+ local list_name=artifact_dependency_stp
[0m[91m++ type -t artifact_dependency_stp
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_stp[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_stp
++ local list_name=artifact_dependency_stp
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_stp
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_stp[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer_compiler ]]
[0m[91m++ echo sanitizer_compiler
++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z sanitizer_compiler ]]
[0m[91m+ gather_dependencies_rec sanitizer_compiler artifact setup_variables
[0m[91m+ local component=sanitizer_compiler
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer_compiler v
[0m[91m+ local component=sanitizer_compiler
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m++ required_variables_sanitizer_compiler=("")
[0m[91m+ validate_required_variables sanitizer_compiler required_variables
+ local component=sanitizer_compiler
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer_compiler
[0m[91m+ local list_name=required_variables_sanitizer_compiler
[0m[91m++ type -t required_variables_sanitizer_compiler
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer_compiler[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer_compiler
[0m[91m++ local list_name=required_variables_sanitizer_compiler
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer_compiler
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer_compiler[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
+ try_execute_if_exists required_variables_check_sanitizer_compiler
[0m[91m+ fct=required_variables_check_sanitizer_compiler
[0m[91m++ type -t required_variables_check_sanitizer_compiler
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
++ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
+++ echo sanitizer
+++ [[ -n x ]]
+++ [[ '' == \m\e\m\o\r\y ]]
+++ [[ '' != \m\e\m\o\r\y ]]
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
[0m[91m+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sanitizer_compiler
[0m[91m+ fct=setup_variables_sanitizer_compiler
[0m[91m++ type -t setup_variables_sanitizer_compiler
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer_compiler
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
[0m[91m+ [[ -z '' ]]
+ continue
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_stp
+ fct=setup_variables_stp
[0m[91m++ type -t setup_variables_stp
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ execution_action is_installed stp
[0m[91m+ local action=is_installed
+ local component=stp
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-stp-linux-ubuntu-16.04.inc ]]
+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-stp-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_stp
[0m[91m+ fct=is_installed_stp
[0m[91m++ type -t is_installed_stp
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-stp-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-stp-linux.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-stp.inc ]]
[0m[91m+ found=1
+ source /tmp/klee_src/scripts/build/p-stp.inc
[0m[91m+ local failed=0
+ try_execute is_installed_stp
[0m[91m+ fct=is_installed_stp
[0m[91m++ type -t is_installed_stp
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ is_installed_stp
[0m[91m+ setup_build_variables_stp
+ STP_SUFFIX=
[0m[91m+ MINISAT_BUILD_PATH=/tmp/minisat-build
+ MINISAT_INSTALL_PATH=/tmp/minisat-install
[0m[91m+ STP_BUILD_PATH=/tmp/stp-2.3.3-build
+ STP_INSTALL_PATH=/tmp/stp-2.3.3-install
+ stp_url=https://github.com/stp/stp.git
[0m[91m+ return 0
[0m[91m+ [[ -f /tmp/stp-2.3.3-install/.stp_installed ]]
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables stp
[0m[91m+ local action=setup_artifact_variables
+ local component=stp
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-stp-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-stp-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute setup_artifact_variables_stp
[0m[91m+ fct=setup_artifact_variables_stp
[0m[91m++ type -t setup_artifact_variables_stp
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_artifact_variables_stp
[0m[91m+ setup_build_variables_stp
[0m[91m+ STP_SUFFIX=
+ MINISAT_BUILD_PATH=/tmp/minisat-build
[0m[91m+ MINISAT_INSTALL_PATH=/tmp/minisat-install
+ STP_BUILD_PATH=/tmp/stp-2.3.3-build
[0m[91m+ STP_INSTALL_PATH=/tmp/stp-2.3.3-install
+ stp_url=https://github.com/stp/stp.git
[0m[91m+ return 0
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ validate_required_variables stp export_variables
[0m[91m+ local component=stp
[0m[91m+ local type=export_variables
+ local variables
+ check_list required_variables_stp
[0m[91m+ local list_name=required_variables_stp
[0m[91m++ type -t required_variables_stp
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_stp[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_stp
[0m[91m++ local list_name=export_variables_stp
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t export_variables_stp
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n '' ]]
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
+ try_execute_if_exists required_variables_check_stp
[0m[91m+ fct=required_variables_check_stp
[0m[91m++ type -t required_variables_check_stp
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ echo 'Already installed stp'
+ return 0
[0mAlready installed stp
[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z z3 ]]
[0m[91m+ install_component z3
[0m[91m+ local component=z3
[0m[91m+ load_component z3 v
[0m[91m+ local component=z3
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-z3.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-z3.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-z3.inc
[0m[91m++ required_variables_z3=("Z3_VERSION")
[0m[91m++ artifact_dependency_z3=("sanitizer_compiler")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_z3
[0m[91m+ local list_name=artifact_dependency_z3
[0m[91m++ type -t artifact_dependency_z3
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_z3[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_z3
[0m[91m++ local list_name=artifact_dependency_z3
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_z3
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_z3[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer_compiler ]]
[0m[91m++ echo sanitizer_compiler
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z sanitizer_compiler ]]
[0m[91m+ install_component sanitizer_compiler
[0m[91m+ local component=sanitizer_compiler
+ load_component sanitizer_compiler v
[0m[91m+ local component=sanitizer_compiler
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m++ required_variables_sanitizer_compiler=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
+++ echo sanitizer
[0m[91m+++ [[ -n x ]]
[0m[91m+++ [[ '' == \m\e\m\o\r\y ]]
[0m[91m+++ [[ '' != \m\e\m\o\r\y ]]
[0m[91m+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
++ for i in '"${result[@]}"'
[0m[91m++ [[ -z clang ]]
++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ install_component sanitizer
[0m[91m+ local component=sanitizer
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sanitizer
++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ gather_dependencies sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
[0m[91m+ return 0
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sanitizer
[0m[91m+ local action=is_installed
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
+ [[ 0 -eq 1 ]]
[0m[91m+ return 2
[0m[91m+ execution_action install_binary_artifact sanitizer
[0m[91m+ local action=install_binary_artifact
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ validate_build_variables
+ [[ -z x ]]
[0m[91m+ [[ -z /tmp ]]
+ validate_component sanitizer p
[0m[91m+ local component=sanitizer
+ local c_type=p
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/p-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ echo 'Component sanitizer not found.'
+ return 1
[0mComponent sanitizer not found.
[91m+ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z clang ]]
[0m[91m+ install_component clang
[0m[91m+ local component=clang
+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_clang
++ local list_name=artifact_dependency_clang
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ install_component sanitizer
[0m[91m+ local component=sanitizer
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ gather_dependencies sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local dependency_type=artifact
+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sanitizer
[0m[91m+ local action=is_installed
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ execution_action install_binary_artifact sanitizer
[0m[91m+ local action=install_binary_artifact
+ local component=sanitizer
[0m[91m+ local found=0
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
+ [[ 0 -eq 1 ]]
[0m[91m+ return 2
[0m[91m+ validate_build_variables
[0m[91m+ [[ -z x ]]
+ [[ -z /tmp ]]
[0m[91m+ validate_component sanitizer p
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=p
+ local component_path=/tmp/klee_src/scripts/build/p-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0mComponent sanitizer not found.
[91m+ echo 'Component sanitizer not found.'
+ return 1
[0m[91m+ return 0
[0m[91m+ validate_required_variables clang required_variables
[0m[91m+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ gather_dependencies clang artifact setup_variables
+ local component=clang
[0m[91m+ local dependency_type=artifact
+ local action=setup_variables
[0m[91m+ local depending_components
[0m[91m+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ execution_action is_installed clang
[0m[91m+ local action=is_installed
+ local component=clang
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_clang
[0m[91m+ fct=is_installed_clang
[0m[91m++ type -t is_installed_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ is_installed_clang
[0m[91m+ which llvm-config-6.0
[0m/usr/bin/llvm-config-6.0
[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables clang
[0m[91m+ local action=setup_artifact_variables
+ local component=clang
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute setup_artifact_variables_clang
[0m[91m+ fct=setup_artifact_variables_clang
[0m[91m++ type -t setup_artifact_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_artifact_variables_clang
[0m[91m+ local LLVM_VERSION_MAJOR=6
[0m[91m+ local LLVM_VERSION_MINOR=0
[0m[91m+ local version=
+ [[ 6 -le 6 ]]
[0m[91m+ version=-6.0
+ [[ 6 -ge 7 ]]
[0m[91m+ [[ -z x ]]
+ local bin_path=
[0m[91m++++ which clang-6.0
[0m[91m+++ readlink -f /usr/bin/clang-6.0
[0m[91m++ dirname /usr/lib/llvm-6.0/bin/clang
[0m[91m+ bin_path=/usr/lib/llvm-6.0/bin
+ BITCODE_CC=/usr/lib/llvm-6.0/bin/clang
+ BITCODE_CXX=/usr/lib/llvm-6.0/bin/clang++
[0m[91m+ SANITIZER_C_COMPILER=/usr/lib/llvm-6.0/bin/clang
+ SANITIZER_CXX_COMPILER=/usr/lib/llvm-6.0/bin/clang++
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ validate_required_variables clang export_variables
[0m[91m+ local component=clang
[0m[91m+ local type=export_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_clang
[0m[91m++ local list_name=export_variables_clang
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t export_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='export_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_CONFIG ]]
++ echo LLVM_CONFIG
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z BITCODE_CC ]]
[0m[91m++ echo BITCODE_CC
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z BITCODE_CXX ]]
++ echo BITCODE_CXX
++ return 0
[0m[91m+ [[ -n LLVM_CONFIG BITCODE_CC BITCODE_CXX ]]
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ echo 'Already installed clang'
+ return 0
[0mAlready installed clang
[91m+ validate_required_variables sanitizer_compiler required_variables
+ local component=sanitizer_compiler
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer_compiler
[0m[91m+ local list_name=required_variables_sanitizer_compiler
[0m[91m++ type -t required_variables_sanitizer_compiler
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer_compiler[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer_compiler
[0m[91m++ local list_name=required_variables_sanitizer_compiler
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer_compiler
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_sanitizer_compiler[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
+ try_execute_if_exists required_variables_check_sanitizer_compiler
[0m[91m+ fct=required_variables_check_sanitizer_compiler
[0m[91m++ type -t required_variables_check_sanitizer_compiler
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ gather_dependencies sanitizer_compiler artifact setup_variables
+ local component=sanitizer_compiler
[0m[91m+ local dependency_type=artifact
+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
[0m[91m+++ echo sanitizer
[0m[91m+++ [[ -n x ]]
[0m[91m+++ [[ '' == \m\e\m\o\r\y ]]
+++ [[ '' != \m\e\m\o\r\y ]]
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
[0m[91m++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
++ local list_name=required_variables_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
[0m[91m+ local type=artifact
+ local action=setup_variables
[0m[91m+ load_component clang v
[0m[91m+ local component=clang
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
[0m[91m+ local component=clang
+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sanitizer_compiler
[0m[91m+ fct=setup_variables_sanitizer_compiler
[0m[91m++ type -t setup_variables_sanitizer_compiler
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer_compiler
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sanitizer_compiler
[0m[91m+ local action=is_installed
+ local component=sanitizer_compiler
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ execution_action install_binary_artifact sanitizer_compiler
[0m[91m+ local action=install_binary_artifact
+ local component=sanitizer_compiler
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux-ubuntu-16.04.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
+ validate_build_variables
[0m[91m+ [[ -z x ]]
+ [[ -z /tmp ]]
[0m[91m+ validate_component sanitizer_compiler p
[0m[91m+ local component=sanitizer_compiler
[0m[91m+ local c_type=p
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/p-sanitizer_compiler.inc
+ [[ ! -f /tmp/klee_src/scripts/build/p-sanitizer_compiler.inc ]]
[0m[91m+ echo 'Component sanitizer_compiler not found.'
[0m[91m+ return 1
+ return 0
[0mComponent sanitizer_compiler not found.
[91m+ validate_required_variables z3 required_variables
+ local component=z3
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_z3
[0m[91m+ local list_name=required_variables_z3
[0m[91m++ type -t required_variables_z3
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_z3[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_z3
[0m[91m++ local list_name=required_variables_z3
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_z3
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_z3[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z Z3_VERSION ]]
++ echo Z3_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n Z3_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_z3
[0m[91m+ fct=required_variables_check_z3
[0m[91m++ type -t required_variables_check_z3
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ gather_dependencies z3 artifact setup_variables
[0m[91m+ local component=z3
[0m[91m+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ local depending_components
[0m[91m+ check_list artifact_dependency_z3
[0m[91m+ local list_name=artifact_dependency_z3
[0m[91m++ type -t artifact_dependency_z3
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_z3[@]'
+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_z3
[0m[91m++ local list_name=artifact_dependency_z3
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_z3
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_z3[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer_compiler ]]
[0m[91m++ echo sanitizer_compiler
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z sanitizer_compiler ]]
[0m[91m+ gather_dependencies_rec sanitizer_compiler artifact setup_variables
[0m[91m+ local component=sanitizer_compiler
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer_compiler v
[0m[91m+ local component=sanitizer_compiler
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m++ required_variables_sanitizer_compiler=("")
[0m[91m+ validate_required_variables sanitizer_compiler required_variables
+ local component=sanitizer_compiler
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer_compiler
[0m[91m+ local list_name=required_variables_sanitizer_compiler
[0m[91m++ type -t required_variables_sanitizer_compiler
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer_compiler[@]'
[0m[91m+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer_compiler
[0m[91m++ local list_name=required_variables_sanitizer_compiler
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer_compiler
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer_compiler[@]'
[0m[91m++ result=("${!list_array}")
++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
++ return 0
[0m[91m+ [[ -n '' ]]
+ try_execute_if_exists required_variables_check_sanitizer_compiler
[0m[91m+ fct=required_variables_check_sanitizer_compiler
[0m[91m++ type -t required_variables_check_sanitizer_compiler
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
[0m[91m+++ echo sanitizer
[0m[91m+++ [[ -n x ]]
+++ [[ '' == \m\e\m\o\r\y ]]
[0m[91m+++ [[ '' != \m\e\m\o\r\y ]]
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
++ for i in '"${result[@]}"'
++ [[ -z clang ]]
[0m[91m++ echo clang
++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z clang ]]
+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_clang
+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
[0m[91m++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sanitizer_compiler
+ fct=setup_variables_sanitizer_compiler
[0m[91m++ type -t setup_variables_sanitizer_compiler
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer_compiler
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_z3
+ fct=setup_variables_z3
[0m[91m++ type -t setup_variables_z3
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ execution_action is_installed z3
[0m[91m+ local action=is_installed
+ local component=z3
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-z3-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
+ source /tmp/klee_src/scripts/build/p-z3-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_z3
[0m[91m+ fct=is_installed_z3
[0m[91m++ type -t is_installed_z3
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-z3-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-z3-linux.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-z3.inc ]]
[0m[91m+ found=1
+ source /tmp/klee_src/scripts/build/p-z3.inc
[0m[91m+ local failed=0
+ try_execute is_installed_z3
+ fct=is_installed_z3
[0m[91m++ type -t is_installed_z3
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ is_installed_z3
[0m[91m+ setup_build_variables_z3
[0m[91m+ Z3_SUFFIX=
+ Z3_SRC_PATH=/tmp/z3-4.8.4
[0m[91m+ Z3_INSTALL_PATH=/tmp/z3-4.8.4-install
[0m[91m+ [[ -f /tmp/z3-4.8.4-install/.is_installed ]]
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables z3
[0m[91m+ local action=setup_artifact_variables
+ local component=z3
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-z3-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-z3-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
[0m[91m+ try_execute setup_artifact_variables_z3
+ fct=setup_artifact_variables_z3
[0m[91m++ type -t setup_artifact_variables_z3
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_artifact_variables_z3
[0m[91m+ setup_build_variables_z3
[0m[91m+ Z3_SUFFIX=
[0m[91m+ Z3_SRC_PATH=/tmp/z3-4.8.4
[0m[91m+ Z3_INSTALL_PATH=/tmp/z3-4.8.4-install
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ validate_required_variables z3 export_variables
[0m[91m+ local component=z3
+ local type=export_variables
+ local variables
[0m[91m+ check_list required_variables_z3
[0m[91m+ local list_name=required_variables_z3
[0m[91m++ type -t required_variables_z3
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_z3[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_z3
[0m[91m++ local list_name=export_variables_z3
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t export_variables_z3
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n '' ]]
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
[0m[91m+ try_execute_if_exists required_variables_check_z3
[0m[91m+ fct=required_variables_check_z3
[0m[91m++ type -t required_variables_check_z3
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ echo 'Already installed z3'
[0m[91m+ return 0
[0mAlready installed z3
[91m+ validate_required_variables solvers required_variables
[0m[91m+ local component=solvers
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_solvers
[0m[91m+ local list_name=required_variables_solvers
[0m[91m++ type -t required_variables_solvers
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_solvers[@]'
+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_solvers
[0m[91m++ local list_name=required_variables_solvers
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_solvers
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_solvers[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SOLVERS ]]
++ echo SOLVERS
[0m[91m++ return 0
[0m[91m+ [[ -n SOLVERS ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_solvers
[0m[91m+ fct=required_variables_check_solvers
[0m[91m++ type -t required_variables_check_solvers
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_solvers
[0m[91m+ local solvers
[0m[91m+ IFS=:
+ read -r -a solvers
[0m[91m+ [[ -z STP Z3 ]]
+ for solver in '"${solvers[@]}"'
[0m[91m+ [[ -z STP ]]
[0m[91m++ to_lower STP
[0m[91m++ echo STP
[0m[91m++ tr '[:upper:]' '[:lower:]'
[0m[91m+ solver=stp
+ [[ stp == \z\3 ]]
+ [[ stp == \s\t\p ]]
+ continue
+ for solver in '"${solvers[@]}"'
+ [[ -z Z3 ]]
[0m[91m++ to_lower Z3
[0m[91m++ echo Z3
[0m[91m++ tr '[:upper:]' '[:lower:]'
[0m[91m+ solver=z3
+ [[ z3 == \z\3 ]]
+ continue
[0m[91m+ return 0
[0m[91m+ gather_dependencies solvers artifact setup_variables
[0m[91m+ local component=solvers
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_solvers
[0m[91m+ local list_name=artifact_dependency_solvers
[0m[91m++ type -t artifact_dependency_solvers
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_solvers
[0m[91m++ local list_name=artifact_dependency_solvers
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_solvers
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_solvers
[0m[91m+++ setup_variables_solvers
[0m[91m+++ local solvers
+++ IFS=:
+++ read -r -a solvers
[0m[91m+++ SELECTED_SOLVERS=()
+++ for solver in '"${solvers[@]}"'
+++ [[ -z STP ]]
[0m[91m++++ to_lower STP
[0m[91m++++ echo STP
[0m[91m++++ tr '[:upper:]' '[:lower:]'
[0m[91m+++ solver=stp
+++ [[ stp == \z\3 ]]
+++ [[ stp == \s\t\p ]]
+++ SELECTED_SOLVERS+=("stp")
[0m[91m+++ continue
[0m[91m+++ for solver in '"${solvers[@]}"'
[0m[91m+++ [[ -z Z3 ]]
[0m[91m++++ to_lower Z3
[0m[91m++++ echo Z3
[0m[91m++++ tr '[:upper:]' '[:lower:]'
[0m[91m+++ solver=z3
+++ [[ z3 == \z\3 ]]
+++ SELECTED_SOLVERS+=("z3")
+++ continue
+++ SELECTED_SOLVERS=($( for e in "${SELECTED_SOLVERS[@]}"; do echo "$e"; done | sort|uniq))
[0m[91m++++ sort
[0m[91m++++ uniq
++++ for e in '"${SELECTED_SOLVERS[@]}"'
[0m[91m++++ echo stp
[0m[91m++++ for e in '"${SELECTED_SOLVERS[@]}"'
++++ echo z3
[0m[91m++++ IFS=_
[0m[91m++++ echo stp_z3
[0m[91m+++ SOLVER_SUFFIX=stp_z3
[0m[91m+++ for solver in '"${SELECTED_SOLVERS[@]}"'
+++ echo stp
[0m[91m+++ for solver in '"${SELECTED_SOLVERS[@]}"'
+++ echo z3
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z stp ]]
[0m[91m++ echo stp
++ for i in '"${result[@]}"'
[0m[91m++ [[ -z z3 ]]
[0m[91m++ echo z3
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
[0m[91m+ [[ -z stp ]]
[0m[91m+ gather_dependencies_rec stp artifact setup_variables
[0m[91m+ local component=stp
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component stp v
[0m[91m+ local component=stp
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-stp.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-stp.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-stp.inc
[0m[91m++ required_variables_stp=("STP_VERSION" "MINISAT_VERSION")
[0m[91m++ artifact_dependency_stp=("sanitizer_compiler")
[0m[91m+ validate_required_variables stp required_variables
[0m[91m+ local component=stp
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_stp
[0m[91m+ local list_name=required_variables_stp
[0m[91m++ type -t required_variables_stp
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_stp[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_stp
[0m[91m++ local list_name=required_variables_stp
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_stp
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
++ list_array='required_variables_stp[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z STP_VERSION ]]
++ echo STP_VERSION
++ for i in '"${result[@]}"'
++ [[ -z MINISAT_VERSION ]]
[0m[91m++ echo MINISAT_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n STP_VERSION MINISAT_VERSION ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_stp
[0m[91m+ fct=required_variables_check_stp
[0m[91m++ type -t required_variables_check_stp
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_stp
[0m[91m+ local list_name=artifact_dependency_stp
[0m[91m++ type -t artifact_dependency_stp
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_stp[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_stp
[0m[91m++ local list_name=artifact_dependency_stp
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_stp
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_stp[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer_compiler ]]
[0m[91m++ echo sanitizer_compiler
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z sanitizer_compiler ]]
[0m[91m+ gather_dependencies_rec sanitizer_compiler artifact setup_variables
[0m[91m+ local component=sanitizer_compiler
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer_compiler v
[0m[91m+ local component=sanitizer_compiler
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m++ required_variables_sanitizer_compiler=("")
[0m[91m+ validate_required_variables sanitizer_compiler required_variables
+ local component=sanitizer_compiler
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer_compiler
[0m[91m+ local list_name=required_variables_sanitizer_compiler
[0m[91m++ type -t required_variables_sanitizer_compiler
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer_compiler[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer_compiler
[0m[91m++ local list_name=required_variables_sanitizer_compiler
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer_compiler
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer_compiler[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
++ return 0
[0m[91m+ [[ -n '' ]]
+ try_execute_if_exists required_variables_check_sanitizer_compiler
[0m[91m+ fct=required_variables_check_sanitizer_compiler
[0m[91m++ type -t required_variables_check_sanitizer_compiler
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
[0m[91m+++ echo sanitizer
[0m[91m+++ [[ -n x ]]
[0m[91m+++ [[ '' == \m\e\m\o\r\y ]]
+++ [[ '' != \m\e\m\o\r\y ]]
[0m[91m+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
++ for i in '"${result[@]}"'
[0m[91m++ [[ -z clang ]]
++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sanitizer_compiler
+ fct=setup_variables_sanitizer_compiler
[0m[91m++ type -t setup_variables_sanitizer_compiler
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer_compiler
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_stp
+ fct=setup_variables_stp
[0m[91m++ type -t setup_variables_stp
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z z3 ]]
[0m[91m+ gather_dependencies_rec z3 artifact setup_variables
[0m[91m+ local component=z3
[0m[91m+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component z3 v
+ local component=z3
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-z3.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-z3.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-z3.inc
[0m[91m++ required_variables_z3=("Z3_VERSION")
[0m[91m++ artifact_dependency_z3=("sanitizer_compiler")
[0m[91m+ validate_required_variables z3 required_variables
[0m[91m+ local component=z3
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_z3
[0m[91m+ local list_name=required_variables_z3
[0m[91m++ type -t required_variables_z3
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_z3[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_z3
[0m[91m++ local list_name=required_variables_z3
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_z3
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_z3[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z Z3_VERSION ]]
++ echo Z3_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n Z3_VERSION ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_z3
[0m[91m+ fct=required_variables_check_z3
[0m[91m++ type -t required_variables_check_z3
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_z3
[0m[91m+ local list_name=artifact_dependency_z3
[0m[91m++ type -t artifact_dependency_z3
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_z3[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_z3
[0m[91m++ local list_name=artifact_dependency_z3
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_z3
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_z3[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer_compiler ]]
[0m[91m++ echo sanitizer_compiler
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z sanitizer_compiler ]]
[0m[91m+ gather_dependencies_rec sanitizer_compiler artifact setup_variables
[0m[91m+ local component=sanitizer_compiler
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer_compiler v
[0m[91m+ local component=sanitizer_compiler
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m++ required_variables_sanitizer_compiler=("")
[0m[91m+ validate_required_variables sanitizer_compiler required_variables
+ local component=sanitizer_compiler
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer_compiler
[0m[91m+ local list_name=required_variables_sanitizer_compiler
[0m[91m++ type -t required_variables_sanitizer_compiler
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer_compiler[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer_compiler
[0m[91m++ local list_name=required_variables_sanitizer_compiler
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer_compiler
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer_compiler[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
+ try_execute_if_exists required_variables_check_sanitizer_compiler
[0m[91m+ fct=required_variables_check_sanitizer_compiler
[0m[91m++ type -t required_variables_check_sanitizer_compiler
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
[0m[91m+++ echo sanitizer
[0m[91m+++ [[ -n x ]]
+++ [[ '' == \m\e\m\o\r\y ]]
[0m[91m+++ [[ '' != \m\e\m\o\r\y ]]
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
++ echo clang
++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
+ local action=setup_variables
[0m[91m+ load_component clang v
+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sanitizer_compiler
+ fct=setup_variables_sanitizer_compiler
[0m[91m++ type -t setup_variables_sanitizer_compiler
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer_compiler
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_z3
+ fct=setup_variables_z3
[0m[91m++ type -t setup_variables_z3
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ try_execute_if_exists setup_variables_solvers
+ fct=setup_variables_solvers
[0m[91m++ type -t setup_variables_solvers
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_solvers
[0m[91m+ local solvers
+ IFS=:
[0m[91m+ read -r -a solvers
[0m[91m+ SELECTED_SOLVERS=()
[0m[91m+ for solver in '"${solvers[@]}"'
+ [[ -z STP ]]
[0m[91m++ to_lower STP
[0m[91m++ echo STP
[0m[91m++ tr '[:upper:]' '[:lower:]'
[0m[91m+ solver=stp
+ [[ stp == \z\3 ]]
+ [[ stp == \s\t\p ]]
+ SELECTED_SOLVERS+=("stp")
+ continue
+ for solver in '"${solvers[@]}"'
+ [[ -z Z3 ]]
[0m[91m++ to_lower Z3
[0m[91m++ echo Z3
[0m[91m++ tr '[:upper:]' '[:lower:]'
[0m[91m+ solver=z3
[0m[91m+ [[ z3 == \z\3 ]]
+ SELECTED_SOLVERS+=("z3")
[0m[91m+ continue
[0m[91m+ SELECTED_SOLVERS=($( for e in "${SELECTED_SOLVERS[@]}"; do echo "$e"; done | sort|uniq))
[0m[91m++ sort
++ for e in '"${SELECTED_SOLVERS[@]}"'
[0m[91m++ echo stp
[0m[91m++ for e in '"${SELECTED_SOLVERS[@]}"'
++ echo z3
[0m[91m++ uniq
[0m[91m++ IFS=_
[0m[91m++ echo stp_z3
[0m[91m+ SOLVER_SUFFIX=stp_z3
[0m[91m+ return 0
[0m[91m+ execution_action is_installed solvers
[0m[91m+ local action=is_installed
+ local component=solvers
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-solvers-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-solvers-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-solvers-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-solvers.inc ]]
+ [[ 0 -eq 1 ]]
[0m[91m+ return 2
[0m[91m+ execution_action install_binary_artifact solvers
[0m[91m+ local action=install_binary_artifact
+ local component=solvers
[0m[91m+ local found=0
+ [[ -f /tmp/klee_src/scripts/build/p-solvers-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-solvers-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-solvers-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-solvers.inc ]]
+ [[ 0 -eq 1 ]]
[0m[91m+ return 2
[0m[91m+ validate_build_variables
[0m[91m+ [[ -z x ]]
+ [[ -z /tmp ]]
[0m[91m+ validate_component solvers p
[0m[91m+ local component=solvers
[0m[91m+ local c_type=p
+ local component_path=/tmp/klee_src/scripts/build/p-solvers.inc
+ [[ ! -f /tmp/klee_src/scripts/build/p-solvers.inc ]]
[0m[91m+ echo 'Component solvers not found.'
+ return 1
[0mComponent solvers not found.
[91m+ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z gtest ]]
[0m[91m+ install_component gtest
[0m[91m+ local component=gtest
+ load_component gtest v
[0m[91m+ local component=gtest
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-gtest.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-gtest.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-gtest.inc
[0m[91m++ required_variables_gtest=("GTEST_VERSION")
[0m[91m++ artifact_dependency_gtest=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_gtest
[0m[91m+ local list_name=artifact_dependency_gtest
[0m[91m++ type -t artifact_dependency_gtest
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_gtest[@]'
[0m[91m+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_gtest
[0m[91m++ local list_name=artifact_dependency_gtest
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_gtest
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_gtest[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
[0m[91m+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ validate_required_variables gtest required_variables
[0m[91m+ local component=gtest
+ local type=required_variables
+ local variables
+ check_list required_variables_gtest
[0m[91m+ local list_name=required_variables_gtest
[0m[91m++ type -t required_variables_gtest
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_gtest[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_gtest
[0m[91m++ local list_name=required_variables_gtest
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_gtest
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_gtest[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z GTEST_VERSION ]]
++ echo GTEST_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n GTEST_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_gtest
[0m[91m+ fct=required_variables_check_gtest
[0m[91m++ type -t required_variables_check_gtest
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ gather_dependencies gtest artifact setup_variables
+ local component=gtest
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_gtest
+ local list_name=artifact_dependency_gtest
[0m[91m++ type -t artifact_dependency_gtest
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_gtest[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_gtest
[0m[91m++ local list_name=artifact_dependency_gtest
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_gtest
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_gtest[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_gtest
[0m[91m+ fct=setup_variables_gtest
[0m[91m++ type -t setup_variables_gtest
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ execution_action is_installed gtest
[0m[91m+ local action=is_installed
+ local component=gtest
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-gtest-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
+ source /tmp/klee_src/scripts/build/p-gtest-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_gtest
[0m[91m+ fct=is_installed_gtest
[0m[91m++ type -t is_installed_gtest
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-gtest-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-gtest-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-gtest.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-gtest.inc
[0m[91m+ local failed=0
+ try_execute is_installed_gtest
[0m[91m+ fct=is_installed_gtest
[0m[91m++ type -t is_installed_gtest
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ is_installed_gtest
[0m[91m+ setup_build_variables_gtest
[0m[91m+ GTEST_INSTALL_PATH=/tmp/googletest-release-1.7.0
[0m[91m+ return 0
[0m[91m+ [[ -f /tmp/googletest-release-1.7.0/.is_installed ]]
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables gtest
[0m[91m+ local action=setup_artifact_variables
+ local component=gtest
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-gtest-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-gtest-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute setup_artifact_variables_gtest
[0m[91m+ fct=setup_artifact_variables_gtest
[0m[91m++ type -t setup_artifact_variables_gtest
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_artifact_variables_gtest
[0m[91m+ setup_build_variables_gtest
[0m[91m+ GTEST_INSTALL_PATH=/tmp/googletest-release-1.7.0
+ return 0
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ validate_required_variables gtest export_variables
[0m[91m+ local component=gtest
+ local type=export_variables
[0m[91m+ local variables
+ check_list required_variables_gtest
[0m[91m+ local list_name=required_variables_gtest
[0m[91m++ type -t required_variables_gtest
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_gtest[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_gtest
[0m[91m++ local list_name=export_variables_gtest
++ result=("")
++ local result
[0m[91m+++ type -t export_variables_gtest
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n '' ]]
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
[0m[91m+ try_execute_if_exists required_variables_check_gtest
[0m[91m+ fct=required_variables_check_gtest
[0m[91m++ type -t required_variables_check_gtest
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ echo 'Already installed gtest'
+ return 0
[0mAlready installed gtest
[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z sqlite ]]
[0m[91m+ install_component sqlite
[0m[91m+ local component=sqlite
+ load_component sqlite v
[0m[91m+ local component=sqlite
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sqlite.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sqlite.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sqlite.inc
[0m[91m++ artifact_dependency_sqlite=("sanitizer_compiler")
[0m[91m++ required_variables_sqlite=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sqlite
[0m[91m+ local list_name=artifact_dependency_sqlite
[0m[91m++ type -t artifact_dependency_sqlite
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sqlite[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sqlite
[0m[91m++ local list_name=artifact_dependency_sqlite
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sqlite
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sqlite[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer_compiler ]]
++ echo sanitizer_compiler
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
[0m[91m+ [[ -z sanitizer_compiler ]]
[0m[91m+ install_component sanitizer_compiler
[0m[91m+ local component=sanitizer_compiler
+ load_component sanitizer_compiler v
[0m[91m+ local component=sanitizer_compiler
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m++ required_variables_sanitizer_compiler=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
[0m[91m+++ echo sanitizer
[0m[91m+++ [[ -n x ]]
[0m[91m+++ [[ '' == \m\e\m\o\r\y ]]
[0m[91m+++ [[ '' != \m\e\m\o\r\y ]]
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
[0m[91m++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ install_component sanitizer
[0m[91m+ local component=sanitizer
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
++ artifact_dependency_sanitizer=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z '' ]]
+ continue
+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ gather_dependencies sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_sanitizer
+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sanitizer
[0m[91m+ local action=is_installed
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
[0m[91m+ return 2
[0m[91m+ execution_action install_binary_artifact sanitizer
[0m[91m+ local action=install_binary_artifact
+ local component=sanitizer
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ validate_build_variables
+ [[ -z x ]]
[0m[91m+ [[ -z /tmp ]]
[0m[91m+ validate_component sanitizer p
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=p
+ local component_path=/tmp/klee_src/scripts/build/p-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ echo 'Component sanitizer not found.'
+ return 1
[0mComponent sanitizer not found.
[91m+ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z clang ]]
+ install_component clang
[0m[91m+ local component=clang
+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ install_component sanitizer
[0m[91m+ local component=sanitizer
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
+ return 0
[0m[91m+ gather_dependencies sanitizer artifact setup_variables
+ local component=sanitizer
[0m[91m+ local dependency_type=artifact
+ local action=setup_variables
[0m[91m+ local depending_components
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
+ SANITIZER_SUFFIX=
[0m[91m+ return 0
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sanitizer
[0m[91m+ local action=is_installed
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ execution_action install_binary_artifact sanitizer
[0m[91m+ local action=install_binary_artifact
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ validate_build_variables
[0m[91m+ [[ -z x ]]
+ [[ -z /tmp ]]
[0m[91m+ validate_component sanitizer p
+ local component=sanitizer
[0m[91m+ local c_type=p
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/p-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ echo 'Component sanitizer not found.'
[0mComponent sanitizer not found.
[91m+ return 1
+ return 0
[0m[91m+ validate_required_variables clang required_variables
[0m[91m+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ gather_dependencies clang artifact setup_variables
[0m[91m+ local component=clang
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=v
+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
[0m[91m++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
+ return 0
[0m[91m+ execution_action is_installed clang
[0m[91m+ local action=is_installed
+ local component=clang
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_clang
[0m[91m+ fct=is_installed_clang
[0m[91m++ type -t is_installed_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ is_installed_clang
[0m[91m+ which llvm-config-6.0
[0m/usr/bin/llvm-config-6.0
[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables clang
[0m[91m+ local action=setup_artifact_variables
+ local component=clang
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute setup_artifact_variables_clang
[0m[91m+ fct=setup_artifact_variables_clang
[0m[91m++ type -t setup_artifact_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_artifact_variables_clang
[0m[91m+ local LLVM_VERSION_MAJOR=6
[0m[91m+ local LLVM_VERSION_MINOR=0
+ local version=
[0m[91m+ [[ 6 -le 6 ]]
+ version=-6.0
[0m[91m+ [[ 6 -ge 7 ]]
[0m[91m+ [[ -z x ]]
+ local bin_path=
[0m[91m++++ which clang-6.0
[0m[91m+++ readlink -f /usr/bin/clang-6.0
[0m[91m++ dirname /usr/lib/llvm-6.0/bin/clang
[0m[91m+ bin_path=/usr/lib/llvm-6.0/bin
+ BITCODE_CC=/usr/lib/llvm-6.0/bin/clang
[0m[91m+ BITCODE_CXX=/usr/lib/llvm-6.0/bin/clang++
[0m[91m+ SANITIZER_C_COMPILER=/usr/lib/llvm-6.0/bin/clang
[0m[91m+ SANITIZER_CXX_COMPILER=/usr/lib/llvm-6.0/bin/clang++
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ validate_required_variables clang export_variables
[0m[91m+ local component=clang
[0m[91m+ local type=export_variables
+ local variables
[0m[91m+ check_list required_variables_clang
+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_clang
[0m[91m++ local list_name=export_variables_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t export_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='export_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_CONFIG ]]
++ echo LLVM_CONFIG
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z BITCODE_CC ]]
++ echo BITCODE_CC
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z BITCODE_CXX ]]
++ echo BITCODE_CXX
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_CONFIG BITCODE_CC BITCODE_CXX ]]
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ echo 'Already installed clang'
+ return 0
[0mAlready installed clang
[91m+ validate_required_variables sanitizer_compiler required_variables
+ local component=sanitizer_compiler
[0m[91m+ local type=required_variables
+ local variables
+ check_list required_variables_sanitizer_compiler
[0m[91m+ local list_name=required_variables_sanitizer_compiler
[0m[91m++ type -t required_variables_sanitizer_compiler
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer_compiler[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer_compiler
[0m[91m++ local list_name=required_variables_sanitizer_compiler
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer_compiler
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer_compiler[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
+ try_execute_if_exists required_variables_check_sanitizer_compiler
[0m[91m+ fct=required_variables_check_sanitizer_compiler
[0m[91m++ type -t required_variables_check_sanitizer_compiler
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ gather_dependencies sanitizer_compiler artifact setup_variables
[0m[91m+ local component=sanitizer_compiler
[0m[91m+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ local depending_components
[0m[91m+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
[0m[91m+++ echo sanitizer
[0m[91m+++ [[ -n x ]]
+++ [[ '' == \m\e\m\o\r\y ]]
[0m[91m+++ [[ '' != \m\e\m\o\r\y ]]
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
[0m[91m++ echo clang
++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
[0m[91m+ local component=clang
[0m[91m+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
+ local type=required_variables
+ local variables
+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
[0m[91m+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sanitizer_compiler
+ fct=setup_variables_sanitizer_compiler
[0m[91m++ type -t setup_variables_sanitizer_compiler
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer_compiler
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sanitizer_compiler
[0m[91m+ local action=is_installed
+ local component=sanitizer_compiler
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler.inc ]]
+ [[ 0 -eq 1 ]]
[0m[91m+ return 2
[0m[91m+ execution_action install_binary_artifact sanitizer_compiler
[0m[91m+ local action=install_binary_artifact
+ local component=sanitizer_compiler
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer_compiler.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ validate_build_variables
+ [[ -z x ]]
[0m[91m+ [[ -z /tmp ]]
+ validate_component sanitizer_compiler p
[0m[91m+ local component=sanitizer_compiler
+ local c_type=p
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/p-sanitizer_compiler.inc
+ [[ ! -f /tmp/klee_src/scripts/build/p-sanitizer_compiler.inc ]]
[0m[91m+ echo 'Component sanitizer_compiler not found.'
+ return 1
[0m[91m+ return 0
[0mComponent sanitizer_compiler not found.
[91m+ validate_required_variables sqlite required_variables
+ local component=sqlite
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sqlite
+ local list_name=required_variables_sqlite
[0m[91m++ type -t required_variables_sqlite
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sqlite[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sqlite
[0m[91m++ local list_name=required_variables_sqlite
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sqlite
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sqlite[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
[0m[91m+ try_execute_if_exists required_variables_check_sqlite
[0m[91m+ fct=required_variables_check_sqlite
[0m[91m++ type -t required_variables_check_sqlite
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ gather_dependencies sqlite artifact setup_variables
[0m[91m+ local component=sqlite
[0m[91m+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_sqlite
[0m[91m+ local list_name=artifact_dependency_sqlite
[0m[91m++ type -t artifact_dependency_sqlite
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sqlite[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sqlite
[0m[91m++ local list_name=artifact_dependency_sqlite
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sqlite
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sqlite[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer_compiler ]]
[0m[91m++ echo sanitizer_compiler
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
[0m[91m+ [[ -z sanitizer_compiler ]]
[0m[91m+ gather_dependencies_rec sanitizer_compiler artifact setup_variables
[0m[91m+ local component=sanitizer_compiler
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer_compiler v
[0m[91m+ local component=sanitizer_compiler
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m++ required_variables_sanitizer_compiler=("")
[0m[91m+ validate_required_variables sanitizer_compiler required_variables
+ local component=sanitizer_compiler
+ local type=required_variables
[0m[91m+ local variables
+ check_list required_variables_sanitizer_compiler
[0m[91m+ local list_name=required_variables_sanitizer_compiler
[0m[91m++ type -t required_variables_sanitizer_compiler
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer_compiler[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer_compiler
[0m[91m++ local list_name=required_variables_sanitizer_compiler
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer_compiler
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer_compiler[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
+ try_execute_if_exists required_variables_check_sanitizer_compiler
[0m[91m+ fct=required_variables_check_sanitizer_compiler
[0m[91m++ type -t required_variables_check_sanitizer_compiler
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
[0m[91m+++ echo sanitizer
[0m[91m+++ [[ -n x ]]
[0m[91m+++ [[ '' == \m\e\m\o\r\y ]]
[0m[91m+++ [[ '' != \m\e\m\o\r\y ]]
[0m[91m+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
[0m[91m++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sanitizer_compiler
+ fct=setup_variables_sanitizer_compiler
[0m[91m++ type -t setup_variables_sanitizer_compiler
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer_compiler
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sqlite
+ fct=setup_variables_sqlite
[0m[91m++ type -t setup_variables_sqlite
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sqlite
[0m[91m+ local action=is_installed
+ local component=sqlite
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sqlite-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-sqlite-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_sqlite
[0m[91m+ fct=is_installed_sqlite
[0m[91m++ type -t is_installed_sqlite
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ is_installed_sqlite
[0m[91m+ [[ -f /usr/lib/x86_64-linux-gnu/libsqlite3.so ]]
[0m[91m+ return 1
+ failed=1
[0m[91m+ return 1
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sqlite-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sqlite-linux.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sqlite.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-sqlite.inc
[0m[91m+ local failed=0
[0m[91m+ try_execute is_installed_sqlite
+ fct=is_installed_sqlite
[0m[91m++ type -t is_installed_sqlite
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ is_installed_sqlite
[0m[91m+ setup_build_variables_sqlite
[0m[91m+ SQLITE_SRC_PATH=/tmp/sqlite-amalgamation-3270200
[0m[91m+ SQLITE_INSTALL_PATH=/tmp/sqlite-amalgamation-3270200
+ SQLITE_SUFFIX=
[0m[91m+ [[ -f /tmp/sqlite-amalgamation-3270200/libsqlite3.so ]]
[0m[91m+ return 1
[0m[91m+ failed=1
+ return 1
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ 1 -eq 1 ]]
+ return 1
[0m[91m+ execution_action install_binary_artifact sqlite
[0m[91m+ local action=install_binary_artifact
+ local component=sqlite
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sqlite-linux-ubuntu-16.04.inc ]]
+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-sqlite-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute install_binary_artifact_sqlite
[0m[91m+ fct=install_binary_artifact_sqlite
[0m[91m++ type -t install_binary_artifact_sqlite
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ install_binary_artifact_sqlite
[0m[91m+ [[ x != \x ]]
+ apt update -y
[0m[91m
WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

[0mHit:1 http://security.ubuntu.com/ubuntu xenial-security InRelease
Hit:2 http://archive.ubuntu.com/ubuntu xenial InRelease
Hit:3 http://archive.ubuntu.com/ubuntu xenial-updates InRelease
Hit:4 http://archive.ubuntu.com/ubuntu xenial-backports InRelease
Reading package lists...
Building dependency tree...
Reading state information...
32 packages can be upgraded. Run 'apt list --upgradable' to see them.
[91m+ dependencies=(libsqlite3-dev)
[0m[91m+ apt -y --no-install-recommends install libsqlite3-dev
[0m[91m
WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

[0mReading package lists...
Building dependency tree...
Reading state information...
Suggested packages:
  sqlite3-doc
The following NEW packages will be installed:
  libsqlite3-dev
0 upgraded, 1 newly installed, 0 to remove and 32 not upgraded.
Need to get 509 kB of archives.
After this operation, 1708 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libsqlite3-dev amd64 3.11.0-1ubuntu1.3 [509 kB]
[91mdebconf: delaying package configuration, since apt-utils is not installed
[0mFetched 509 kB in 1s (399 kB/s)
Selecting previously unselected package libsqlite3-dev:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 29372 files and directories currently installed.)
Preparing to unpack .../libsqlite3-dev_3.11.0-1ubuntu1.3_amd64.deb ...
Unpacking libsqlite3-dev:amd64 (3.11.0-1ubuntu1.3) ...
Setting up libsqlite3-dev:amd64 (3.11.0-1ubuntu1.3) ...
[91m+ return 0
+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables sqlite
[0m[91m+ local action=setup_artifact_variables
[0m[91m+ local component=sqlite
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sqlite-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
+ source /tmp/klee_src/scripts/build/p-sqlite-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute setup_artifact_variables_sqlite
[0m[91m+ fct=setup_artifact_variables_sqlite
[0m[91m++ type -t setup_artifact_variables_sqlite
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_artifact_variables_sqlite
[0m[91m+ setup_build_variables_sqlite
[0m[91m+ SQLITE_SRC_PATH=/tmp/sqlite-amalgamation-3270200
+ SQLITE_INSTALL_PATH=/tmp/sqlite-amalgamation-3270200
[0m[91m+ SQLITE_SUFFIX=
+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ validate_required_variables sqlite export_variables
[0m[91m+ local component=sqlite
[0m[91m+ local type=export_variables
+ local variables
+ check_list required_variables_sqlite
[0m[91m+ local list_name=required_variables_sqlite
[0m[91m++ type -t required_variables_sqlite
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sqlite[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_sqlite
[0m[91m++ local list_name=export_variables_sqlite
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t export_variables_sqlite
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n '' ]]
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
+ try_execute_if_exists required_variables_check_sqlite
[0m[91m+ fct=required_variables_check_sqlite
[0m[91m++ type -t required_variables_check_sqlite
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ echo 'Package installed sqlite'
+ return 0
[0mPackage installed sqlite
[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z uclibc ]]
[0m[91m+ install_component uclibc
[0m[91m+ local component=uclibc
+ load_component uclibc v
[0m[91m+ local component=uclibc
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-uclibc.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-uclibc.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-uclibc.inc
[0m[91m++ required_variables_uclibc=("UCLIBC_VERSION" "LLVM_VERSION")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_uclibc
[0m[91m+ local list_name=artifact_dependency_uclibc
[0m[91m++ type -t artifact_dependency_uclibc
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_uclibc
[0m[91m++ local list_name=artifact_dependency_uclibc
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_uclibc
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
++ mapfile -t result
[0m[91m+++ artifact_dependency_uclibc
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z clang ]]
[0m[91m+ install_component clang
[0m[91m+ local component=clang
+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_clang
++ local list_name=artifact_dependency_clang
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
[0m[91m+ [[ -z sanitizer ]]
+ install_component sanitizer
[0m[91m+ local component=sanitizer
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sanitizer
++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
[0m[91m+ [[ -z '' ]]
+ continue
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
[0m[91m+ local variables
+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ gather_dependencies sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sanitizer
[0m[91m+ local action=is_installed
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
[0m[91m+ return 2
[0m[91m+ execution_action install_binary_artifact sanitizer
[0m[91m+ local action=install_binary_artifact
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ validate_build_variables
[0m[91m+ [[ -z x ]]
+ [[ -z /tmp ]]
[0m[91m+ validate_component sanitizer p
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=p
+ local component_path=/tmp/klee_src/scripts/build/p-sanitizer.inc
[0mComponent sanitizer not found.
[91m+ [[ ! -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
+ echo 'Component sanitizer not found.'
+ return 1
+ return 0
[0m[91m+ validate_required_variables clang required_variables
+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ gather_dependencies clang artifact setup_variables
[0m[91m+ local component=clang
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ local depending_components
[0m[91m+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
+ return 0
[0m[91m+ execution_action is_installed clang
[0m[91m+ local action=is_installed
+ local component=clang
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
+ source /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_clang
[0m[91m+ fct=is_installed_clang
[0m[91m++ type -t is_installed_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ is_installed_clang
[0m[91m+ which llvm-config-6.0
[0m/usr/bin/llvm-config-6.0
[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables clang
[0m[91m+ local action=setup_artifact_variables
+ local component=clang
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute setup_artifact_variables_clang
[0m[91m+ fct=setup_artifact_variables_clang
[0m[91m++ type -t setup_artifact_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_artifact_variables_clang
[0m[91m+ local LLVM_VERSION_MAJOR=6
+ local LLVM_VERSION_MINOR=0
[0m[91m+ local version=
[0m[91m+ [[ 6 -le 6 ]]
[0m[91m+ version=-6.0
+ [[ 6 -ge 7 ]]
[0m[91m+ [[ -z x ]]
+ local bin_path=
[0m[91m++++ which clang-6.0
[0m[91m+++ readlink -f /usr/bin/clang-6.0
[0m[91m++ dirname /usr/lib/llvm-6.0/bin/clang
[0m[91m+ bin_path=/usr/lib/llvm-6.0/bin
+ BITCODE_CC=/usr/lib/llvm-6.0/bin/clang
+ BITCODE_CXX=/usr/lib/llvm-6.0/bin/clang++
+ SANITIZER_C_COMPILER=/usr/lib/llvm-6.0/bin/clang
+ SANITIZER_CXX_COMPILER=/usr/lib/llvm-6.0/bin/clang++
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ validate_required_variables clang export_variables
+ local component=clang
[0m[91m+ local type=export_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_clang
[0m[91m++ local list_name=export_variables_clang
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t export_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='export_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_CONFIG ]]
[0m[91m++ echo LLVM_CONFIG
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z BITCODE_CC ]]
++ echo BITCODE_CC
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z BITCODE_CXX ]]
++ echo BITCODE_CXX
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_CONFIG BITCODE_CC BITCODE_CXX ]]
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ echo 'Already installed clang'
+ return 0
[0mAlready installed clang
[91m+ validate_required_variables uclibc required_variables
[0m[91m+ local component=uclibc
[0m[91m+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_uclibc
[0m[91m+ local list_name=required_variables_uclibc
[0m[91m++ type -t required_variables_uclibc
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_uclibc[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_uclibc
[0m[91m++ local list_name=required_variables_uclibc
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_uclibc
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_uclibc[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z UCLIBC_VERSION ]]
++ echo UCLIBC_VERSION
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n UCLIBC_VERSION LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_uclibc
[0m[91m+ fct=required_variables_check_uclibc
[0m[91m++ type -t required_variables_check_uclibc
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ gather_dependencies uclibc artifact setup_variables
+ local component=uclibc
[0m[91m+ local dependency_type=artifact
+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_uclibc
[0m[91m+ local list_name=artifact_dependency_uclibc
[0m[91m++ type -t artifact_dependency_uclibc
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_uclibc
[0m[91m++ local list_name=artifact_dependency_uclibc
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_uclibc
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_uclibc
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_uclibc
+ fct=setup_variables_uclibc
[0m[91m++ type -t setup_variables_uclibc
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ execution_action is_installed uclibc
[0m[91m+ local action=is_installed
+ local component=uclibc
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-uclibc-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-uclibc-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_uclibc
[0m[91m+ fct=is_installed_uclibc
[0m[91m++ type -t is_installed_uclibc
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-uclibc-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-uclibc-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-uclibc.inc ]]
[0m[91m+ found=1
+ source /tmp/klee_src/scripts/build/p-uclibc.inc
[0m[91m+ local failed=0
+ try_execute is_installed_uclibc
[0m[91m+ fct=is_installed_uclibc
[0m[91m++ type -t is_installed_uclibc
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ is_installed_uclibc
[0m[91m+ setup_build_variables_uclibc
[0m[91m+ UCLIBC_PATH=/tmp/klee-uclibc-60
+ uclibc_url=https://github.com/klee/klee-uclibc.git
[0m[91m+ [[ -f /tmp/klee-uclibc-60/.is_installed ]]
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables uclibc
[0m[91m+ local action=setup_artifact_variables
[0m[91m+ local component=uclibc
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-uclibc-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-uclibc-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute setup_artifact_variables_uclibc
[0m[91m+ fct=setup_artifact_variables_uclibc
[0m[91m++ type -t setup_artifact_variables_uclibc
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_artifact_variables_uclibc
[0m[91m+ setup_build_variables_uclibc
+ UCLIBC_PATH=/tmp/klee-uclibc-60
[0m[91m+ uclibc_url=https://github.com/klee/klee-uclibc.git
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ validate_required_variables uclibc export_variables
[0m[91m+ local component=uclibc
[0m[91m+ local type=export_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_uclibc
[0m[91m+ local list_name=required_variables_uclibc
[0m[91m++ type -t required_variables_uclibc
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_uclibc[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_uclibc
[0m[91m++ local list_name=export_variables_uclibc
++ result=("")
++ local result
[0m[91m+++ type -t export_variables_uclibc
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n '' ]]
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
[0m[91m+ try_execute_if_exists required_variables_check_uclibc
[0m[91m+ fct=required_variables_check_uclibc
[0m[91m++ type -t required_variables_check_uclibc
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ echo 'Already installed uclibc'
+ return 0
[0mAlready installed uclibc
[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z tcmalloc ]]
+ install_component tcmalloc
+ local component=tcmalloc
[0m[91m+ load_component tcmalloc v
[0m[91m+ local component=tcmalloc
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-tcmalloc.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-tcmalloc.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-tcmalloc.inc
[0m[91m++ artifact_dependency_tcmalloc=("")
[0m[91m++ required_variables_tcmalloc=("TCMALLOC_VERSION")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_tcmalloc
[0m[91m+ local list_name=artifact_dependency_tcmalloc
[0m[91m++ type -t artifact_dependency_tcmalloc
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_tcmalloc[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_tcmalloc
[0m[91m++ local list_name=artifact_dependency_tcmalloc
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_tcmalloc
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_tcmalloc[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ validate_required_variables tcmalloc required_variables
[0m[91m+ local component=tcmalloc
+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_tcmalloc
[0m[91m+ local list_name=required_variables_tcmalloc
[0m[91m++ type -t required_variables_tcmalloc
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_tcmalloc[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_tcmalloc
[0m[91m++ local list_name=required_variables_tcmalloc
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_tcmalloc
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_tcmalloc[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z TCMALLOC_VERSION ]]
++ echo TCMALLOC_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n TCMALLOC_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_tcmalloc
[0m[91m+ fct=required_variables_check_tcmalloc
[0m[91m++ type -t required_variables_check_tcmalloc
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ gather_dependencies tcmalloc artifact setup_variables
+ local component=tcmalloc
[0m[91m+ local dependency_type=artifact
+ local action=setup_variables
+ local depending_components
+ check_list artifact_dependency_tcmalloc
[0m[91m+ local list_name=artifact_dependency_tcmalloc
[0m[91m++ type -t artifact_dependency_tcmalloc
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_tcmalloc[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_tcmalloc
[0m[91m++ local list_name=artifact_dependency_tcmalloc
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_tcmalloc
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_tcmalloc[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_tcmalloc
[0m[91m+ fct=setup_variables_tcmalloc
[0m[91m++ type -t setup_variables_tcmalloc
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ execution_action is_installed tcmalloc
[0m[91m+ local action=is_installed
+ local component=tcmalloc
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-tcmalloc-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-tcmalloc-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_tcmalloc
[0m[91m+ fct=is_installed_tcmalloc
[0m[91m++ type -t is_installed_tcmalloc
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-tcmalloc-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-tcmalloc-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-tcmalloc.inc ]]
[0m[91m+ found=1
+ source /tmp/klee_src/scripts/build/p-tcmalloc.inc
[0m[91m+ local failed=0
+ try_execute is_installed_tcmalloc
[0m[91m+ fct=is_installed_tcmalloc
[0m[91m++ type -t is_installed_tcmalloc
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ is_installed_tcmalloc
[0m[91m+ setup_build_variables_tcmalloc
[0m[91m+ TCMALLOC_SRC_PATH=/tmp/gperftools-2.7
[0m[91m+ TCMALLOC_INSTALL_PATH=/tmp/tcmalloc-install-2.7
[0m[91m+ return 0
[0m[91m+ [[ -f /tmp/tcmalloc-install-2.7/.is_installed ]]
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables tcmalloc
[0m[91m+ local action=setup_artifact_variables
+ local component=tcmalloc
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-tcmalloc-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-tcmalloc-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute setup_artifact_variables_tcmalloc
[0m[91m+ fct=setup_artifact_variables_tcmalloc
[0m[91m++ type -t setup_artifact_variables_tcmalloc
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_artifact_variables_tcmalloc
[0m[91m+ setup_build_variables_tcmalloc
[0m[91m+ TCMALLOC_SRC_PATH=/tmp/gperftools-2.7
+ TCMALLOC_INSTALL_PATH=/tmp/tcmalloc-install-2.7
[0m[91m+ return 0
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ validate_required_variables tcmalloc export_variables
+ local component=tcmalloc
[0m[91m+ local type=export_variables
+ local variables
[0m[91m+ check_list required_variables_tcmalloc
[0m[91m+ local list_name=required_variables_tcmalloc
[0m[91m++ type -t required_variables_tcmalloc
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_tcmalloc[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_tcmalloc
[0m[91m++ local list_name=export_variables_tcmalloc
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t export_variables_tcmalloc
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n '' ]]
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
[0m[91m+ try_execute_if_exists required_variables_check_tcmalloc
[0m[91m+ fct=required_variables_check_tcmalloc
[0m[91m++ type -t required_variables_check_tcmalloc
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ echo 'Already installed tcmalloc'
+ return 0
[0mAlready installed tcmalloc
[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z libcxx ]]
+ install_component libcxx
[0m[91m+ local component=libcxx
[0m[91m+ load_component libcxx v
[0m[91m+ local component=libcxx
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-libcxx.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-libcxx.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-libcxx.inc
[0m[91m++ required_variables_libcxx=("LLVM_VERSION")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_libcxx
[0m[91m+ local list_name=artifact_dependency_libcxx
[0m[91m++ type -t artifact_dependency_libcxx
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_libcxx
[0m[91m++ local list_name=artifact_dependency_libcxx
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_libcxx
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_libcxx
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z clang ]]
[0m[91m+ install_component clang
[0m[91m+ local component=clang
+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ local depending_artifact_components
[0m[91m+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ install_component sanitizer
[0m[91m+ local component=sanitizer
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ local depending_artifact_components
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_artifact_components
[0m[91m++ get_list artifact_dependency_sanitizer
++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
[0m[91m++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_artifact_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
+ [[ -z '' ]]
+ return 0
+ return 0
[0m[91m+ gather_dependencies sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local dependency_type=artifact
+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ execution_action is_installed sanitizer
[0m[91m+ local action=is_installed
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ execution_action install_binary_artifact sanitizer
[0m[91m+ local action=install_binary_artifact
+ local component=sanitizer
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu-16.04.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer-linux.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ [[ 0 -eq 1 ]]
+ return 2
[0m[91m+ validate_build_variables
+ [[ -z x ]]
[0m[91m+ [[ -z /tmp ]]
[0m[91m+ validate_component sanitizer p
[0m[91m+ local component=sanitizer
+ local c_type=p
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/p-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/p-sanitizer.inc ]]
[0m[91m+ echo 'Component sanitizer not found.'
[0m[91m+ return 1
+ return 0
[0mComponent sanitizer not found.
[91m+ validate_required_variables clang required_variables
[0m[91m+ local component=clang
+ local type=required_variables
+ local variables
+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ gather_dependencies clang artifact setup_variables
+ local component=clang
[0m[91m+ local dependency_type=artifact
+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ execution_action is_installed clang
[0m[91m+ local action=is_installed
+ local component=clang
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_clang
[0m[91m+ fct=is_installed_clang
[0m[91m++ type -t is_installed_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ is_installed_clang
[0m[91m+ which llvm-config-6.0
[0m/usr/bin/llvm-config-6.0
[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables clang
[0m[91m+ local action=setup_artifact_variables
[0m[91m+ local component=clang
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc ]]
+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-clang-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute setup_artifact_variables_clang
[0m[91m+ fct=setup_artifact_variables_clang
[0m[91m++ type -t setup_artifact_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_artifact_variables_clang
[0m[91m+ local LLVM_VERSION_MAJOR=6
+ local LLVM_VERSION_MINOR=0
[0m[91m+ local version=
[0m[91m+ [[ 6 -le 6 ]]
[0m[91m+ version=-6.0
+ [[ 6 -ge 7 ]]
[0m[91m+ [[ -z x ]]
+ local bin_path=
[0m[91m++++ which clang-6.0
[0m[91m+++ readlink -f /usr/bin/clang-6.0
[0m[91m++ dirname /usr/lib/llvm-6.0/bin/clang
[0m[91m+ bin_path=/usr/lib/llvm-6.0/bin
+ BITCODE_CC=/usr/lib/llvm-6.0/bin/clang
[0m[91m+ BITCODE_CXX=/usr/lib/llvm-6.0/bin/clang++
[0m[91m+ SANITIZER_C_COMPILER=/usr/lib/llvm-6.0/bin/clang
[0m[91m+ SANITIZER_CXX_COMPILER=/usr/lib/llvm-6.0/bin/clang++
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ validate_required_variables clang export_variables
[0m[91m+ local component=clang
[0m[91m+ local type=export_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_clang
++ local list_name=export_variables_clang
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t export_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='export_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_CONFIG ]]
++ echo LLVM_CONFIG
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z BITCODE_CC ]]
++ echo BITCODE_CC
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z BITCODE_CXX ]]
[0m[91m++ echo BITCODE_CXX
++ return 0
[0m[91m+ [[ -n LLVM_CONFIG BITCODE_CC BITCODE_CXX ]]
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ echo 'Already installed clang'
+ return 0
[0mAlready installed clang
[91m+ validate_required_variables libcxx required_variables
+ local component=libcxx
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_libcxx
[0m[91m+ local list_name=required_variables_libcxx
[0m[91m++ type -t required_variables_libcxx
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_libcxx[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_libcxx
[0m[91m++ local list_name=required_variables_libcxx
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_libcxx
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_libcxx[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ try_execute_if_exists required_variables_check_libcxx
[0m[91m+ fct=required_variables_check_libcxx
[0m[91m++ type -t required_variables_check_libcxx
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_libcxx
[0m[91m+ return 0
[0m[91m+ return 0
[0m[91m+ gather_dependencies libcxx artifact setup_variables
[0m[91m+ local component=libcxx
[0m[91m+ local dependency_type=artifact
+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_libcxx
[0m[91m+ local list_name=artifact_dependency_libcxx
[0m[91m++ type -t artifact_dependency_libcxx
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_libcxx
[0m[91m++ local list_name=artifact_dependency_libcxx
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_libcxx
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_libcxx
[0m[91m+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
[0m[91m++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
[0m[91m+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_libcxx
+ fct=setup_variables_libcxx
[0m[91m++ type -t setup_variables_libcxx
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ execution_action is_installed libcxx
[0m[91m+ local action=is_installed
+ local component=libcxx
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-libcxx-linux-ubuntu-16.04.inc ]]
+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-libcxx-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_libcxx
[0m[91m+ fct=is_installed_libcxx
[0m[91m++ type -t is_installed_libcxx
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-libcxx-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-libcxx-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-libcxx.inc ]]
[0m[91m+ found=1
+ source /tmp/klee_src/scripts/build/p-libcxx.inc
[0m[91m+ local failed=0
+ try_execute is_installed_libcxx
[0m[91m+ fct=is_installed_libcxx
[0m[91m++ type -t is_installed_libcxx
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ is_installed_libcxx
[0m[91m+ setup_build_variables_libcxx
+ LIBCXX_SRC=/tmp/libc++-60
[0m[91m+ LIBCXX_BUILD=/tmp/libc++-build-60
+ LIBCXX_INSTALL=/tmp/libc++-install-60
[0m[91m+ [[ -f /tmp/libc++-install-60/.is_installed ]]
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ execution_action setup_artifact_variables libcxx
[0m[91m+ local action=setup_artifact_variables
[0m[91m+ local component=libcxx
+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-libcxx-linux-ubuntu-16.04.inc ]]
+ found=1
+ source /tmp/klee_src/scripts/build/p-libcxx-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute setup_artifact_variables_libcxx
[0m[91m+ fct=setup_artifact_variables_libcxx
[0m[91m++ type -t setup_artifact_variables_libcxx
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_artifact_variables_libcxx
[0m[91m+ setup_build_variables_libcxx
[0m[91m+ LIBCXX_SRC=/tmp/libc++-60
+ LIBCXX_BUILD=/tmp/libc++-build-60
+ LIBCXX_INSTALL=/tmp/libc++-install-60
[0m[91m+ return 0
[0m[91m+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ validate_required_variables libcxx export_variables
[0m[91m+ local component=libcxx
[0m[91m+ local type=export_variables
+ local variables
[0m[91m+ check_list required_variables_libcxx
[0m[91m+ local list_name=required_variables_libcxx
[0m[91m++ type -t required_variables_libcxx
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_libcxx[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list export_variables_libcxx
[0m[91m++ local list_name=export_variables_libcxx
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t export_variables_libcxx
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n '' ]]
[0m[91m++ for i in '"${result[@]}"'
[0m[91m++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
+ try_execute_if_exists required_variables_check_libcxx
[0m[91m+ fct=required_variables_check_libcxx
[0m[91m++ type -t required_variables_check_libcxx
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_libcxx
[0m[91m+ return 0
[0m[91m+ return 0
[0m[91m+ echo 'Already installed libcxx'
[0m[91m+ return 0
[0mAlready installed libcxx
[91m+ validate_required_variables klee required_variables
+ local component=klee
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_klee
[0m[91m+ local list_name=required_variables_klee
[0m[91m++ type -t required_variables_klee
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_klee[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_klee
[0m[91m++ local list_name=required_variables_klee
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_klee
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_klee[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z COVERAGE ]]
++ echo COVERAGE
++ for i in '"${result[@]}"'
[0m[91m++ [[ -z KLEE_RUNTIME_BUILD ]]
++ echo KLEE_RUNTIME_BUILD
++ for i in '"${result[@]}"'
++ [[ -z USE_TCMALLOC ]]
[0m[91m++ echo USE_TCMALLOC
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z USE_LIBCXX ]]
[0m[91m++ echo USE_LIBCXX
[0m[91m++ return 0
[0m[91m+ [[ -n COVERAGE KLEE_RUNTIME_BUILD USE_TCMALLOC USE_LIBCXX ]]
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z x ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_klee
[0m[91m+ fct=required_variables_check_klee
[0m[91m++ type -t required_variables_check_klee
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_klee
[0m[91m+ check_bool COVERAGE
[0m[91m+ local v=COVERAGE
+ local result
[0m[91m++ to_bool 0
[0m[91m++ [[ 0 == \1 ]]
++ [[ 0 == \O\N ]]
++ [[ 0 == \Y\E\S ]]
++ [[ 0 == \T\R\U\E ]]
++ [[ 0 == \T ]]
[0m[91m++ [[ 0 == \0 ]]
[0m[91m++ echo 0
[0m[91m++ return 0
[0m[91m+ result=0
[0m[91m+ check_bool USE_TCMALLOC
[0m[91m+ local v=USE_TCMALLOC
+ local result
[0m[91m++ to_bool 1
[0m[91m++ [[ 1 == \1 ]]
++ echo 1
[0m[91m++ return 0
[0m[91m+ result=1
[0m[91m+ check_bool USE_LIBCXX
[0m[91m+ local v=USE_LIBCXX
+ local result
[0m[91m++ to_bool 1
[0m[91m++ [[ 1 == \1 ]]
++ echo 1
[0m[91m++ return 0
[0m[91m+ result=1
[0m[91m+ return 0
[0m[91m+ gather_dependencies klee artifact setup_variables
[0m[91m+ local component=klee
+ local dependency_type=artifact
[0m[91m+ local action=setup_variables
+ local depending_components
[0m[91m+ check_list artifact_dependency_klee
[0m[91m+ local list_name=artifact_dependency_klee
[0m[91m++ type -t artifact_dependency_klee
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t depending_components
[0m[91m++ get_list artifact_dependency_klee
[0m[91m++ local list_name=artifact_dependency_klee
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_klee
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
++ mapfile -t result
[0m[91m+++ artifact_dependency_klee
[0m[91m+++ dependencies=("llvm" "solvers" "gtest" "sqlite")
[0m[91m+++ local dependencies
[0m[91m+++ [[ linux != \o\s\x ]]
+++ dependencies+=(uclibc)
[0m[91m+++ [[ 1 -eq 1 ]]
+++ dependencies+=("tcmalloc")
[0m[91m+++ [[ 1 -eq 1 ]]
+++ dependencies+=("libcxx")
[0m[91m+++ for d in '"${dependencies[@]}"'
[0m[91m+++ echo llvm
+++ for d in '"${dependencies[@]}"'
+++ echo solvers
[0m[91m+++ for d in '"${dependencies[@]}"'
+++ echo gtest
[0m[91m+++ for d in '"${dependencies[@]}"'
+++ echo sqlite
[0m[91m+++ for d in '"${dependencies[@]}"'
+++ echo uclibc
+++ for d in '"${dependencies[@]}"'
+++ echo tcmalloc
[0m[91m+++ for d in '"${dependencies[@]}"'
+++ echo libcxx
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z llvm ]]
++ echo llvm
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z solvers ]]
++ echo solvers
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z gtest ]]
[0m[91m++ echo gtest
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sqlite ]]
[0m[91m++ echo sqlite
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z uclibc ]]
++ echo uclibc
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z tcmalloc ]]
++ echo tcmalloc
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z libcxx ]]
++ echo libcxx
[0m[91m++ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z llvm ]]
[0m[91m+ gather_dependencies_rec llvm artifact setup_variables
[0m[91m+ local component=llvm
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component llvm v
[0m[91m+ local component=llvm
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-llvm.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-llvm.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-llvm.inc
[0m[91m++ required_variables_llvm=("LLVM_VERSION" "ENABLE_OPTIMIZED" "ENABLE_DEBUG" "DISABLE_ASSERTIONS" "REQUIRES_RTTI")
[0m[91m++ export_variables_llvm=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m++ artifact_dependency_llvm=("sanitizer")
[0m[91m+ validate_required_variables llvm required_variables
+ local component=llvm
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_llvm
[0m[91m+ local list_name=required_variables_llvm
[0m[91m++ type -t required_variables_llvm
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_llvm[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_llvm
[0m[91m++ local list_name=required_variables_llvm
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_llvm
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_llvm[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z ENABLE_OPTIMIZED ]]
[0m[91m++ echo ENABLE_OPTIMIZED
++ for i in '"${result[@]}"'
++ [[ -z ENABLE_DEBUG ]]
[0m[91m++ echo ENABLE_DEBUG
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z DISABLE_ASSERTIONS ]]
[0m[91m++ echo DISABLE_ASSERTIONS
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z REQUIRES_RTTI ]]
[0m[91m++ echo REQUIRES_RTTI
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ENABLE_OPTIMIZED ENABLE_DEBUG DISABLE_ASSERTIONS REQUIRES_RTTI ]]
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_llvm
[0m[91m+ fct=required_variables_check_llvm
[0m[91m++ type -t required_variables_check_llvm
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_llvm
[0m[91m+ check_bool ENABLE_DEBUG
[0m[91m+ local v=ENABLE_DEBUG
+ local result
[0m[91m++ to_bool 1
[0m[91m++ [[ 1 == \1 ]]
++ echo 1
[0m[91m++ return 0
[0m[91m+ result=1
[0m[91m+ check_bool ENABLE_OPTIMIZED
+ local v=ENABLE_OPTIMIZED
[0m[91m+ local result
[0m[91m++ to_bool 1
[0m[91m++ [[ 1 == \1 ]]
[0m[91m++ echo 1
[0m[91m++ return 0
[0m[91m+ result=1
[0m[91m+ check_bool DISABLE_ASSERTIONS
+ local v=DISABLE_ASSERTIONS
[0m[91m+ local result
[0m[91m++ to_bool 0
[0m[91m++ [[ 0 == \1 ]]
++ [[ 0 == \O\N ]]
++ [[ 0 == \Y\E\S ]]
++ [[ 0 == \T\R\U\E ]]
++ [[ 0 == \T ]]
++ [[ 0 == \0 ]]
[0m[91m++ echo 0
[0m[91m++ return 0
[0m[91m+ result=0
[0m[91m+ check_bool REQUIRES_RTTI
+ local v=REQUIRES_RTTI
[0m[91m+ local result
[0m[91m++ to_bool 0
[0m[91m++ [[ 0 == \1 ]]
++ [[ 0 == \O\N ]]
++ [[ 0 == \Y\E\S ]]
[0m[91m++ [[ 0 == \T\R\U\E ]]
[0m[91m++ [[ 0 == \T ]]
[0m[91m++ [[ 0 == \0 ]]
++ echo 0
[0m[91m++ return 0
[0m[91m+ result=0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_llvm
[0m[91m+ local list_name=artifact_dependency_llvm
[0m[91m++ type -t artifact_dependency_llvm
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_llvm[@]'
[0m[91m+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_llvm
[0m[91m++ local list_name=artifact_dependency_llvm
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_llvm
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_llvm[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_llvm
+ fct=setup_variables_llvm
[0m[91m++ type -t setup_variables_llvm
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_llvm
[0m[91m+ LLVM_VERSION_SHORT=60
+ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z solvers ]]
[0m[91m+ gather_dependencies_rec solvers artifact setup_variables
[0m[91m+ local component=solvers
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component solvers v
[0m[91m+ local component=solvers
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-solvers.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-solvers.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-solvers.inc
[0m[91m++ required_variables_solvers=("SOLVERS")
[0m[91m+ validate_required_variables solvers required_variables
+ local component=solvers
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_solvers
[0m[91m+ local list_name=required_variables_solvers
[0m[91m++ type -t required_variables_solvers
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_solvers[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_solvers
[0m[91m++ local list_name=required_variables_solvers
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_solvers
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_solvers[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SOLVERS ]]
[0m[91m++ echo SOLVERS
[0m[91m++ return 0
[0m[91m+ [[ -n SOLVERS ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_solvers
[0m[91m+ fct=required_variables_check_solvers
[0m[91m++ type -t required_variables_check_solvers
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_solvers
[0m[91m+ local solvers
[0m[91m+ IFS=:
+ read -r -a solvers
[0m[91m+ [[ -z STP Z3 ]]
+ for solver in '"${solvers[@]}"'
[0m[91m+ [[ -z STP ]]
[0m[91m++ to_lower STP
[0m[91m++ echo STP
[0m[91m++ tr '[:upper:]' '[:lower:]'
[0m[91m+ solver=stp
+ [[ stp == \z\3 ]]
+ [[ stp == \s\t\p ]]
+ continue
+ for solver in '"${solvers[@]}"'
[0m[91m+ [[ -z Z3 ]]
[0m[91m++ to_lower Z3
[0m[91m++ echo Z3
[0m[91m++ tr '[:upper:]' '[:lower:]'
[0m[91m+ solver=z3
+ [[ z3 == \z\3 ]]
+ continue
[0m[91m+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_solvers
[0m[91m+ local list_name=artifact_dependency_solvers
[0m[91m++ type -t artifact_dependency_solvers
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_solvers
[0m[91m++ local list_name=artifact_dependency_solvers
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_solvers
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_solvers
[0m[91m+++ setup_variables_solvers
[0m[91m+++ local solvers
[0m[91m+++ IFS=:
+++ read -r -a solvers
[0m[91m+++ SELECTED_SOLVERS=()
[0m[91m+++ for solver in '"${solvers[@]}"'
+++ [[ -z STP ]]
[0m[91m++++ to_lower STP
[0m[91m++++ echo STP
[0m[91m++++ tr '[:upper:]' '[:lower:]'
[0m[91m+++ solver=stp
+++ [[ stp == \z\3 ]]
+++ [[ stp == \s\t\p ]]
+++ SELECTED_SOLVERS+=("stp")
+++ continue
+++ for solver in '"${solvers[@]}"'
+++ [[ -z Z3 ]]
[0m[91m++++ to_lower Z3
[0m[91m++++ echo Z3
[0m[91m++++ tr '[:upper:]' '[:lower:]'
[0m[91m+++ solver=z3
+++ [[ z3 == \z\3 ]]
+++ SELECTED_SOLVERS+=("z3")
[0m[91m+++ continue
[0m[91m+++ SELECTED_SOLVERS=($( for e in "${SELECTED_SOLVERS[@]}"; do echo "$e"; done | sort|uniq))
[0m[91m++++ for e in '"${SELECTED_SOLVERS[@]}"'
[0m[91m++++ echo stp
[0m[91m++++ for e in '"${SELECTED_SOLVERS[@]}"'
++++ echo z3
[0m[91m++++ sort
[0m[91m++++ uniq
[0m[91m++++ IFS=_
[0m[91m++++ echo stp_z3
[0m[91m+++ SOLVER_SUFFIX=stp_z3
[0m[91m+++ for solver in '"${SELECTED_SOLVERS[@]}"'
+++ echo stp
[0m[91m+++ for solver in '"${SELECTED_SOLVERS[@]}"'
+++ echo z3
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z stp ]]
[0m[91m++ echo stp
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z z3 ]]
[0m[91m++ echo z3
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z stp ]]
[0m[91m+ gather_dependencies_rec stp artifact setup_variables
[0m[91m+ local component=stp
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component stp v
[0m[91m+ local component=stp
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-stp.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-stp.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-stp.inc
[0m[91m++ required_variables_stp=("STP_VERSION" "MINISAT_VERSION")
[0m[91m++ artifact_dependency_stp=("sanitizer_compiler")
[0m[91m+ validate_required_variables stp required_variables
[0m[91m+ local component=stp
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_stp
[0m[91m+ local list_name=required_variables_stp
[0m[91m++ type -t required_variables_stp
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_stp[@]'
[0m[91m+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_stp
[0m[91m++ local list_name=required_variables_stp
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_stp
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_stp[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z STP_VERSION ]]
[0m[91m++ echo STP_VERSION
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z MINISAT_VERSION ]]
[0m[91m++ echo MINISAT_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n STP_VERSION MINISAT_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_stp
[0m[91m+ fct=required_variables_check_stp
[0m[91m++ type -t required_variables_check_stp
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_stp
[0m[91m+ local list_name=artifact_dependency_stp
[0m[91m++ type -t artifact_dependency_stp
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_stp[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_stp
[0m[91m++ local list_name=artifact_dependency_stp
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_stp
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_stp[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer_compiler ]]
++ echo sanitizer_compiler
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer_compiler ]]
[0m[91m+ gather_dependencies_rec sanitizer_compiler artifact setup_variables
[0m[91m+ local component=sanitizer_compiler
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer_compiler v
[0m[91m+ local component=sanitizer_compiler
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m++ required_variables_sanitizer_compiler=("")
[0m[91m+ validate_required_variables sanitizer_compiler required_variables
+ local component=sanitizer_compiler
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer_compiler
[0m[91m+ local list_name=required_variables_sanitizer_compiler
[0m[91m++ type -t required_variables_sanitizer_compiler
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer_compiler[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer_compiler
[0m[91m++ local list_name=required_variables_sanitizer_compiler
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer_compiler
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer_compiler[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer_compiler
[0m[91m+ fct=required_variables_check_sanitizer_compiler
[0m[91m++ type -t required_variables_check_sanitizer_compiler
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
[0m[91m+++ echo sanitizer
[0m[91m+++ [[ -n x ]]
+++ [[ '' == \m\e\m\o\r\y ]]
+++ [[ '' != \m\e\m\o\r\y ]]
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z clang ]]
+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
[0m[91m+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
[0m[91m+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sanitizer_compiler
+ fct=setup_variables_sanitizer_compiler
[0m[91m++ type -t setup_variables_sanitizer_compiler
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer_compiler
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_stp
+ fct=setup_variables_stp
[0m[91m++ type -t setup_variables_stp
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z z3 ]]
[0m[91m+ gather_dependencies_rec z3 artifact setup_variables
[0m[91m+ local component=z3
[0m[91m+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component z3 v
+ local component=z3
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-z3.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-z3.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-z3.inc
[0m[91m++ required_variables_z3=("Z3_VERSION")
++ artifact_dependency_z3=("sanitizer_compiler")
[0m[91m+ validate_required_variables z3 required_variables
[0m[91m+ local component=z3
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_z3
[0m[91m+ local list_name=required_variables_z3
[0m[91m++ type -t required_variables_z3
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_z3[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_z3
[0m[91m++ local list_name=required_variables_z3
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_z3
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_z3[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z Z3_VERSION ]]
++ echo Z3_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n Z3_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_z3
[0m[91m+ fct=required_variables_check_z3
[0m[91m++ type -t required_variables_check_z3
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_z3
[0m[91m+ local list_name=artifact_dependency_z3
[0m[91m++ type -t artifact_dependency_z3
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_z3[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_z3
[0m[91m++ local list_name=artifact_dependency_z3
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_z3
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_z3[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer_compiler ]]
[0m[91m++ echo sanitizer_compiler
++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer_compiler ]]
[0m[91m+ gather_dependencies_rec sanitizer_compiler artifact setup_variables
[0m[91m+ local component=sanitizer_compiler
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer_compiler v
[0m[91m+ local component=sanitizer_compiler
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m++ required_variables_sanitizer_compiler=("")
[0m[91m+ validate_required_variables sanitizer_compiler required_variables
+ local component=sanitizer_compiler
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer_compiler
[0m[91m+ local list_name=required_variables_sanitizer_compiler
[0m[91m++ type -t required_variables_sanitizer_compiler
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer_compiler[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer_compiler
[0m[91m++ local list_name=required_variables_sanitizer_compiler
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sanitizer_compiler
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer_compiler[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
+ try_execute_if_exists required_variables_check_sanitizer_compiler
[0m[91m+ fct=required_variables_check_sanitizer_compiler
[0m[91m++ type -t required_variables_check_sanitizer_compiler
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
[0m[91m+++ echo sanitizer
[0m[91m+++ [[ -n x ]]
+++ [[ '' == \m\e\m\o\r\y ]]
+++ [[ '' != \m\e\m\o\r\y ]]
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
[0m[91m++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sanitizer_compiler
+ fct=setup_variables_sanitizer_compiler
[0m[91m++ type -t setup_variables_sanitizer_compiler
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer_compiler
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_z3
[0m[91m+ fct=setup_variables_z3
[0m[91m++ type -t setup_variables_z3
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ try_execute_if_exists setup_variables_solvers
+ fct=setup_variables_solvers
[0m[91m++ type -t setup_variables_solvers
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_solvers
[0m[91m+ local solvers
+ IFS=:
[0m[91m+ read -r -a solvers
[0m[91m+ SELECTED_SOLVERS=()
[0m[91m+ for solver in '"${solvers[@]}"'
+ [[ -z STP ]]
[0m[91m++ to_lower STP
[0m[91m++ echo STP
[0m[91m++ tr '[:upper:]' '[:lower:]'
[0m[91m+ solver=stp
+ [[ stp == \z\3 ]]
+ [[ stp == \s\t\p ]]
+ SELECTED_SOLVERS+=("stp")
+ continue
[0m[91m+ for solver in '"${solvers[@]}"'
[0m[91m+ [[ -z Z3 ]]
[0m[91m++ to_lower Z3
[0m[91m++ echo Z3
[0m[91m++ tr '[:upper:]' '[:lower:]'
[0m[91m+ solver=z3
+ [[ z3 == \z\3 ]]
+ SELECTED_SOLVERS+=("z3")
+ continue
+ SELECTED_SOLVERS=($( for e in "${SELECTED_SOLVERS[@]}"; do echo "$e"; done | sort|uniq))
[0m[91m++ sort
++ for e in '"${SELECTED_SOLVERS[@]}"'
++ uniq
++ echo stp
++ for e in '"${SELECTED_SOLVERS[@]}"'
++ echo z3
[0m[91m++ IFS=_
[0m[91m++ echo stp_z3
[0m[91m+ SOLVER_SUFFIX=stp_z3
[0m[91m+ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z gtest ]]
[0m[91m+ gather_dependencies_rec gtest artifact setup_variables
[0m[91m+ local component=gtest
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component gtest v
[0m[91m+ local component=gtest
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-gtest.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-gtest.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-gtest.inc
[0m[91m++ required_variables_gtest=("GTEST_VERSION")
[0m[91m++ artifact_dependency_gtest=("")
[0m[91m+ validate_required_variables gtest required_variables
[0m[91m+ local component=gtest
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_gtest
[0m[91m+ local list_name=required_variables_gtest
[0m[91m++ type -t required_variables_gtest
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_gtest[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_gtest
[0m[91m++ local list_name=required_variables_gtest
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_gtest
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_gtest[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z GTEST_VERSION ]]
[0m[91m++ echo GTEST_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n GTEST_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ try_execute_if_exists required_variables_check_gtest
[0m[91m+ fct=required_variables_check_gtest
[0m[91m++ type -t required_variables_check_gtest
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_gtest
[0m[91m+ local list_name=artifact_dependency_gtest
[0m[91m++ type -t artifact_dependency_gtest
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_gtest[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_gtest
[0m[91m++ local list_name=artifact_dependency_gtest
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_gtest
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_gtest[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_gtest
[0m[91m+ fct=setup_variables_gtest
[0m[91m++ type -t setup_variables_gtest
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z sqlite ]]
[0m[91m+ gather_dependencies_rec sqlite artifact setup_variables
[0m[91m+ local component=sqlite
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sqlite v
[0m[91m+ local component=sqlite
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sqlite.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sqlite.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sqlite.inc
[0m[91m++ artifact_dependency_sqlite=("sanitizer_compiler")
[0m[91m++ required_variables_sqlite=("")
[0m[91m+ validate_required_variables sqlite required_variables
[0m[91m+ local component=sqlite
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sqlite
[0m[91m+ local list_name=required_variables_sqlite
[0m[91m++ type -t required_variables_sqlite
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sqlite[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sqlite
[0m[91m++ local list_name=required_variables_sqlite
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_sqlite
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sqlite[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
[0m[91m+ try_execute_if_exists required_variables_check_sqlite
[0m[91m+ fct=required_variables_check_sqlite
[0m[91m++ type -t required_variables_check_sqlite
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_sqlite
[0m[91m+ local list_name=artifact_dependency_sqlite
[0m[91m++ type -t artifact_dependency_sqlite
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sqlite[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sqlite
[0m[91m++ local list_name=artifact_dependency_sqlite
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sqlite
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sqlite[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer_compiler ]]
[0m[91m++ echo sanitizer_compiler
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer_compiler ]]
[0m[91m+ gather_dependencies_rec sanitizer_compiler artifact setup_variables
[0m[91m+ local component=sanitizer_compiler
+ local type=artifact
+ local action=setup_variables
[0m[91m+ load_component sanitizer_compiler v
[0m[91m+ local component=sanitizer_compiler
[0m[91m+ local c_type=v
+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer_compiler.inc
[0m[91m++ required_variables_sanitizer_compiler=("")
[0m[91m+ validate_required_variables sanitizer_compiler required_variables
+ local component=sanitizer_compiler
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer_compiler
[0m[91m+ local list_name=required_variables_sanitizer_compiler
[0m[91m++ type -t required_variables_sanitizer_compiler
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer_compiler[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer_compiler
[0m[91m++ local list_name=required_variables_sanitizer_compiler
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer_compiler
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer_compiler[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ [[ -n '' ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer_compiler
[0m[91m+ fct=required_variables_check_sanitizer_compiler
[0m[91m++ type -t required_variables_check_sanitizer_compiler
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_sanitizer_compiler
[0m[91m+ local list_name=artifact_dependency_sanitizer_compiler
[0m[91m++ type -t artifact_dependency_sanitizer_compiler
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer_compiler
[0m[91m++ local list_name=artifact_dependency_sanitizer_compiler
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer_compiler
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_sanitizer_compiler
[0m[91m+++ echo sanitizer
[0m[91m+++ [[ -n x ]]
[0m[91m+++ [[ '' == \m\e\m\o\r\y ]]
[0m[91m+++ [[ '' != \m\e\m\o\r\y ]]
[0m[91m+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
++ for i in '"${result[@]}"'
++ [[ -z clang ]]
[0m[91m++ echo clang
++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
[0m[91m+ local component=clang
+ local type=required_variables
[0m[91m+ local variables
+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
[0m[91m+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sanitizer_compiler
+ fct=setup_variables_sanitizer_compiler
[0m[91m++ type -t setup_variables_sanitizer_compiler
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer_compiler
[0m[91m+ for sanitizer in '"${SANITIZERS[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_sqlite
+ fct=setup_variables_sqlite
[0m[91m++ type -t setup_variables_sqlite
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z uclibc ]]
[0m[91m+ gather_dependencies_rec uclibc artifact setup_variables
[0m[91m+ local component=uclibc
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component uclibc v
[0m[91m+ local component=uclibc
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-uclibc.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-uclibc.inc ]]
+ source /tmp/klee_src/scripts/build/v-uclibc.inc
[0m[91m++ required_variables_uclibc=("UCLIBC_VERSION" "LLVM_VERSION")
[0m[91m+ validate_required_variables uclibc required_variables
[0m[91m+ local component=uclibc
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_uclibc
[0m[91m+ local list_name=required_variables_uclibc
[0m[91m++ type -t required_variables_uclibc
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_uclibc[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_uclibc
[0m[91m++ local list_name=required_variables_uclibc
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_uclibc
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_uclibc[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z UCLIBC_VERSION ]]
[0m[91m++ echo UCLIBC_VERSION
[0m[91m++ for i in '"${result[@]}"'
[0m[91m++ [[ -z LLVM_VERSION ]]
++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n UCLIBC_VERSION LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_uclibc
[0m[91m+ fct=required_variables_check_uclibc
[0m[91m++ type -t required_variables_check_uclibc
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_uclibc
[0m[91m+ local list_name=artifact_dependency_uclibc
[0m[91m++ type -t artifact_dependency_uclibc
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_uclibc
[0m[91m++ local list_name=artifact_dependency_uclibc
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_uclibc
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_uclibc
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component clang v
[0m[91m+ local component=clang
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
[0m[91m+ local component=clang
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component sanitizer v
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
[0m[91m+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
[0m[91m++ continue
++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
+ SANITIZER_SUFFIX=
[0m[91m+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_uclibc
+ fct=setup_variables_uclibc
[0m[91m++ type -t setup_variables_uclibc
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
+ [[ -z tcmalloc ]]
[0m[91m+ gather_dependencies_rec tcmalloc artifact setup_variables
[0m[91m+ local component=tcmalloc
[0m[91m+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component tcmalloc v
[0m[91m+ local component=tcmalloc
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-tcmalloc.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-tcmalloc.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-tcmalloc.inc
[0m[91m++ artifact_dependency_tcmalloc=("")
[0m[91m++ required_variables_tcmalloc=("TCMALLOC_VERSION")
[0m[91m+ validate_required_variables tcmalloc required_variables
[0m[91m+ local component=tcmalloc
+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_tcmalloc
[0m[91m+ local list_name=required_variables_tcmalloc
[0m[91m++ type -t required_variables_tcmalloc
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_tcmalloc[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_tcmalloc
[0m[91m++ local list_name=required_variables_tcmalloc
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_tcmalloc
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_tcmalloc[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z TCMALLOC_VERSION ]]
++ echo TCMALLOC_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n TCMALLOC_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
+ try_execute_if_exists required_variables_check_tcmalloc
[0m[91m+ fct=required_variables_check_tcmalloc
[0m[91m++ type -t required_variables_check_tcmalloc
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ local variables
[0m[91m+ check_list artifact_dependency_tcmalloc
+ local list_name=artifact_dependency_tcmalloc
[0m[91m++ type -t artifact_dependency_tcmalloc
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_tcmalloc[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_tcmalloc
[0m[91m++ local list_name=artifact_dependency_tcmalloc
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_tcmalloc
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_tcmalloc[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
+ continue
[0m[91m+ try_execute_if_exists setup_variables_tcmalloc
[0m[91m+ fct=setup_variables_tcmalloc
[0m[91m++ type -t setup_variables_tcmalloc
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
[0m[91m+ return 0
[0m[91m+ for v in '"${depending_components[@]}"'
[0m[91m+ [[ -z libcxx ]]
[0m[91m+ gather_dependencies_rec libcxx artifact setup_variables
[0m[91m+ local component=libcxx
[0m[91m+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component libcxx v
[0m[91m+ local component=libcxx
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-libcxx.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-libcxx.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-libcxx.inc
[0m[91m++ required_variables_libcxx=("LLVM_VERSION")
[0m[91m+ validate_required_variables libcxx required_variables
[0m[91m+ local component=libcxx
[0m[91m+ local type=required_variables
[0m[91m+ local variables
[0m[91m+ check_list required_variables_libcxx
[0m[91m+ local list_name=required_variables_libcxx
[0m[91m++ type -t required_variables_libcxx
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_libcxx[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_libcxx
[0m[91m++ local list_name=required_variables_libcxx
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t required_variables_libcxx
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_libcxx[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_libcxx
[0m[91m+ fct=required_variables_check_libcxx
[0m[91m++ type -t required_variables_check_libcxx
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
[0m[91m+ required_variables_check_libcxx
[0m[91m+ return 0
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_libcxx
[0m[91m+ local list_name=artifact_dependency_libcxx
[0m[91m++ type -t artifact_dependency_libcxx
[0m[91m+ [[ function == \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_libcxx
[0m[91m++ local list_name=artifact_dependency_libcxx
[0m[91m++ result=("")
++ local result
[0m[91m+++ type -t artifact_dependency_libcxx
[0m[91m++ [[ function == \f\u\n\c\t\i\o\n ]]
[0m[91m++ mapfile -t result
[0m[91m+++ artifact_dependency_libcxx
+++ echo clang
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z clang ]]
++ echo clang
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z clang ]]
[0m[91m+ gather_dependencies_rec clang artifact setup_variables
[0m[91m+ local component=clang
+ local type=artifact
[0m[91m+ local action=setup_variables
+ load_component clang v
[0m[91m+ local component=clang
+ local c_type=v
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/v-clang.inc
+ [[ ! -f /tmp/klee_src/scripts/build/v-clang.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-clang.inc
[0m[91m++ required_variables_clang=("LLVM_VERSION")
[0m[91m++ artifact_dependency_clang=("sanitizer")
[0m[91m++ export_variables_clang=("LLVM_CONFIG" "BITCODE_CC" "BITCODE_CXX")
[0m[91m+ validate_required_variables clang required_variables
+ local component=clang
[0m[91m+ local type=required_variables
+ local variables
[0m[91m+ check_list required_variables_clang
[0m[91m+ local list_name=required_variables_clang
[0m[91m++ type -t required_variables_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_clang[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_clang
[0m[91m++ local list_name=required_variables_clang
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='required_variables_clang[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
[0m[91m++ [[ -z LLVM_VERSION ]]
[0m[91m++ echo LLVM_VERSION
[0m[91m++ return 0
[0m[91m+ [[ -n LLVM_VERSION ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_clang
[0m[91m+ fct=required_variables_check_clang
[0m[91m++ type -t required_variables_check_clang
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_clang
[0m[91m+ local list_name=artifact_dependency_clang
[0m[91m++ type -t artifact_dependency_clang
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_clang[@]'
[0m[91m+ [[ -n x ]]
[0m[91m+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_clang
[0m[91m++ local list_name=artifact_dependency_clang
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_clang
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
++ list_array='artifact_dependency_clang[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z sanitizer ]]
[0m[91m++ echo sanitizer
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z sanitizer ]]
[0m[91m+ gather_dependencies_rec sanitizer artifact setup_variables
[0m[91m+ local component=sanitizer
+ local type=artifact
[0m[91m+ local action=setup_variables
[0m[91m+ load_component sanitizer v
[0m[91m+ local component=sanitizer
[0m[91m+ local c_type=v
+ local component_path=/tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/v-sanitizer.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/v-sanitizer.inc
[0m[91m++ required_variables_sanitizer=("SANITIZER_BUILD")
[0m[91m++ artifact_dependency_sanitizer=("")
[0m[91m+ validate_required_variables sanitizer required_variables
[0m[91m+ local component=sanitizer
[0m[91m+ local type=required_variables
+ local variables
+ check_list required_variables_sanitizer
[0m[91m+ local list_name=required_variables_sanitizer
[0m[91m++ type -t required_variables_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=required_variables_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list required_variables_sanitizer
[0m[91m++ local list_name=required_variables_sanitizer
++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t required_variables_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='required_variables_sanitizer[@]'
[0m[91m++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
++ [[ -z SANITIZER_BUILD ]]
[0m[91m++ echo SANITIZER_BUILD
[0m[91m++ return 0
[0m[91m+ [[ -n SANITIZER_BUILD ]]
+ for v in '"${variables[@]}"'
[0m[91m+ [[ -z x ]]
[0m[91m+ try_execute_if_exists required_variables_check_sanitizer
[0m[91m+ fct=required_variables_check_sanitizer
[0m[91m++ type -t required_variables_check_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ required_variables_check_sanitizer
[0m[91m+ [[ -z '' ]]
+ return 0
+ return 0
[0m[91m+ local variables
+ check_list artifact_dependency_sanitizer
[0m[91m+ local list_name=artifact_dependency_sanitizer
[0m[91m++ type -t artifact_dependency_sanitizer
[0m[91m+ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m+ local 'list_array=artifact_dependency_sanitizer[@]'
[0m[91m+ [[ -n x ]]
+ return 0
[0m[91m+ mapfile -t variables
[0m[91m++ get_list artifact_dependency_sanitizer
[0m[91m++ local list_name=artifact_dependency_sanitizer
[0m[91m++ result=("")
[0m[91m++ local result
[0m[91m+++ type -t artifact_dependency_sanitizer
[0m[91m++ [[ '' == \f\u\n\c\t\i\o\n ]]
[0m[91m++ [[ -n x ]]
[0m[91m++ list_array='artifact_dependency_sanitizer[@]'
++ result=("${!list_array}")
[0m[91m++ for i in '"${result[@]}"'
[0m[91m++ [[ -z '' ]]
++ continue
[0m[91m++ return 0
[0m[91m+ for v in '"${variables[@]}"'
+ [[ -z '' ]]
[0m[91m+ continue
[0m[91m+ try_execute_if_exists setup_variables_sanitizer
[0m[91m+ fct=setup_variables_sanitizer
[0m[91m++ type -t setup_variables_sanitizer
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_sanitizer
[0m[91m+ [[ -z '' ]]
+ SANITIZERS=("")
[0m[91m+ SANITIZER_SUFFIX=
+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_clang
+ fct=setup_variables_clang
[0m[91m++ type -t setup_variables_clang
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ setup_variables_clang
[0m[91m+ LLVM_VERSION_SHORT=60
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists setup_variables_libcxx
[0m[91m+ fct=setup_variables_libcxx
[0m[91m++ type -t setup_variables_libcxx
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ try_execute_if_exists setup_variables_klee
+ fct=setup_variables_klee
[0m[91m++ type -t setup_variables_klee
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0m[91m+ execution_action is_installed klee
[0m[91m+ local action=is_installed
+ local component=klee
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-klee-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-klee-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute is_installed_klee
[0m[91m+ fct=is_installed_klee
[0m[91m++ type -t is_installed_klee
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-klee-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-klee-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-klee.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-klee.inc
[0m[91m+ local failed=0
+ try_execute is_installed_klee
[0m[91m+ fct=is_installed_klee
[0m[91m++ type -t is_installed_klee
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ 1 -eq 1 ]]
+ return 1
[0m[91m+ execution_action install_binary_artifact klee
[0m[91m+ local action=install_binary_artifact
+ local component=klee
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-klee-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
+ source /tmp/klee_src/scripts/build/p-klee-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute install_binary_artifact_klee
[0m[91m+ fct=install_binary_artifact_klee
[0m[91m++ type -t install_binary_artifact_klee
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-klee-linux-ubuntu.inc ]]
+ [[ -f /tmp/klee_src/scripts/build/p-klee-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-klee.inc ]]
+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-klee.inc
[0m[91m+ local failed=0
+ try_execute install_binary_artifact_klee
[0m[91m+ fct=install_binary_artifact_klee
[0m[91m++ type -t install_binary_artifact_klee
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ 1 -eq 1 ]]
+ return 1
[0m[91m+ validate_build_variables
+ [[ -z x ]]
+ [[ -z /tmp ]]
[0m[91m+ validate_component klee p
[0m[91m+ local component=klee
[0m[91m+ local c_type=p
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/p-klee.inc
[0m[91m+ [[ ! -f /tmp/klee_src/scripts/build/p-klee.inc ]]
+ load_component klee p
[0m[91m+ local component=klee
+ local c_type=p
[0m[91m+ local component_path=/tmp/klee_src/scripts/build/p-klee.inc
+ [[ ! -f /tmp/klee_src/scripts/build/p-klee.inc ]]
[0m[91m+ source /tmp/klee_src/scripts/build/p-klee.inc
[0m[91m+ setup_build_variables_klee
+ KLEE_SUFFIX=60stp_z3
[0m[91m+ KLEE_BUILD_DIR=/tmp/klee_build60stp_z3
+ KLEE_SRC=/tmp/klee_src/scripts/build/../../
[0m[91m+ execution_action install_runtime_dependencies klee
[0m[91m+ local action=install_runtime_dependencies
+ local component=klee
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-klee-linux-ubuntu-16.04.inc ]]
+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-klee-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute install_runtime_dependencies_klee
[0m[91m+ fct=install_runtime_dependencies_klee
[0m[91m++ type -t install_runtime_dependencies_klee
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-klee-linux-ubuntu.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-klee-linux.inc ]]
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-klee.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-klee.inc
[0m[91m+ local failed=0
+ try_execute install_runtime_dependencies_klee
[0m[91m+ fct=install_runtime_dependencies_klee
[0m[91m++ type -t install_runtime_dependencies_klee
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 2
[0m[91m+ failed=1
+ [[ 1 -eq 0 ]]
[0m[91m+ [[ 1 -eq 1 ]]
+ return 1
[0m[91m+ true
+ try_execute_if_exists validate_build_config_klee
[0m[91m+ fct=validate_build_config_klee
[0m[91m++ type -t validate_build_config_klee
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ validate_build_config_klee
[0m[91m+ return 0
[0m[91m+ return 0
[0m[91m+ [[ 1 == \1 ]]
+ execution_action install_build_dependencies klee
[0m[91m+ local action=install_build_dependencies
+ local component=klee
[0m[91m+ local found=0
[0m[91m+ [[ -f /tmp/klee_src/scripts/build/p-klee-linux-ubuntu-16.04.inc ]]
[0m[91m+ found=1
[0m[91m+ source /tmp/klee_src/scripts/build/p-klee-linux-ubuntu-16.04.inc
[0m[91m+ local failed=0
+ try_execute install_build_dependencies_klee
[0m[91m+ fct=install_build_dependencies_klee
[0m[91m++ type -t install_build_dependencies_klee
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ install_build_dependencies_klee
[0m[91m+ apt update -y
[0m[91m
WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

[0mHit:1 http://archive.ubuntu.com/ubuntu xenial InRelease
Hit:2 http://security.ubuntu.com/ubuntu xenial-security InRelease
Hit:3 http://archive.ubuntu.com/ubuntu xenial-updates InRelease
Hit:4 http://archive.ubuntu.com/ubuntu xenial-backports InRelease
Reading package lists...
Building dependency tree...
Reading state information...
32 packages can be upgraded. Run 'apt list --upgradable' to see them.
[91m+ dependencies=(build-essential cmake python-pip python-setuptools python-wheel zlib1g-dev python3 python3-setuptools python3-pip python3-wheel)
[0m[91m++ to_bool 0
[0m[91m++ [[ 0 == \1 ]]
++ [[ 0 == \O\N ]]
++ [[ 0 == \Y\E\S ]]
++ [[ 0 == \T\R\U\E ]]
++ [[ 0 == \T ]]
[0m[91m++ [[ 0 == \0 ]]
++ echo 0
[0m[91m++ return 0
[0m[91m+ [[ 0 -eq 1 ]]
+ apt -y --no-install-recommends install build-essential cmake python-pip python-setuptools python-wheel zlib1g-dev python3 python3-setuptools python3-pip python3-wheel
[0m[91m
WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

[0mReading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  bzip2 ca-certificates cmake-data cpp cpp-5 dh-python dpkg-dev g++ g++-5 gcc
  gcc-5 libarchive13 libbz2-1.0 libcc1-0 libcurl3 libdpkg-perl libgdbm3
  libisl15 liblzo2-2 libmpc3 libmpfr4 libperl5.22 libpython-stdlib
  libpython2.7-minimal libpython2.7-stdlib libpython3-stdlib librtmp1 make
  openssl patch perl perl-base perl-modules-5.22 python python-minimal
  python-pip-whl python-pkg-resources python2.7 python2.7-minimal
  python3-minimal python3-pkg-resources python3.5 python3.5-minimal xz-utils
Suggested packages:
  bzip2-doc codeblocks eclipse ninja-build cpp-doc gcc-5-locales
  debian-keyring g++-multilib g++-5-multilib gcc-5-doc libstdc++6-5-dbg
  gcc-multilib manpages-dev autoconf automake libtool flex bison gdb gcc-doc
  gcc-5-multilib libgcc1-dbg libgomp1-dbg libitm1-dbg libatomic1-dbg
  libasan2-dbg liblsan0-dbg libtsan0-dbg libubsan0-dbg libcilkrts5-dbg
  libmpx0-dbg libquadmath0-dbg lrzip make-doc ed diffutils-doc perl-doc
  libterm-readline-gnu-perl | libterm-readline-perl-perl python-doc python-tk
  python-setuptools-doc python2.7-doc python3-doc python3-tk python3-venv
  python3.5-venv python3.5-doc
Recommended packages:
  fakeroot libalgorithm-merge-perl libfile-fcntllock-perl netbase rename
  python-all-dev python3-dev
The following NEW packages will be installed:
  build-essential bzip2 ca-certificates cmake cmake-data cpp cpp-5 dh-python
  dpkg-dev g++ g++-5 gcc gcc-5 libarchive13 libcc1-0 libcurl3 libdpkg-perl
  libgdbm3 libisl15 liblzo2-2 libmpc3 libmpfr4 libperl5.22 libpython-stdlib
  libpython2.7-minimal libpython2.7-stdlib libpython3-stdlib librtmp1 make
  openssl patch perl perl-modules-5.22 python python-minimal python-pip
  python-pip-whl python-pkg-resources python-setuptools python-wheel python2.7
  python2.7-minimal python3 python3-minimal python3-pip python3-pkg-resources
  python3-setuptools python3-wheel python3.5 python3.5-minimal xz-utils
  zlib1g-dev
The following packages will be upgraded:
  libbz2-1.0 perl-base
2 upgraded, 52 newly installed, 0 to remove and 30 not upgraded.
Need to get 47.2 MB of archives.
After this operation, 171 MB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 perl-base amd64 5.22.1-9ubuntu0.6 [1283 kB]
Get:2 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 python3.5-minimal amd64 3.5.2-2ubuntu0~16.04.9 [1593 kB]
Get:3 http://archive.ubuntu.com/ubuntu xenial/main amd64 python3-minimal amd64 3.5.1-3 [23.3 kB]
Get:4 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 python3.5 amd64 3.5.2-2ubuntu0~16.04.9 [165 kB]
Get:5 http://archive.ubuntu.com/ubuntu xenial/main amd64 libpython3-stdlib amd64 3.5.1-3 [6818 B]
Get:6 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 dh-python all 2.20151103ubuntu1.2 [73.9 kB]
Get:7 http://archive.ubuntu.com/ubuntu xenial/main amd64 python3 amd64 3.5.1-3 [8710 B]
Get:8 http://archive.ubuntu.com/ubuntu xenial/main amd64 libgdbm3 amd64 1.8.3-13.1 [16.9 kB]
Get:9 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 cmake-data all 3.5.1-1ubuntu3 [1121 kB]
Get:10 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libbz2-1.0 amd64 1.0.6-8ubuntu0.2 [30.7 kB]
Get:11 http://archive.ubuntu.com/ubuntu xenial/main amd64 liblzo2-2 amd64 2.08-1.2 [48.7 kB]
Get:12 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libarchive13 amd64 3.1.2-11ubuntu0.16.04.7 [262 kB]
Get:13 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 librtmp1 amd64 2.4+20151223.gitfa8646d-1ubuntu0.1 [54.4 kB]
Get:14 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libcurl3 amd64 7.47.0-1ubuntu2.14 [186 kB]
Get:15 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 cmake amd64 3.5.1-1ubuntu3 [2623 kB]
Get:16 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 perl-modules-5.22 all 5.22.1-9ubuntu0.6 [2629 kB]
Get:17 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libperl5.22 amd64 5.22.1-9ubuntu0.6 [3405 kB]
Get:18 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 perl amd64 5.22.1-9ubuntu0.6 [237 kB]
Get:19 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libpython2.7-minimal amd64 2.7.12-1ubuntu0~16.04.9 [338 kB]
Get:20 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 python2.7-minimal amd64 2.7.12-1ubuntu0~16.04.9 [1262 kB]
Get:21 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 python-minimal amd64 2.7.12-1~16.04 [28.1 kB]
Get:22 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libpython2.7-stdlib amd64 2.7.12-1ubuntu0~16.04.9 [1884 kB]
Get:23 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 python2.7 amd64 2.7.12-1ubuntu0~16.04.9 [224 kB]
Get:24 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libpython-stdlib amd64 2.7.12-1~16.04 [7768 B]
Get:25 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 python amd64 2.7.12-1~16.04 [137 kB]
Get:26 http://archive.ubuntu.com/ubuntu xenial/main amd64 libmpfr4 amd64 3.1.4-1 [191 kB]
Get:27 http://archive.ubuntu.com/ubuntu xenial/main amd64 libmpc3 amd64 1.0.3-1 [39.7 kB]
Get:28 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 bzip2 amd64 1.0.6-8ubuntu0.2 [32.5 kB]
Get:29 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 openssl amd64 1.0.2g-1ubuntu4.15 [492 kB]
Get:30 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 ca-certificates all 20170717~16.04.2 [167 kB]
Get:31 http://archive.ubuntu.com/ubuntu xenial/main amd64 libisl15 amd64 0.16.1-1 [524 kB]
Get:32 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 cpp-5 amd64 5.4.0-6ubuntu1~16.04.12 [7783 kB]
Get:33 http://archive.ubuntu.com/ubuntu xenial/main amd64 cpp amd64 4:5.3.1-1ubuntu1 [27.7 kB]
Get:34 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libcc1-0 amd64 5.4.0-6ubuntu1~16.04.12 [38.8 kB]
Get:35 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 gcc-5 amd64 5.4.0-6ubuntu1~16.04.12 [8612 kB]
Get:36 http://archive.ubuntu.com/ubuntu xenial/main amd64 gcc amd64 4:5.3.1-1ubuntu1 [5244 B]
Get:37 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 g++-5 amd64 5.4.0-6ubuntu1~16.04.12 [8430 kB]
Get:38 http://archive.ubuntu.com/ubuntu xenial/main amd64 g++ amd64 4:5.3.1-1ubuntu1 [1504 B]
Get:39 http://archive.ubuntu.com/ubuntu xenial/main amd64 make amd64 4.1-6 [151 kB]
Get:40 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libdpkg-perl all 1.18.4ubuntu1.6 [195 kB]
Get:41 http://archive.ubuntu.com/ubuntu xenial/main amd64 xz-utils amd64 5.1.1alpha+20120614-2ubuntu2 [78.8 kB]
Get:42 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 patch amd64 2.7.5-1ubuntu0.16.04.2 [90.8 kB]
Get:43 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 dpkg-dev all 1.18.4ubuntu1.6 [584 kB]
Get:44 http://archive.ubuntu.com/ubuntu xenial/main amd64 build-essential amd64 12.1ubuntu2 [4758 B]
Get:45 http://archive.ubuntu.com/ubuntu xenial-updates/universe amd64 python-pip-whl all 8.1.1-2ubuntu0.4 [1110 kB]
Get:46 http://archive.ubuntu.com/ubuntu xenial-updates/universe amd64 python-pip all 8.1.1-2ubuntu0.4 [144 kB]
Get:47 http://archive.ubuntu.com/ubuntu xenial/main amd64 python-pkg-resources all 20.7.0-1 [108 kB]
Get:48 http://archive.ubuntu.com/ubuntu xenial/main amd64 python-setuptools all 20.7.0-1 [169 kB]
Get:49 http://archive.ubuntu.com/ubuntu xenial/universe amd64 python-wheel all 0.29.0-1 [48.0 kB]
Get:50 http://archive.ubuntu.com/ubuntu xenial-updates/universe amd64 python3-pip all 8.1.1-2ubuntu0.4 [109 kB]
Get:51 http://archive.ubuntu.com/ubuntu xenial/main amd64 python3-pkg-resources all 20.7.0-1 [79.0 kB]
Get:52 http://archive.ubuntu.com/ubuntu xenial/main amd64 python3-setuptools all 20.7.0-1 [88.0 kB]
Get:53 http://archive.ubuntu.com/ubuntu xenial/universe amd64 python3-wheel all 0.29.0-1 [48.1 kB]
Get:54 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 zlib1g-dev amd64 1:1.2.8.dfsg-2ubuntu4.1 [168 kB]
[91mdebconf: delaying package configuration, since apt-utils is not installed
[0mFetched 47.2 MB in 12s (3867 kB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 29382 files and directories currently installed.)
Preparing to unpack .../perl-base_5.22.1-9ubuntu0.6_amd64.deb ...
Unpacking perl-base (5.22.1-9ubuntu0.6) over (5.22.1-9ubuntu0.5) ...
Setting up perl-base (5.22.1-9ubuntu0.6) ...
Selecting previously unselected package python3.5-minimal.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 29382 files and directories currently installed.)
Preparing to unpack .../python3.5-minimal_3.5.2-2ubuntu0~16.04.9_amd64.deb ...
Unpacking python3.5-minimal (3.5.2-2ubuntu0~16.04.9) ...
Selecting previously unselected package python3-minimal.
Preparing to unpack .../python3-minimal_3.5.1-3_amd64.deb ...
Unpacking python3-minimal (3.5.1-3) ...
Selecting previously unselected package python3.5.
Preparing to unpack .../python3.5_3.5.2-2ubuntu0~16.04.9_amd64.deb ...
Unpacking python3.5 (3.5.2-2ubuntu0~16.04.9) ...
Selecting previously unselected package libpython3-stdlib:amd64.
Preparing to unpack .../libpython3-stdlib_3.5.1-3_amd64.deb ...
Unpacking libpython3-stdlib:amd64 (3.5.1-3) ...
Selecting previously unselected package dh-python.
Preparing to unpack .../dh-python_2.20151103ubuntu1.2_all.deb ...
Unpacking dh-python (2.20151103ubuntu1.2) ...
Processing triggers for mime-support (3.59ubuntu1) ...
Setting up python3.5-minimal (3.5.2-2ubuntu0~16.04.9) ...
mount: permission denied
update-binfmts: warning: Couldn't mount the binfmt_misc filesystem on /proc/sys/fs/binfmt_misc.
Setting up python3-minimal (3.5.1-3) ...
Selecting previously unselected package python3.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 29489 files and directories currently installed.)
Preparing to unpack .../python3_3.5.1-3_amd64.deb ...
Unpacking python3 (3.5.1-3) ...
Selecting previously unselected package libgdbm3:amd64.
Preparing to unpack .../libgdbm3_1.8.3-13.1_amd64.deb ...
Unpacking libgdbm3:amd64 (1.8.3-13.1) ...
Selecting previously unselected package cmake-data.
Preparing to unpack .../cmake-data_3.5.1-1ubuntu3_all.deb ...
Unpacking cmake-data (3.5.1-1ubuntu3) ...
Preparing to unpack .../libbz2-1.0_1.0.6-8ubuntu0.2_amd64.deb ...
Unpacking libbz2-1.0:amd64 (1.0.6-8ubuntu0.2) over (1.0.6-8) ...
Processing triggers for libc-bin (2.23-0ubuntu10) ...
Setting up libbz2-1.0:amd64 (1.0.6-8ubuntu0.2) ...
Processing triggers for libc-bin (2.23-0ubuntu10) ...
Selecting previously unselected package liblzo2-2:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 31549 files and directories currently installed.)
Preparing to unpack .../liblzo2-2_2.08-1.2_amd64.deb ...
Unpacking liblzo2-2:amd64 (2.08-1.2) ...
Selecting previously unselected package libarchive13:amd64.
Preparing to unpack .../libarchive13_3.1.2-11ubuntu0.16.04.7_amd64.deb ...
Unpacking libarchive13:amd64 (3.1.2-11ubuntu0.16.04.7) ...
Selecting previously unselected package librtmp1:amd64.
Preparing to unpack .../librtmp1_2.4+20151223.gitfa8646d-1ubuntu0.1_amd64.deb ...
Unpacking librtmp1:amd64 (2.4+20151223.gitfa8646d-1ubuntu0.1) ...
Selecting previously unselected package libcurl3:amd64.
Preparing to unpack .../libcurl3_7.47.0-1ubuntu2.14_amd64.deb ...
Unpacking libcurl3:amd64 (7.47.0-1ubuntu2.14) ...
Selecting previously unselected package cmake.
Preparing to unpack .../cmake_3.5.1-1ubuntu3_amd64.deb ...
Unpacking cmake (3.5.1-1ubuntu3) ...
Selecting previously unselected package perl-modules-5.22.
Preparing to unpack .../perl-modules-5.22_5.22.1-9ubuntu0.6_all.deb ...
Unpacking perl-modules-5.22 (5.22.1-9ubuntu0.6) ...
Selecting previously unselected package libperl5.22:amd64.
Preparing to unpack .../libperl5.22_5.22.1-9ubuntu0.6_amd64.deb ...
Unpacking libperl5.22:amd64 (5.22.1-9ubuntu0.6) ...
Selecting previously unselected package perl.
Preparing to unpack .../perl_5.22.1-9ubuntu0.6_amd64.deb ...
Unpacking perl (5.22.1-9ubuntu0.6) ...
Selecting previously unselected package libpython2.7-minimal:amd64.
Preparing to unpack .../libpython2.7-minimal_2.7.12-1ubuntu0~16.04.9_amd64.deb ...
Unpacking libpython2.7-minimal:amd64 (2.7.12-1ubuntu0~16.04.9) ...
Selecting previously unselected package python2.7-minimal.
Preparing to unpack .../python2.7-minimal_2.7.12-1ubuntu0~16.04.9_amd64.deb ...
Unpacking python2.7-minimal (2.7.12-1ubuntu0~16.04.9) ...
Selecting previously unselected package python-minimal.
Preparing to unpack .../python-minimal_2.7.12-1~16.04_amd64.deb ...
Unpacking python-minimal (2.7.12-1~16.04) ...
Selecting previously unselected package libpython2.7-stdlib:amd64.
Preparing to unpack .../libpython2.7-stdlib_2.7.12-1ubuntu0~16.04.9_amd64.deb ...
Unpacking libpython2.7-stdlib:amd64 (2.7.12-1ubuntu0~16.04.9) ...
Selecting previously unselected package python2.7.
Preparing to unpack .../python2.7_2.7.12-1ubuntu0~16.04.9_amd64.deb ...
Unpacking python2.7 (2.7.12-1ubuntu0~16.04.9) ...
Selecting previously unselected package libpython-stdlib:amd64.
Preparing to unpack .../libpython-stdlib_2.7.12-1~16.04_amd64.deb ...
Unpacking libpython-stdlib:amd64 (2.7.12-1~16.04) ...
Processing triggers for libc-bin (2.23-0ubuntu10) ...
Processing triggers for mime-support (3.59ubuntu1) ...
Setting up libpython2.7-minimal:amd64 (2.7.12-1ubuntu0~16.04.9) ...
Setting up python2.7-minimal (2.7.12-1ubuntu0~16.04.9) ...
mount: permission denied
update-binfmts: warning: Couldn't mount the binfmt_misc filesystem on /proc/sys/fs/binfmt_misc.
Linking and byte-compiling packages for runtime python2.7...
Setting up python-minimal (2.7.12-1~16.04) ...
Selecting previously unselected package python.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 34103 files and directories currently installed.)
Preparing to unpack .../python_2.7.12-1~16.04_amd64.deb ...
Unpacking python (2.7.12-1~16.04) ...
Selecting previously unselected package libmpfr4:amd64.
Preparing to unpack .../libmpfr4_3.1.4-1_amd64.deb ...
Unpacking libmpfr4:amd64 (3.1.4-1) ...
Selecting previously unselected package libmpc3:amd64.
Preparing to unpack .../libmpc3_1.0.3-1_amd64.deb ...
Unpacking libmpc3:amd64 (1.0.3-1) ...
Selecting previously unselected package bzip2.
Preparing to unpack .../bzip2_1.0.6-8ubuntu0.2_amd64.deb ...
Unpacking bzip2 (1.0.6-8ubuntu0.2) ...
Selecting previously unselected package openssl.
Preparing to unpack .../openssl_1.0.2g-1ubuntu4.15_amd64.deb ...
Unpacking openssl (1.0.2g-1ubuntu4.15) ...
Selecting previously unselected package ca-certificates.
Preparing to unpack .../ca-certificates_20170717~16.04.2_all.deb ...
Unpacking ca-certificates (20170717~16.04.2) ...
Selecting previously unselected package libisl15:amd64.
Preparing to unpack .../libisl15_0.16.1-1_amd64.deb ...
Unpacking libisl15:amd64 (0.16.1-1) ...
Selecting previously unselected package cpp-5.
Preparing to unpack .../cpp-5_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking cpp-5 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package cpp.
Preparing to unpack .../cpp_4%3a5.3.1-1ubuntu1_amd64.deb ...
Unpacking cpp (4:5.3.1-1ubuntu1) ...
Selecting previously unselected package libcc1-0:amd64.
Preparing to unpack .../libcc1-0_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking libcc1-0:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package gcc-5.
Preparing to unpack .../gcc-5_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking gcc-5 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package gcc.
Preparing to unpack .../gcc_4%3a5.3.1-1ubuntu1_amd64.deb ...
Unpacking gcc (4:5.3.1-1ubuntu1) ...
Selecting previously unselected package g++-5.
Preparing to unpack .../g++-5_5.4.0-6ubuntu1~16.04.12_amd64.deb ...
Unpacking g++-5 (5.4.0-6ubuntu1~16.04.12) ...
Selecting previously unselected package g++.
Preparing to unpack .../g++_4%3a5.3.1-1ubuntu1_amd64.deb ...
Unpacking g++ (4:5.3.1-1ubuntu1) ...
Selecting previously unselected package make.
Preparing to unpack .../archives/make_4.1-6_amd64.deb ...
Unpacking make (4.1-6) ...
Selecting previously unselected package libdpkg-perl.
Preparing to unpack .../libdpkg-perl_1.18.4ubuntu1.6_all.deb ...
Unpacking libdpkg-perl (1.18.4ubuntu1.6) ...
Selecting previously unselected package xz-utils.
Preparing to unpack .../xz-utils_5.1.1alpha+20120614-2ubuntu2_amd64.deb ...
Unpacking xz-utils (5.1.1alpha+20120614-2ubuntu2) ...
Selecting previously unselected package patch.
Preparing to unpack .../patch_2.7.5-1ubuntu0.16.04.2_amd64.deb ...
Unpacking patch (2.7.5-1ubuntu0.16.04.2) ...
Selecting previously unselected package dpkg-dev.
Preparing to unpack .../dpkg-dev_1.18.4ubuntu1.6_all.deb ...
Unpacking dpkg-dev (1.18.4ubuntu1.6) ...
Selecting previously unselected package build-essential.
Preparing to unpack .../build-essential_12.1ubuntu2_amd64.deb ...
Unpacking build-essential (12.1ubuntu2) ...
Selecting previously unselected package python-pip-whl.
Preparing to unpack .../python-pip-whl_8.1.1-2ubuntu0.4_all.deb ...
Unpacking python-pip-whl (8.1.1-2ubuntu0.4) ...
Selecting previously unselected package python-pip.
Preparing to unpack .../python-pip_8.1.1-2ubuntu0.4_all.deb ...
Unpacking python-pip (8.1.1-2ubuntu0.4) ...
Selecting previously unselected package python-pkg-resources.
Preparing to unpack .../python-pkg-resources_20.7.0-1_all.deb ...
Unpacking python-pkg-resources (20.7.0-1) ...
Selecting previously unselected package python-setuptools.
Preparing to unpack .../python-setuptools_20.7.0-1_all.deb ...
Unpacking python-setuptools (20.7.0-1) ...
Selecting previously unselected package python-wheel.
Preparing to unpack .../python-wheel_0.29.0-1_all.deb ...
Unpacking python-wheel (0.29.0-1) ...
Selecting previously unselected package python3-pip.
Preparing to unpack .../python3-pip_8.1.1-2ubuntu0.4_all.deb ...
Unpacking python3-pip (8.1.1-2ubuntu0.4) ...
Selecting previously unselected package python3-pkg-resources.
Preparing to unpack .../python3-pkg-resources_20.7.0-1_all.deb ...
Unpacking python3-pkg-resources (20.7.0-1) ...
Selecting previously unselected package python3-setuptools.
Preparing to unpack .../python3-setuptools_20.7.0-1_all.deb ...
Unpacking python3-setuptools (20.7.0-1) ...
Selecting previously unselected package python3-wheel.
Preparing to unpack .../python3-wheel_0.29.0-1_all.deb ...
Unpacking python3-wheel (0.29.0-1) ...
Selecting previously unselected package zlib1g-dev:amd64.
Preparing to unpack .../zlib1g-dev_1%3a1.2.8.dfsg-2ubuntu4.1_amd64.deb ...
Unpacking zlib1g-dev:amd64 (1:1.2.8.dfsg-2ubuntu4.1) ...
Processing triggers for libc-bin (2.23-0ubuntu10) ...
Setting up python3.5 (3.5.2-2ubuntu0~16.04.9) ...
Setting up libpython3-stdlib:amd64 (3.5.1-3) ...
Setting up libgdbm3:amd64 (1.8.3-13.1) ...
Setting up cmake-data (3.5.1-1ubuntu3) ...
Install cmake-data for emacs24
install/cmake-data: Byte-compiling for emacs24
Wrote /usr/share/emacs24/site-lisp/cmake-data/cmake-mode.elc
Setting up liblzo2-2:amd64 (2.08-1.2) ...
Setting up libarchive13:amd64 (3.1.2-11ubuntu0.16.04.7) ...
Setting up librtmp1:amd64 (2.4+20151223.gitfa8646d-1ubuntu0.1) ...
Setting up libcurl3:amd64 (7.47.0-1ubuntu2.14) ...
Setting up cmake (3.5.1-1ubuntu3) ...
Setting up perl-modules-5.22 (5.22.1-9ubuntu0.6) ...
Setting up libperl5.22:amd64 (5.22.1-9ubuntu0.6) ...
Setting up perl (5.22.1-9ubuntu0.6) ...
update-alternatives: using /usr/bin/prename to provide /usr/bin/rename (rename) in auto mode
Setting up libpython2.7-stdlib:amd64 (2.7.12-1ubuntu0~16.04.9) ...
Setting up python2.7 (2.7.12-1ubuntu0~16.04.9) ...
Setting up libpython-stdlib:amd64 (2.7.12-1~16.04) ...
Setting up python (2.7.12-1~16.04) ...
Setting up libmpfr4:amd64 (3.1.4-1) ...
Setting up libmpc3:amd64 (1.0.3-1) ...
Setting up bzip2 (1.0.6-8ubuntu0.2) ...
Setting up openssl (1.0.2g-1ubuntu4.15) ...
Setting up ca-certificates (20170717~16.04.2) ...
debconf: unable to initialize frontend: Dialog
debconf: (TERM is not set, so the dialog frontend is not usable.)
debconf: falling back to frontend: Readline
Setting up libisl15:amd64 (0.16.1-1) ...
Setting up cpp-5 (5.4.0-6ubuntu1~16.04.12) ...
Setting up cpp (4:5.3.1-1ubuntu1) ...
Setting up libcc1-0:amd64 (5.4.0-6ubuntu1~16.04.12) ...
Setting up gcc-5 (5.4.0-6ubuntu1~16.04.12) ...
Setting up gcc (4:5.3.1-1ubuntu1) ...
Setting up g++-5 (5.4.0-6ubuntu1~16.04.12) ...
Setting up g++ (4:5.3.1-1ubuntu1) ...
update-alternatives: using /usr/bin/g++ to provide /usr/bin/c++ (c++) in auto mode
Setting up make (4.1-6) ...
Setting up libdpkg-perl (1.18.4ubuntu1.6) ...
Setting up xz-utils (5.1.1alpha+20120614-2ubuntu2) ...
update-alternatives: using /usr/bin/xz to provide /usr/bin/lzma (lzma) in auto mode
Setting up patch (2.7.5-1ubuntu0.16.04.2) ...
Setting up dpkg-dev (1.18.4ubuntu1.6) ...
Setting up build-essential (12.1ubuntu2) ...
Setting up python-pip-whl (8.1.1-2ubuntu0.4) ...
Setting up python-pip (8.1.1-2ubuntu0.4) ...
Setting up python-pkg-resources (20.7.0-1) ...
Setting up python-setuptools (20.7.0-1) ...
Setting up python-wheel (0.29.0-1) ...
Setting up zlib1g-dev:amd64 (1:1.2.8.dfsg-2ubuntu4.1) ...
Setting up python3 (3.5.1-3) ...
running python rtupdate hooks for python3.5...
running python post-rtupdate hooks for python3.5...
Setting up python3-pip (8.1.1-2ubuntu0.4) ...
Setting up python3-pkg-resources (20.7.0-1) ...
Setting up python3-setuptools (20.7.0-1) ...
Setting up python3-wheel (0.29.0-1) ...
Setting up dh-python (2.20151103ubuntu1.2) ...
Processing triggers for libc-bin (2.23-0ubuntu10) ...
Processing triggers for ca-certificates (20170717~16.04.2) ...
Updating certificates in /etc/ssl/certs...
148 added, 0 removed; done.
Running hooks in /etc/ca-certificates/update.d...
done.
[91m+ pip install lit
[0mCollecting lit
  Downloading https://files.pythonhosted.org/packages/11/96/79e3eb8508926bc47f8be4a371a310453beaa1eb8e6c94140d45c8029adf/lit-0.9.0.tar.gz (87kB)
Building wheels for collected packages: lit
  Running setup.py bdist_wheel for lit: started
  Running setup.py bdist_wheel for lit: finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/17/19/02/9bfeddc10a5f20a53912bd699f35e6a2bf7171dd6e9ccdb5cc
Successfully built lit
Installing collected packages: lit
Successfully installed lit-0.9.0
[91mYou are using pip version 8.1.1, however version 19.3.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
[0m[91m+ pip3 install tabulate
[0mCollecting tabulate
  Downloading https://files.pythonhosted.org/packages/c4/41/523f6a05e6dc3329a5660f6a81254c6cd87e5cfb5b7482bae3391d86ec3a/tabulate-0.8.6.tar.gz (45kB)
Building wheels for collected packages: tabulate
  Running setup.py bdist_wheel for tabulate: started
  Running setup.py bdist_wheel for tabulate: finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/9c/9b/f4/eb243fdb89676ec00588e8c54bb54360724c06e7fafe95278e
Successfully built tabulate
Installing collected packages: tabulate
Successfully installed tabulate-0.8.6
[91mYou are using pip version 8.1.1, however version 19.3.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
[0m[91m+ return 0
+ [[ 0 -eq 0 ]]
+ return 0
[0m[91m+ try_execute_if_exists download_klee
[0m[91m+ fct=download_klee
[0m[91m++ type -t download_klee
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
+ download_klee
+ return 0
+ return 0
[0m[91m+ try_execute_if_exists build_klee
+ fct=build_klee
[0m[91m++ type -t build_klee
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
+ local failed=0
+ build_klee
[0m[91m+ CMAKE_PREFIX_PATH=("")
+ CMAKE_ARGUMENTS=("-DLLVM_DIR=${LLVM_INSTALL}" "-DLLVM_CONFIG_BINARY=${LLVM_CONFIG}" "-DLLVMCC=${BITCODE_CC}" "-DLLVMCXX=${BITCODE_CXX}" "-DGTEST_SRC_DIR=${GTEST_INSTALL_PATH}" "-DENABLE_UNIT_TESTS=TRUE" "-DENABLE_SYSTEM_TESTS=TRUE" "-DLIT_ARGS=-v")
[0m[91m+ local CMAKE_ARGUMENTS
[0m[91m+ '[' klee_uclibc_v1.2 '!=' 0 ']'
[0m[91m+ CMAKE_ARGUMENTS+=("-DENABLE_KLEE_UCLIBC=TRUE" "-DKLEE_UCLIBC_PATH=${BASE}/klee-uclibc-${LLVM_VERSION_SHORT}" "-DENABLE_POSIX_RUNTIME=TRUE")
[0m[91m+ '[' 1 -eq 1 ']'
+ CMAKE_ARGUMENTS+=("-DENABLE_KLEE_LIBCXX=TRUE" "-DKLEE_LIBCXX_DIR=${LIBCXX_INSTALL}" "-DKLEE_LIBCXX_INCLUDE_DIR=${LIBCXX_INSTALL}/include/c++/v1")
[0m[91m+ KLEE_Z3_CONFIGURE_OPTION=("-DENABLE_SOLVER_Z3=OFF")
+ local KLEE_Z3_CONFIGURE_OPTION
+ KLEE_STP_CONFIGURE_OPTION=("-DENABLE_SOLVER_STP=OFF")
+ local KLEE_STP_CONFIGURE_OPTION
+ KLEE_METASMT_CONFIGURE_OPTION=("-DENABLE_SOLVER_METASMT=OFF")
+ local KLEE_METASMT_CONFIGURE_OPTION
[0m[91m+ for solver in '"${SELECTED_SOLVERS[@]}"'
+ echo 'Setting CMake configuration option for stp'
[0m[91m+ case "${solver}" in
+ KLEE_STP_CONFIGURE_OPTION=("-DENABLE_SOLVER_STP=TRUE" "-DSTP_DIR=${STP_INSTALL_PATH}/")
[0mSetting CMake configuration option for stp
[91m+ CMAKE_PREFIX_PATH+=("${STP_INSTALL_PATH}")
[0m[91m+ for solver in '"${SELECTED_SOLVERS[@]}"'
[0mSetting CMake configuration option for z3
[91m+ echo 'Setting CMake configuration option for z3'
+ case "${solver}" in
+ echo Z3
[0mZ3
[91m+ KLEE_Z3_CONFIGURE_OPTION=("-DENABLE_SOLVER_Z3=TRUE" "-DZ3_INCLUDE_DIRS=${Z3_INSTALL_PATH}/include" "-DZ3_LIBRARIES=${Z3_INSTALL_PATH}/lib/libz3.so")
[0m[91m+ CMAKE_ARGUMENTS+=("${KLEE_Z3_CONFIGURE_OPTION[@]}" "${KLEE_STP_CONFIGURE_OPTION[@]}" "${KLEE_METASMT_CONFIGURE_OPTION[@]}")
[0m[91m++ to_bool 1
[0m[91m++ [[ 1 == \1 ]]
[0m[91m++ echo 1
[0m[91m++ return 0
[0m[91m+ [[ 1 -eq 1 ]]
[0m[91m+ CMAKE_PREFIX_PATH+=("${TCMALLOC_INSTALL_PATH}")
[0m[91m+ CMAKE_ARGUMENTS+=("-DENABLE_TCMALLOC=TRUE")
[0m[91m+ CMAKE_PREFIX_PATH+=("${SQLITE_INSTALL_PATH}")
[0m[91m+ '[' X0 == X1 ']'
+ CMAKE_ARGUMENTS+=("-DENABLE_KLEE_ASSERTS=TRUE")
[0m[91m+ '[' X1 == X1 ']'
+ CMAKE_ARGUMENTS+=("-DCMAKE_BUILD_TYPE=RelWithDebInfo")
[0m[91m+ CMAKE_ARGUMENTS+=("-DKLEE_RUNTIME_BUILD_TYPE=${KLEE_RUNTIME_BUILD}")
[0m[91m+ CXX_FLAGS=("")
[0m[91m+ local CXX_FLAGS
[0m[91m+ C_FLAGS=("")
+ local C_FLAGS
[0m[91m+ LD_FLAGS=("")
+ local LD_FLAGS
[0m[91m+ '[' 0 -eq 1 ']'
+ [[ -n '' ]]
[0m[91m+ mkdir -p /tmp/klee_build60stp_z3
[0m[91m+ cd /tmp/klee_build60stp_z3
[0m[91m+ echo 'CXXFLAGS="" \'
+ echo 'CFLAGS="" \'
[0m[91m+ echo 'LDFLAGS="" \'
[0m[91m+ [[ -n  /tmp/stp-2.3.3-install /tmp/tcmalloc-install-2.7 /tmp/sqlite-amalgamation-3270200 ]]
[0m[91m++ IFS=:
[0m[91m++ echo :/tmp/stp-2.3.3-install:/tmp/tcmalloc-install-2.7:/tmp/sqlite-amalgamation-3270200
[0m[91m+ cmake_concatenated=:/tmp/stp-2.3.3-install:/tmp/tcmalloc-install-2.7:/tmp/sqlite-amalgamation-3270200
[0m[91m+ echo 'CMAKE_PREFIX_PATH=":/tmp/stp-2.3.3-install:/tmp/tcmalloc-install-2.7:/tmp/sqlite-amalgamation-3270200" \'
[0m[91m+ echo 'cmake -DLLVM_DIR=/tmp/llvm-60-install_O_D_A -DLLVM_CONFIG_BINARY=/tmp/llvm-60-install_O_D_A/bin/llvm-config -DLLVMCC=/usr/lib/llvm-6.0/bin/clang -DLLVMCXX=/usr/lib/llvm-6.0/bin/clang++ -DGTEST_SRC_DIR=/tmp/googletest-release-1.7.0 -DENABLE_UNIT_TESTS=TRUE -DENABLE_SYSTEM_TESTS=TRUE -DLIT_ARGS=-v -DENABLE_KLEE_UCLIBC=TRUE -DKLEE_UCLIBC_PATH=/tmp/klee-uclibc-60 -DENABLE_POSIX_RUNTIME=TRUE -DENABLE_KLEE_LIBCXX=TRUE -DKLEE_LIBCXX_DIR=/tmp/libc++-install-60 -DKLEE_LIBCXX_INCLUDE_DIR=/tmp/libc++-install-60/include/c++/v1 -DENABLE_SOLVER_Z3=TRUE -DZ3_INCLUDE_DIRS=/tmp/z3-4.8.4-install/include -DZ3_LIBRARIES=/tmp/z3-4.8.4-install/lib/libz3.so -DENABLE_SOLVER_STP=TRUE -DSTP_DIR=/tmp/stp-2.3.3-install/ -DENABLE_SOLVER_METASMT=OFF -DENABLE_TCMALLOC=TRUE -DENABLE_KLEE_ASSERTS=TRUE -DCMAKE_BUILD_TYPE=RelWithDebInfo -DKLEE_RUNTIME_BUILD_TYPE=Debug+Asserts "/tmp/klee_src/scripts/build/../../"'
+ source /tmp/klee_build60stp_z3/.build_command
[0m[91m++ CXXFLAGS=
++ CFLAGS=
++ LDFLAGS=
++ CMAKE_PREFIX_PATH=:/tmp/stp-2.3.3-install:/tmp/tcmalloc-install-2.7:/tmp/sqlite-amalgamation-3270200
[0m[91m++ cmake -DLLVM_DIR=/tmp/llvm-60-install_O_D_A -DLLVM_CONFIG_BINARY=/tmp/llvm-60-install_O_D_A/bin/llvm-config -DLLVMCC=/usr/lib/llvm-6.0/bin/clang -DLLVMCXX=/usr/lib/llvm-6.0/bin/clang++ -DGTEST_SRC_DIR=/tmp/googletest-release-1.7.0 -DENABLE_UNIT_TESTS=TRUE -DENABLE_SYSTEM_TESTS=TRUE -DLIT_ARGS=-v -DENABLE_KLEE_UCLIBC=TRUE -DKLEE_UCLIBC_PATH=/tmp/klee-uclibc-60 -DENABLE_POSIX_RUNTIME=TRUE -DENABLE_KLEE_LIBCXX=TRUE -DKLEE_LIBCXX_DIR=/tmp/libc++-install-60 -DKLEE_LIBCXX_INCLUDE_DIR=/tmp/libc++-install-60/include/c++/v1 -DENABLE_SOLVER_Z3=TRUE -DZ3_INCLUDE_DIRS=/tmp/z3-4.8.4-install/include -DZ3_LIBRARIES=/tmp/z3-4.8.4-install/lib/libz3.so -DENABLE_SOLVER_STP=TRUE -DSTP_DIR=/tmp/stp-2.3.3-install/ -DENABLE_SOLVER_METASMT=OFF -DENABLE_TCMALLOC=TRUE -DENABLE_KLEE_ASSERTS=TRUE -DCMAKE_BUILD_TYPE=RelWithDebInfo -DKLEE_RUNTIME_BUILD_TYPE=Debug+Asserts /tmp/klee_src/scripts/build/../../
[0m-- The CXX compiler identification is GNU 5.4.0
-- The C compiler identification is GNU 5.4.0
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- KLEE version 2.1-pre
-- CMake generator: Unix Makefiles
-- Build type: RelWithDebInfo
-- KLEE assertions enabled
-- LLVM_CONFIG_BINARY: /tmp/llvm-60-install_O_D_A/bin/llvm-config
-- LLVM_PACKAGE_VERSION: "6.0.1"
-- LLVM_VERSION_MAJOR: "6"
-- LLVM_VERSION_MINOR: "0"
-- LLVM_VERSION_PATCH: "1"
-- LLVM_DEFINITIONS: "-D_GNU_SOURCE;-D__STDC_CONSTANT_MACROS;-D__STDC_FORMAT_MACROS;-D__STDC_LIMIT_MACROS"
-- LLVM_ENABLE_ASSERTIONS: "ON"
-- LLVM_ENABLE_EH: "OFF"
-- LLVM_ENABLE_RTTI: "OFF"
-- LLVM_INCLUDE_DIRS: "/tmp/llvm-60-install_O_D_A/include"
-- LLVM_LIBRARY_DIRS: "/tmp/llvm-60-install_O_D_A/lib"
-- LLVM_TOOLS_BINARY_DIR: "/tmp/llvm-60-install_O_D_A/bin"
-- LLVM_ENABLE_VISIBILITY_INLINES_HIDDEN: "ON"
-- TARGET_TRIPLE: "x86_64-unknown-linux-gnu"
-- Looking for bitcode compilers
-- Found /usr/lib/llvm-6.0/bin/clang
-- Found /usr/lib/llvm-6.0/bin/clang++
-- Testing bitcode compiler /usr/lib/llvm-6.0/bin/clang
-- Compile success
-- Checking compatibility with LLVM 6.0.1
-- "/usr/lib/llvm-6.0/bin/clang" is compatible
-- Testing bitcode compiler /usr/lib/llvm-6.0/bin/clang++
-- Compile success
-- Checking compatibility with LLVM 6.0.1
-- "/usr/lib/llvm-6.0/bin/clang++" is compatible
-- LLVMCC: /usr/lib/llvm-6.0/bin/clang
-- LLVMCXX: /usr/lib/llvm-6.0/bin/clang++
-- Performing Test HAS__Wall_CXX
-- Performing Test HAS__Wall_CXX - Success
-- C++ compiler supports -Wall
-- Performing Test HAS__Wextra_CXX
-- Performing Test HAS__Wextra_CXX - Success
-- C++ compiler supports -Wextra
-- Performing Test HAS__Wno_unused_parameter_CXX
-- Performing Test HAS__Wno_unused_parameter_CXX - Success
-- C++ compiler supports -Wno-unused-parameter
-- Performing Test HAS__Wall_C
-- Performing Test HAS__Wall_C - Success
-- C compiler supports -Wall
-- Performing Test HAS__Wextra_C
-- Performing Test HAS__Wextra_C - Success
-- C compiler supports -Wextra
-- Performing Test HAS__Wno_unused_parameter_C
-- Performing Test HAS__Wno_unused_parameter_C - Success
-- C compiler supports -Wno-unused-parameter
-- Not treating compiler warnings as errors
-- STP solver support enabled
-- Found STP version 2.3.3
-- Using STP shared library
-- STP_DIR: /tmp/stp-2.3.3-install/lib/cmake/STP
-- Found Z3 libraries: "/tmp/z3-4.8.4-install/lib/libz3.so"
-- Found Z3 include path: "/tmp/z3-4.8.4-install/include"
-- Found Z3: /tmp/z3-4.8.4-install/include  
-- Z3 solver support enabled
-- Found Z3
-- Checking prototype Z3_get_error_msg for HAVE_Z3_GET_ERROR_MSG_NEEDS_CONTEXT - True
-- Z3_get_error_msg requires context
-- metaSMT solver support disabled
-- Performing Test HAS__fno_exceptions
-- Performing Test HAS__fno_exceptions - Success
-- C++ compiler supports -fno-exceptions
-- Performing Test HAS__fno_rtti
-- Performing Test HAS__fno_rtti - Success
-- C++ compiler supports -fno-rtti
-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version "1.2.8") 
-- Zlib support enabled
-- TCMalloc support enabled
-- Looking for C++ include gperftools/malloc_extension.h
-- Looking for C++ include gperftools/malloc_extension.h - found
-- Performing Test HAS__fno_builtin_malloc
-- Performing Test HAS__fno_builtin_malloc - Success
-- C++ compiler supports -fno-builtin-malloc
-- Performing Test HAS__fno_builtin_calloc
-- Performing Test HAS__fno_builtin_calloc - Success
-- C++ compiler supports -fno-builtin-calloc
-- Performing Test HAS__fno_builtin_realloc
-- Performing Test HAS__fno_builtin_realloc - Success
-- C++ compiler supports -fno-builtin-realloc
-- Performing Test HAS__fno_builtin_free
-- Performing Test HAS__fno_builtin_free - Success
-- C++ compiler supports -fno-builtin-free
-- Found SQLITE3: /usr/lib/x86_64-linux-gnu/libsqlite3.so  
-- Looking for sys/capability.h
-- Looking for sys/capability.h - not found
-- Looking for pty.h
-- Looking for pty.h - found
-- Looking for util.h
-- Looking for util.h - not found
-- Looking for libutil.h
-- Looking for libutil.h - not found
-- Looking for openpty
-- Looking for openpty - not found
-- Looking for openpty in util
-- Looking for openpty in util - found
-- Looking for __ctype_b_loc
-- Looking for __ctype_b_loc - found
-- Looking for mallinfo
-- Looking for mallinfo - found
-- Looking for malloc_zone_statistics
-- Looking for malloc_zone_statistics - not found
-- Looking for sys/statfs.h
-- Looking for sys/statfs.h - found
-- Looking for selinux/selinux.h
-- Looking for selinux/selinux.h - not found
-- Looking for sys/acl.h
-- Looking for sys/acl.h - not found
-- SELinux support disabled
-- Performing Test LLVM_PR39177_FIXED
-- Performing Test LLVM_PR39177_FIXED - Failed
-- Workaround for LLVM PR39177 (affecting LLVM 3.9 - 7.0.0) enabled
-- KLEE_RUNTIME_BUILD_TYPE: Debug+Asserts
-- POSIX runtime enabled
-- klee-uclibc support enabled
-- Found klee-uclibc library: "/tmp/klee-uclibc-60/lib/libc.a"
-- klee-libcxx support enabled
-- Use libc++ include path: "/tmp/libc++-install-60/include/c++/v1"
-- Found libc++ library: "/tmp/libc++-install-60/lib/libc++.bca"
--  -Wall -Wextra -Wno-unused-parameter
-- KLEE_GIT_SHA1HASH: ea80c971bb72490a562c2b81839b4b359ce0aafe
-- KLEE_COMPONENT_EXTRA_INCLUDE_DIRS: '/tmp/llvm-60-install_O_D_A/include;/tmp/stp-2.3.3-install/include;/tmp/z3-4.8.4-install/include;/usr/include;/tmp/tcmalloc-install-2.7/include'
-- KLEE_COMPONENT_CXX_DEFINES: '-D_GNU_SOURCE;-D__STDC_CONSTANT_MACROS;-D__STDC_FORMAT_MACROS;-D__STDC_LIMIT_MACROS;-DKLEE_UCLIBC_BCA_NAME="klee-uclibc.bca";-DKLEE_LIBCXX_BC_NAME="libc++.bca"'
-- KLEE_COMPONENT_CXX_FLAGS: '-fvisibility-inlines-hidden;-fno-exceptions;-fno-rtti;-fno-builtin-malloc;-fno-builtin-calloc;-fno-builtin-realloc;-fno-builtin-free'
-- KLEE_COMPONENT_EXTRA_LIBRARIES: '/usr/lib/x86_64-linux-gnu/libz.so;/tmp/tcmalloc-install-2.7/lib/libtcmalloc_minimal.so'
-- KLEE_SOLVER_LIBRARIES: 'stp;/tmp/z3-4.8.4-install/lib/libz3.so'
-- Testing is enabled
-- Using lit: /usr/local/bin/lit
-- Unit tests enabled
-- Found PythonInterp: /usr/bin/python (found version "2.7.12") 
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - not found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- System tests enabled
-- Could NOT find Doxygen (missing:  DOXYGEN_EXECUTABLE) 
[91mCMake Warning at docs/CMakeLists.txt:46 (message):
  Doxygen not found.  Can't build Doxygen documentation


[0m-- Configuring done
-- Generating done
[91mCMake Warning:
  Manually-specified variables were not used by the project:

    LLVM_DIR


[0m-- Build files have been written to: /tmp/klee_build60stp_z3
[91m++ nproc
[0m[91m+ make -j48
[0mScanning dependencies of target BuildKLEERuntimes
Scanning dependencies of target kleeRuntest
Scanning dependencies of target gtest
[  0%] Performing RuntimeBuild step for 'BuildKLEERuntimes'
[  0%] Building C object runtime/Runtest/CMakeFiles/kleeRuntest.dir/intrinsics.c.o
[  1%] Creating directories for 'BuildKLEERuntimes'
make[3]: Entering directory '/tmp/klee_build60stp_z3/runtime'
[  2%] Building CXX object runtime/Runtest/CMakeFiles/kleeRuntest.dir/__/__/lib/Basic/KTest.cpp.o
make[4]: Entering directory '/tmp/klee_build60stp_z3/runtime/Intrinsic'
[  3%] Building CXX object unittests/gtest_build/CMakeFiles/gtest.dir/src/gtest-all.cc.o
Scanning dependencies of target kleeSupport
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/Intrinsic/dso_handle.c
[  4%] Building CXX object lib/Support/CMakeFiles/kleeSupport.dir/CompressionStream.cpp.o
[  4%] Building CXX object lib/Support/CMakeFiles/kleeSupport.dir/ErrorHandling.cpp.o
[  5%] Building CXX object lib/Support/CMakeFiles/kleeSupport.dir/MemoryUsage.cpp.o
[  5%] Building CXX object lib/Support/CMakeFiles/kleeSupport.dir/TreeStream.cpp.o
[  6%] Building CXX object lib/Support/CMakeFiles/kleeSupport.dir/Time.cpp.o
[  7%] Building CXX object lib/Support/CMakeFiles/kleeSupport.dir/FileHandling.cpp.o
[  7%] Building CXX object lib/Support/CMakeFiles/kleeSupport.dir/PrintVersion.cpp.o
Scanning dependencies of target kleaverExpr
[  8%] Building CXX object lib/Support/CMakeFiles/kleeSupport.dir/RNG.cpp.o
[  9%] Building CXX object lib/Support/CMakeFiles/kleeSupport.dir/Timer.cpp.o
[ 10%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/ArrayExprOptimizer.cpp.o
[ 11%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/ArrayExprRewriter.cpp.o
[ 12%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/ExprBuilder.cpp.o
[ 12%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/ArrayExprVisitor.cpp.o
[ 13%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/Expr.cpp.o
[ 14%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/Updates.cpp.o
[ 16%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/ExprEvaluator.cpp.o
[ 16%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/ArrayCache.cpp.o
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/Intrinsic/klee_choose.c
[ 17%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/AssignmentGenerator.cpp.o
[ 20%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/ExprUtil.cpp.o
[ 20%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/ExprVisitor.cpp.o
[ 20%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/Parser.cpp.o
[ 21%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/Assigment.cpp.o
[ 21%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/Lexer.cpp.o
[ 21%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/ExprPPrinter.cpp.o
[ 22%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/Constraints.cpp.o
[ 22%] Building CXX object lib/Expr/CMakeFiles/kleaverExpr.dir/ExprSMTLIBPrinter.cpp.o
[ 23%] No download step for 'BuildKLEERuntimes'
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/Intrinsic/klee_div_zero_check.c
[ 23%] No patch step for 'BuildKLEERuntimes'
[ 24%] No update step for 'BuildKLEERuntimes'
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/Intrinsic/klee_int.c
[ 25%] Performing configure step for 'BuildKLEERuntimes'
[ 26%] Linking CXX shared library ../../lib/libkleeRuntest.so

LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/Intrinsic/klee_overshift_check.c
[ 27%] Performing build step for 'BuildKLEERuntimes'

[ 27%] Built target kleeRuntest
[ 27%] Performing install step for 'BuildKLEERuntimes'

LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/Intrinsic/klee_range.c
Creating LLVM archive /tmp/klee_build60stp_z3/Debug+Asserts/lib/libkleeRuntimeIntrinsic.bca
make[4]: Leaving directory '/tmp/klee_build60stp_z3/runtime/Intrinsic'
make[4]: Entering directory '/tmp/klee_build60stp_z3/runtime/klee-libc'
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/__cxa_atexit.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/abort.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/atexit.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/atoi.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/calloc.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/htonl.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/memchr.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/mempcpy.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/putchar.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/stpcpy.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/strcat.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/strchr.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/strcmp.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/strcoll.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/strcpy.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/strlen.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/strncmp.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/strncpy.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/strrchr.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/strtol.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/strtoul.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/tolower.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/klee-libc/toupper.c
Creating LLVM archive /tmp/klee_build60stp_z3/Debug+Asserts/lib/libklee-libc.bca
make[4]: Leaving directory '/tmp/klee_build60stp_z3/runtime/klee-libc'
make[4]: Entering directory '/tmp/klee_build60stp_z3/runtime/FreeStanding'
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/FreeStanding/memcmp.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/FreeStanding/memcpy.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/FreeStanding/memmove.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/FreeStanding/memset.c
Creating LLVM archive /tmp/klee_build60stp_z3/Debug+Asserts/lib/libkleeRuntimeFreeStanding.bca
make[4]: Leaving directory '/tmp/klee_build60stp_z3/runtime/FreeStanding'
make[4]: Entering directory '/tmp/klee_build60stp_z3/runtime/POSIX'
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/POSIX/fd.c
[91m/tmp/klee_src/runtime/POSIX/fd.c:556:19: warning: nonnull parameter 'path' will evaluate to 'true' on first encounter [-Wpointer-bool-conversion]
                 (path ? __concretize_string(path) : NULL), buf, (long)flags);
                  ^~~~ ~
/usr/include/x86_64-linux-gnu/sys/stat.h:239:14: note: declared 'nonnull' here
     __THROW __nonnull ((2, 3));
             ^
/usr/include/x86_64-linux-gnu/sys/cdefs.h:285:44: note: expanded from macro '__nonnull'
[0m[91m# define __nonnull(params) __attribute__ ((__nonnull__ params))
                                           ^
[0m[91m1 warning generated.
[0mLLVMCC (Debug+Asserts) /tmp/klee_src/runtime/POSIX/fd_32.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/POSIX/fd_64.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/POSIX/fd_init.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/POSIX/illegal.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/POSIX/klee_init_env.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/POSIX/misc.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/POSIX/selinux.c
LLVMCC (Debug+Asserts) /tmp/klee_src/runtime/POSIX/stubs.c
Creating LLVM archive /tmp/klee_build60stp_z3/Debug+Asserts/lib/libkleeRuntimePOSIX.bca
make[4]: Leaving directory '/tmp/klee_build60stp_z3/runtime/POSIX'
make[3]: Leaving directory '/tmp/klee_build60stp_z3/runtime'
[ 28%] Completed 'BuildKLEERuntimes'
[ 28%] Built target BuildKLEERuntimes
[ 28%] Linking CXX static library ../libkleaverExpr.a
[ 28%] Built target kleaverExpr
[ 29%] Linking CXX static library ../libkleeSupport.a
[ 29%] Built target kleeSupport
Scanning dependencies of target kleaverSolver
[ 30%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/CachingSolver.cpp.o
[ 31%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/AssignmentValidatingSolver.cpp.o
[ 31%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/IncompleteSolver.cpp.o
[ 32%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/CoreSolver.cpp.o
[ 33%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/ConstantDivision.cpp.o
[ 33%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/CexCachingSolver.cpp.o
[ 34%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/DummySolver.cpp.o
[ 35%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/IndependentSolver.cpp.o
[ 36%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/QueryLoggingSolver.cpp.o
[ 37%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/FastCexSolver.cpp.o
[ 38%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/Z3Solver.cpp.o
[ 39%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/SolverImpl.cpp.o
[ 39%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/Solver.cpp.o
[ 40%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/Z3Builder.cpp.o
[ 40%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/ValidatingSolver.cpp.o
[ 41%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/SMTLIBLoggingSolver.cpp.o
[ 42%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/KQueryLoggingSolver.cpp.o
[ 42%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/MetaSMTSolver.cpp.o
[ 43%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/STPBuilder.cpp.o
[ 44%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/SolverStats.cpp.o
[ 45%] Building CXX object lib/Solver/CMakeFiles/kleaverSolver.dir/STPSolver.cpp.o
Scanning dependencies of target kleeModule
[ 46%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/InstructionOperandTypeCheckPass.cpp.o
[ 47%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/Checks.cpp.o
[ 47%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/IntrinsicCleaner.cpp.o
[ 47%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/PhiCleaner.cpp.o
[ 48%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/Optimize.cpp.o
[ 48%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/ModuleUtil.cpp.o
[ 50%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/WorkaroundLLVMPR39177.cpp.o
[ 51%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/KModule.cpp.o
[ 52%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/OptNone.cpp.o
[ 53%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/KInstruction.cpp.o
[ 54%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/InstructionInfoTable.cpp.o
[ 55%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/RaiseAsm.cpp.o
[ 56%] Building CXX object lib/Module/CMakeFiles/kleeModule.dir/LowerSwitch.cpp.o
[ 57%] Linking CXX static library ../../lib/libgtest.a
[ 57%] Built target gtest
Scanning dependencies of target gtest_main
[ 57%] Building CXX object unittests/gtest_build/CMakeFiles/gtest_main.dir/src/gtest_main.cc.o
[ 58%] Linking CXX static library ../../lib/libgtest_main.a
[ 58%] Built target gtest_main
Scanning dependencies of target RefTest
Scanning dependencies of target AssignmentTest
[ 59%] Building CXX object unittests/Ref/CMakeFiles/RefTest.dir/RefTest.cpp.o
Scanning dependencies of target TimeTest
Scanning dependencies of target ExprTest
[ 59%] Building CXX object unittests/Assignment/CMakeFiles/AssignmentTest.dir/AssignmentTest.cpp.o
[ 60%] Building CXX object unittests/Time/CMakeFiles/TimeTest.dir/TimeTest.cpp.o
[ 61%] Building CXX object unittests/Expr/CMakeFiles/ExprTest.dir/ExprTest.cpp.o
[ 61%] Linking CXX static library ../libkleaverSolver.a
[ 61%] Built target kleaverSolver
Scanning dependencies of target kleeBasic
[ 62%] Building CXX object lib/Basic/CMakeFiles/kleeBasic.dir/CmdLineOptions.cpp.o
[ 63%] Building CXX object lib/Basic/CMakeFiles/kleeBasic.dir/KTest.cpp.o
[ 64%] Building CXX object lib/Basic/CMakeFiles/kleeBasic.dir/ConstructSolverChain.cpp.o
[ 64%] Building CXX object lib/Basic/CMakeFiles/kleeBasic.dir/Statistics.cpp.o
[ 65%] Linking CXX executable ../RefTest
[ 65%] Built target RefTest
[ 66%] Linking CXX static library ../libkleeBasic.a
[ 66%] Built target kleeBasic
Scanning dependencies of target gen-bout
Scanning dependencies of target gen-random-bout
Scanning dependencies of target klee-replay
Scanning dependencies of target DiscretePDFTest
Scanning dependencies of target TreeStreamTest
[ 67%] Building CXX object tools/gen-bout/CMakeFiles/gen-bout.dir/gen-bout.cpp.o
Scanning dependencies of target kleaver
[ 68%] Building C object tools/klee-replay/CMakeFiles/klee-replay.dir/fd_init.c.o
[ 68%] Building CXX object tools/gen-random-bout/CMakeFiles/gen-random-bout.dir/gen-random-bout.cpp.o
[ 69%] Building CXX object unittests/DiscretePDF/CMakeFiles/DiscretePDFTest.dir/DiscretePDFTest.cpp.o
[ 70%] Building C object tools/klee-replay/CMakeFiles/klee-replay.dir/klee_init_env.c.o
[ 71%] Building C object tools/klee-replay/CMakeFiles/klee-replay.dir/file-creator.c.o
[ 71%] Building C object tools/klee-replay/CMakeFiles/klee-replay.dir/klee-replay.c.o
[ 71%] Building CXX object unittests/TreeStream/CMakeFiles/TreeStreamTest.dir/TreeStreamTest.cpp.o
[ 72%] Building CXX object tools/kleaver/CMakeFiles/kleaver.dir/main.cpp.o
Scanning dependencies of target SolverTest
[ 73%] Linking CXX executable ../AssignmentTest
[ 74%] Building CXX object unittests/Solver/CMakeFiles/SolverTest.dir/SolverTest.cpp.o
[ 75%] Linking CXX static library ../libkleeModule.a
[ 76%] Linking CXX executable ../../bin/gen-bout
[ 77%] Linking CXX executable ../../bin/gen-random-bout
[ 77%] Linking CXX executable ../../bin/klee-replay
[ 77%] Built target AssignmentTest
[ 77%] Built target gen-bout
[ 77%] Built target gen-random-bout
[ 77%] Built target klee-replay
[ 77%] Built target kleeModule
Scanning dependencies of target kleeCore
[ 78%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/AddressSpace.cpp.o
[ 78%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/CallPathManager.cpp.o
[ 78%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/ExecutionState.cpp.o
[ 79%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/Executor.cpp.o
[ 80%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/Context.cpp.o
[ 81%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/ImpliedValue.cpp.o
[ 81%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/ExternalDispatcher.cpp.o
[ 82%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/MergeHandler.cpp.o
[ 83%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/Memory.cpp.o
[ 84%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/SeedInfo.cpp.o
[ 85%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/CoreStats.cpp.o
[ 86%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/CacheUtil.cpp.o
[ 88%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/ExecutorUtil.cpp.o
[ 88%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/MemoryManager.cpp.o
[ 88%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/PTree.cpp.o
[ 89%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/ExecutorTimers.cpp.o
[ 90%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/StatsTracker.cpp.o
[ 91%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/CacheState.cpp.o
[ 92%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/Searcher.cpp.o
[ 93%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/UserSearcher.cpp.o
[ 94%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/TimingSolver.cpp.o
[ 94%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/SpectreRecorder.cpp.o
[ 94%] Building CXX object lib/Core/CMakeFiles/kleeCore.dir/SpecialFunctionHandler.cpp.o
[ 95%] Linking CXX executable ../TimeTest
[ 96%] Linking CXX executable ../DiscretePDFTest
[ 97%] Linking CXX executable ../TreeStreamTest
[ 97%] Built target TimeTest
[ 97%] Linking CXX executable ../ExprTest
[ 97%] Built target DiscretePDFTest
[ 97%] Built target TreeStreamTest
[ 97%] Built target ExprTest
[ 97%] Linking CXX executable ../../bin/kleaver
[ 97%] Built target kleaver
[ 97%] Linking CXX executable ../SolverTest
[ 97%] Built target SolverTest
[ 97%] Linking CXX static library ../libkleeCore.a
[ 97%] Built target kleeCore
Scanning dependencies of target klee
[ 98%] Building CXX object tools/klee/CMakeFiles/klee.dir/main.cpp.o
[100%] Linking CXX executable ../../bin/klee
[100%] Built target klee
[91m+ return 0
+ try_execute_if_exists install_klee
+ fct=install_klee
[0m[91m++ type -t install_klee
[0m[91m+ [[ function != \f\u\n\c\t\i\o\n ]]
[0m[91m+ local failed=0
[0m[91m+ install_klee
[0m[91m+ return 0
[0m[91m+ return 0
[0m[91m+ try_execute_if_exists check_export_variables_klee
[0m[91m+ fct=check_export_variables_klee
[0m[91m++ type -t check_export_variables_klee
[0m[91m+ [[ '' != \f\u\n\c\t\i\o\n ]]
+ return 0
[0mRemoving intermediate container 071b3114f8bd
 ---> cd590852e695
Step 39/45 : ENV PATH="$PATH:/tmp/llvm-60-install_O_D_A/bin:/home/klee/klee_build/bin"
 ---> Running in 2b7555dfe7a9
Removing intermediate container 2b7555dfe7a9
 ---> bc66bedb1d24
Step 40/45 : ENV BASE=/tmp
 ---> Running in 999a186371c8
Removing intermediate container 999a186371c8
 ---> d16af291fc6d
Step 41/45 : USER klee
 ---> Running in e1cc08c44379
Removing intermediate container e1cc08c44379
 ---> 63deb8c86c13
Step 42/45 : WORKDIR /home/klee
 ---> Running in 145379b8a036
Removing intermediate container 145379b8a036
 ---> 20bee3e6ea6e
Step 43/45 : ENV LD_LIBRARY_PATH /home/klee/klee_build/lib/
 ---> Running in 80fc10006cc6
Removing intermediate container 80fc10006cc6
 ---> 022c5521a97a
Step 44/45 : RUN /bin/bash -c 'ln -s ${BASE}/klee_src /home/klee/ && ln -s ${BASE}/klee_build* /home/klee/klee_build'
 ---> Running in 58e7ea9bb60d
Removing intermediate container 58e7ea9bb60d
 ---> 3e6f55d68f4e
Step 45/45 : RUN /bin/bash -c 'echo "export LD_LIBRARY_PATH=$(cd ${BASE}/metaSMT-*-deps/stp-git-basic/lib/ && pwd):$LD_LIBRARY_PATH" >> /home/klee/.bashrc'
 ---> Running in e338491b2da8
[91m/bin/bash: line 0: cd: /tmp/metaSMT-*-deps/stp-git-basic/lib/: No such file or directory
[0mRemoving intermediate container e338491b2da8
 ---> eb26e06b61d5
Successfully built eb26e06b61d5
Successfully tagged klee/klee:latest
