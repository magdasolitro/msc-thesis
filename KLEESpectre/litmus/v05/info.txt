********** X86 speculative load hardening : victim_fun **********
Tracing predicate through block: entry
  Inserting cmov:   %6:gr64_nosp = CMOVA64rr %4:gr64_nosp(tied-def 0), %3:gr64_nosp, implicit killed $eflags

  Inserting cmov:   %7:gr64_nosp = CMOVBE64rr %4:gr64_nosp(tied-def 0), %3:gr64_nosp, implicit killed $eflags

Final speculative load hardened function:
# Machine code for function victim_fun: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.entry:
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $edi
  DBG_VALUE $edi, $noreg, !"idx", !DIExpression(), debug-location !38; test.c:12:21 line no:12
  %3:gr64_nosp = MOV64ri32 -1
  %5:gr64_nosp = COPY $rsp
  %4:gr64_nosp = SAR64ri killed %5:gr64_nosp(tied-def 0), 63, implicit-def dead $eflags
  %0:gr32 = COPY $edi
  DBG_VALUE %0:gr32, $noreg, !"idx", !DIExpression(), debug-location !38; test.c:12:21 line no:12
  CMP32mr $rip, 1, $noreg, @array1_size, $noreg, %0:gr32, implicit-def $eflags, debug-location !45 :: (dereferenceable load 4 from @array1_size, !tbaa !41); test.c:14:13
  JBE_1 %bb.3, implicit $eflags, debug-location !46; test.c:14:9
  JMP_1 %bb.1, debug-location !46; test.c:14:9

bb.1.for.cond.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $eflags
  %7:gr64_nosp = CMOVBE64rr %4:gr64_nosp(tied-def 0), %3:gr64_nosp, implicit killed $eflags

bb.2.for.cond:
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !51; test.c:13:12 line no:13
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value), debug-location !51; test.c:13:12 line no:13
  JMP_1 %bb.2, debug-location !47; test.c:15:9

bb.3.if.end:
; predecessors: %bb.0
  liveins: $eflags
  %6:gr64_nosp = CMOVA64rr %4:gr64_nosp(tied-def 0), %3:gr64_nosp, implicit killed $eflags
  %9:gr64_nosp = SHL64ri killed %6:gr64_nosp(tied-def 0), 47, implicit-def dead $eflags, debug-location !55; test.c:18:1
  $rsp = OR64rr $rsp(tied-def 0), killed %9:gr64_nosp, implicit-def dead $eflags, debug-location !55; test.c:18:1
  RET 0, debug-location !55; test.c:18:1

# End machine code for function victim_fun.


********** X86 speculative load hardening : main **********
Tracing predicate through block: entry
  Inserting cmov:   %15:gr64_nosp = CMOVE64rr %13:gr64_nosp(tied-def 0), %12:gr64_nosp, implicit killed $eflags

  Inserting cmov:   %16:gr64_nosp = CMOVNE64rr %13:gr64_nosp(tied-def 0), %12:gr64_nosp, implicit killed $eflags

Tracing predicate through block: if.end
  Split edge from 'if.end' to 'cleanup'.
  Inserting cmov:   %17:gr64_nosp = CMOVA64rr %13:gr64_nosp(tied-def 0), %12:gr64_nosp, implicit killed $eflags

  Inserting cmov:   %18:gr64_nosp = CMOVBE64rr %13:gr64_nosp(tied-def 0), %12:gr64_nosp, implicit killed $eflags

  Inserting cmov:   %24:gr64_nosp = CMOVNE64rr killed %22:gr64_nosp(tied-def 0), %12:gr64_nosp, implicit killed $eflags, debug-location !125; test.c:23:18

  Inserting cmov:   %29:gr64_nosp = CMOVNE64rr killed %27:gr64_nosp(tied-def 0), %12:gr64_nosp, implicit killed $eflags, debug-location !130; test.c:28:14

Final speculative load hardened function:
# Machine code for function main: IsSSA, TracksLiveness

bb.0.entry:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)

  DBG_VALUE $edi, $noreg, !"argn", !DIExpression(), debug-location !123; test.c:20:14 line no:20
  DBG_VALUE $rsi, $noreg, !"args", !DIExpression(), debug-location !124; test.c:20:26 line no:20
  %12:gr64_nosp = MOV64ri32 -1
  %14:gr64_nosp = COPY $rsp
  %13:gr64_nosp = SAR64ri killed %14:gr64_nosp(tied-def 0), 63, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !125; test.c:23:18
  %5:gr64 = MOV32ri64 @.str, debug-location !125; test.c:23:18
  %6:gr64 = MOV32ri64 @.str.1, debug-location !125; test.c:23:18
  $rdi = COPY %5:gr64, debug-location !125; test.c:23:18
  $rsi = COPY %6:gr64, debug-location !125; test.c:23:18
  %20:gr64_nosp = SHL64ri killed %13:gr64_nosp(tied-def 0), 47, implicit-def dead $eflags, debug-location !125; test.c:23:18
  $rsp = OR64rr $rsp(tied-def 0), killed %20:gr64_nosp, implicit-def dead $eflags, debug-location !125; test.c:23:18
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, post-instr-symbol <mcsymbol >, debug-location !125; test.c:23:18
  %21:gr64 = MOV64rm $rsp, 1, $noreg, -8, $noreg, debug-location !125; test.c:23:18
  %23:gr64_nosp = COPY $rsp, debug-location !125; test.c:23:18
  %22:gr64_nosp = SAR64ri killed %23:gr64_nosp(tied-def 0), 63, implicit-def dead $eflags, debug-location !125; test.c:23:18
  CMP64ri32 killed %21:gr64, <mcsymbol >, implicit-def $eflags, debug-location !125; test.c:23:18
  %24:gr64_nosp = CMOVNE64rr killed %22:gr64_nosp(tied-def 0), %12:gr64_nosp, implicit killed $eflags, debug-location !125; test.c:23:18
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !125; test.c:23:18
  %7:gr64 = COPY $rax, debug-location !125; test.c:23:18
  DBG_VALUE %7:gr64, $noreg, !"file", !DIExpression(), debug-location !126; test.c:23:11 line no:23
  TEST64rr %7:gr64, %7:gr64, implicit-def $eflags, debug-location !127; test.c:25:14
  JNE_1 %bb.1, implicit $eflags, debug-location !129; test.c:25:9

bb.5:
; predecessors: %bb.0
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $eflags
  %16:gr64_nosp = CMOVNE64rr %24:gr64_nosp(tied-def 0), %12:gr64_nosp, implicit killed $eflags
  %4:gr32 = MOV32ri 1
  JMP_1 %bb.4

bb.1.if.end:
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.6(0x40000000); %bb.2(50.00%), %bb.6(50.00%)
  liveins: $eflags
  %15:gr64_nosp = CMOVE64rr %24:gr64_nosp(tied-def 0), %12:gr64_nosp, implicit killed $eflags
  %0:gr64 = COPY %7:gr64, debug-location !139; test.c:0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !130; test.c:28:14
  $rdi = COPY %0:gr64, debug-location !130; test.c:28:14
  %25:gr64_nosp = SHL64ri killed %15:gr64_nosp(tied-def 0), 47, implicit-def dead $eflags, debug-location !130; test.c:28:14
  $rsp = OR64rr $rsp(tied-def 0), killed %25:gr64_nosp, implicit-def dead $eflags, debug-location !130; test.c:28:14
  CALL64pcrel32 @fgetc_unlocked, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, post-instr-symbol <mcsymbol >, debug-location !130; test.c:28:14
  %26:gr64 = MOV64rm $rsp, 1, $noreg, -8, $noreg, debug-location !130; test.c:28:14
  %28:gr64_nosp = COPY $rsp, debug-location !130; test.c:28:14
  %27:gr64_nosp = SAR64ri killed %28:gr64_nosp(tied-def 0), 63, implicit-def dead $eflags, debug-location !130; test.c:28:14
  CMP64ri32 killed %26:gr64, <mcsymbol >, implicit-def $eflags, debug-location !130; test.c:28:14
  %29:gr64_nosp = CMOVNE64rr killed %27:gr64_nosp(tied-def 0), %12:gr64_nosp, implicit killed $eflags, debug-location !130; test.c:28:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !130; test.c:28:14
  %9:gr32 = COPY $eax, debug-location !130; test.c:28:14
  DBG_VALUE %9:gr32, $noreg, !"source", !DIExpression(), debug-location !131; test.c:21:9 line no:21
  DBG_VALUE %9:gr32, $noreg, !"idx", !DIExpression(), debug-location !132; test.c:12:21 @[ test.c:29:5 ] line no:12
  %8:gr32 = MOV32r0 implicit-def dead $eflags
  CMP32mr $rip, 1, $noreg, @array1_size, $noreg, %9:gr32, implicit-def $eflags, debug-location !135 :: (dereferenceable load 4 from @array1_size, !tbaa !41); test.c:14:13 @[ test.c:29:5 ]
  JBE_1 %bb.6, implicit $eflags, debug-location !136; test.c:14:9 @[ test.c:29:5 ]
  JMP_1 %bb.2, debug-location !136; test.c:14:9 @[ test.c:29:5 ]

bb.6:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $eflags
  %17:gr64_nosp = CMOVA64rr %29:gr64_nosp(tied-def 0), %12:gr64_nosp, implicit killed $eflags
  JMP_1 %bb.4, debug-location !136; test.c:14:9 @[ test.c:29:5 ]

bb.2.for.cond.i.preheader:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $eflags
  %18:gr64_nosp = CMOVBE64rr %29:gr64_nosp(tied-def 0), %12:gr64_nosp, implicit killed $eflags

bb.3.for.cond.i:
; predecessors: %bb.2, %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !138; test.c:13:12 @[ test.c:29:5 ] line no:13
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value), debug-location !138; test.c:13:12 @[ test.c:29:5 ] line no:13
  JMP_1 %bb.3, debug-location !137; test.c:15:9 @[ test.c:29:5 ]

bb.4.cleanup:
; predecessors: %bb.5, %bb.6

  %30:gr64_nosp = PHI %16:gr64_nosp, %bb.5, %17:gr64_nosp, %bb.6
  %1:gr32 = PHI %4:gr32, %bb.5, %8:gr32, %bb.6, debug-location !139; test.c:0
  $eax = COPY %1:gr32, debug-location !140; test.c:31:1
  %31:gr64_nosp = SHL64ri killed %30:gr64_nosp(tied-def 0), 47, implicit-def dead $eflags, debug-location !140; test.c:31:1
  $rsp = OR64rr $rsp(tied-def 0), killed %31:gr64_nosp, implicit-def dead $eflags, debug-location !140; test.c:31:1
  RET 0, $eax, debug-location !140; test.c:31:1

# End machine code for function main.


********** X86 speculative load hardening : __llvm_retpoline_r11 **********
