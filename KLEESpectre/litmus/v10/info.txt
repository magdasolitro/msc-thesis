********** X86 speculative load hardening : victim_fun **********
Tracing predicate through block: entry
  Split edge from 'entry' to 'if.end7'.
  Inserting cmov:   %11:gr64_nosp = CMOVA64rr %9:gr64_nosp(tied-def 0), %8:gr64_nosp, implicit killed $eflags

  Inserting cmov:   %12:gr64_nosp = CMOVBE64rr %9:gr64_nosp(tied-def 0), %8:gr64_nosp, implicit killed $eflags

Tracing predicate through block: if.then
  Split edge from 'if.then' to 'if.end7'.
  Inserting cmov:   %13:gr64_nosp = CMOVE64rr %9:gr64_nosp(tied-def 0), %8:gr64_nosp, implicit killed $eflags

  Inserting cmov:   %14:gr64_nosp = CMOVNE64rr %9:gr64_nosp(tied-def 0), %8:gr64_nosp, implicit killed $eflags

  Inserting or:   %18:gr32 = OR32rr %17:gr32(tied-def 0), %16:gr32, implicit-def dead $eflags, debug-location !45; test.c:16:13

Final speculative load hardened function:
# Machine code for function victim_fun: IsSSA, TracksLiveness
Function Live Ins: $edi in %0, $esi in %1

bb.0.entry:
  successors: %bb.1(0x40000000), %bb.4(0x40000000); %bb.1(50.00%), %bb.4(50.00%)
  liveins: $edi, $esi
  DBG_VALUE $edi, $noreg, !"idx", !DIExpression(), debug-location !35; test.c:14:21 line no:14
  DBG_VALUE $esi, $noreg, !"k", !DIExpression(), debug-location !36; test.c:14:30 line no:14
  %8:gr64_nosp = MOV64ri32 -1
  %10:gr64_nosp = COPY $rsp
  %9:gr64_nosp = SAR64ri killed %10:gr64_nosp(tied-def 0), 63, implicit-def dead $eflags
  %1:gr32 = COPY $esi
  DBG_VALUE %1:gr32, $noreg, !"k", !DIExpression(), debug-location !36; test.c:14:30 line no:14
  %0:gr32 = COPY $edi
  DBG_VALUE %0:gr32, $noreg, !"idx", !DIExpression(), debug-location !35; test.c:14:21 line no:14
  CMP32mr $rip, 1, $noreg, @array1_size, $noreg, %0:gr32, implicit-def $eflags, debug-location !43 :: (dereferenceable load 4 from @array1_size, !tbaa !39); test.c:15:13
  JBE_1 %bb.4, implicit $eflags, debug-location !44; test.c:15:9
  JMP_1 %bb.1, debug-location !44; test.c:15:9

bb.4:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $eflags
  %11:gr64_nosp = CMOVA64rr %9:gr64_nosp(tied-def 0), %8:gr64_nosp, implicit killed $eflags
  JMP_1 %bb.3, debug-location !44; test.c:15:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.5(0x40000000); %bb.2(50.00%), %bb.5(50.00%)
  liveins: $eflags
  %12:gr64_nosp = CMOVBE64rr %9:gr64_nosp(tied-def 0), %8:gr64_nosp, implicit killed $eflags
  %4:gr64 = MOVSX64rr32 %0:gr32, debug-location !45; test.c:16:13
  %16:gr32 = MOVZX32rm8 killed %4:gr64, 1, $noreg, @array1, $noreg, debug-location !45 :: (load 1 from %ir.arrayidx, !tbaa !48); test.c:16:13
  %17:gr32 = COPY %12.sub_32bit:gr64_nosp, debug-location !45; test.c:16:13
  %18:gr32 = OR32rr %17:gr32(tied-def 0), %16:gr32, implicit-def dead $eflags, debug-location !45; test.c:16:13
  CMP32rr %18:gr32, %1:gr32, implicit-def $eflags, debug-location !49; test.c:16:25
  JNE_1 %bb.5, implicit $eflags, debug-location !50; test.c:16:13
  JMP_1 %bb.2, debug-location !50; test.c:16:13

bb.5:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $eflags
  %13:gr64_nosp = CMOVE64rr %12:gr64_nosp(tied-def 0), %8:gr64_nosp, implicit killed $eflags
  JMP_1 %bb.3, debug-location !50; test.c:16:13

bb.2.if.then3:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $eflags
  %14:gr64_nosp = CMOVNE64rr %12:gr64_nosp(tied-def 0), %8:gr64_nosp, implicit killed $eflags
  %7:gr8 = MOV8rm $rip, 1, $noreg, @array2, $noreg, debug-location !51 :: (dereferenceable load 1 from `i8* getelementptr inbounds ([131072 x i8], [131072 x i8]* @array2, i64 0, i64 0)`, align 16, !tbaa !48); test.c:17:21
  AND8mr $rip, 1, $noreg, @temp, $noreg, killed %7:gr8, implicit-def dead $eflags, debug-location !52 :: (store 1 into @temp, !tbaa !48), (dereferenceable load 1 from @temp, !tbaa !48); test.c:17:18

bb.3.if.end7:
; predecessors: %bb.2, %bb.4, %bb.5

  %19:gr64_nosp = PHI %14:gr64_nosp, %bb.2, %11:gr64_nosp, %bb.4, %13:gr64_nosp, %bb.5
  %20:gr64_nosp = SHL64ri killed %19:gr64_nosp(tied-def 0), 47, implicit-def dead $eflags, debug-location !54; test.c:19:1
  $rsp = OR64rr $rsp(tied-def 0), killed %20:gr64_nosp, implicit-def dead $eflags, debug-location !54; test.c:19:1
  RET 0, debug-location !54; test.c:19:1

# End machine code for function victim_fun.


********** X86 speculative load hardening : main **********
Tracing predicate through block: entry
  Inserting cmov:   %23:gr64_nosp = CMOVE64rr %21:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags

  Inserting cmov:   %24:gr64_nosp = CMOVNE64rr %21:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags

Tracing predicate through block: if.end
  Split edge from 'if.end' to 'cleanup'.
  Inserting cmov:   %25:gr64_nosp = CMOVA64rr %21:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags

  Inserting cmov:   %26:gr64_nosp = CMOVBE64rr %21:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags

Tracing predicate through block: if.then.i
  Split edge from 'if.then.i' to 'cleanup'.
  Inserting cmov:   %27:gr64_nosp = CMOVE64rr %21:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags

  Inserting cmov:   %28:gr64_nosp = CMOVNE64rr %21:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags

  Inserting cmov:   %34:gr64_nosp = CMOVNE64rr killed %32:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags, debug-location !128; test.c:25:18

  Inserting cmov:   %39:gr64_nosp = CMOVNE64rr killed %37:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags, debug-location !133; test.c:30:14

  Inserting or:   %42:gr32 = OR32rr %41:gr32(tied-def 0), %40:gr32, implicit-def dead $eflags, debug-location !143; test.c:16:13 @[ test.c:32:5 ]

Final speculative load hardened function:
# Machine code for function main: IsSSA, TracksLiveness

bb.0.entry:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)

  DBG_VALUE $edi, $noreg, !"argn", !DIExpression(), debug-location !126; test.c:21:14 line no:21
  DBG_VALUE $rsi, $noreg, !"args", !DIExpression(), debug-location !127; test.c:21:26 line no:21
  %20:gr64_nosp = MOV64ri32 -1
  %22:gr64_nosp = COPY $rsp
  %21:gr64_nosp = SAR64ri killed %22:gr64_nosp(tied-def 0), 63, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !128; test.c:25:18
  %6:gr64 = MOV32ri64 @.str, debug-location !128; test.c:25:18
  %7:gr64 = MOV32ri64 @.str.1, debug-location !128; test.c:25:18
  $rdi = COPY %6:gr64, debug-location !128; test.c:25:18
  $rsi = COPY %7:gr64, debug-location !128; test.c:25:18
  %30:gr64_nosp = SHL64ri killed %21:gr64_nosp(tied-def 0), 47, implicit-def dead $eflags, debug-location !128; test.c:25:18
  $rsp = OR64rr $rsp(tied-def 0), killed %30:gr64_nosp, implicit-def dead $eflags, debug-location !128; test.c:25:18
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, post-instr-symbol <mcsymbol >, debug-location !128; test.c:25:18
  %31:gr64 = MOV64rm $rsp, 1, $noreg, -8, $noreg, debug-location !128; test.c:25:18
  %33:gr64_nosp = COPY $rsp, debug-location !128; test.c:25:18
  %32:gr64_nosp = SAR64ri killed %33:gr64_nosp(tied-def 0), 63, implicit-def dead $eflags, debug-location !128; test.c:25:18
  CMP64ri32 killed %31:gr64, <mcsymbol >, implicit-def $eflags, debug-location !128; test.c:25:18
  %34:gr64_nosp = CMOVNE64rr killed %32:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags, debug-location !128; test.c:25:18
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !128; test.c:25:18
  %8:gr64 = COPY $rax, debug-location !128; test.c:25:18
  DBG_VALUE %8:gr64, $noreg, !"file", !DIExpression(), debug-location !129; test.c:25:11 line no:25
  TEST64rr %8:gr64, %8:gr64, implicit-def $eflags, debug-location !130; test.c:27:14
  JNE_1 %bb.1, implicit $eflags, debug-location !132; test.c:27:9

bb.5:
; predecessors: %bb.0
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $eflags
  %24:gr64_nosp = CMOVNE64rr %34:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags
  %5:gr32 = MOV32ri 1
  JMP_1 %bb.4

bb.1.if.end:
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.6(0x40000000); %bb.2(50.00%), %bb.6(50.00%)
  liveins: $eflags
  %23:gr64_nosp = CMOVE64rr %34:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags
  %0:gr64 = COPY %8:gr64, debug-location !149; test.c:0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !133; test.c:30:14
  $rdi = COPY %0:gr64, debug-location !133; test.c:30:14
  %35:gr64_nosp = SHL64ri killed %23:gr64_nosp(tied-def 0), 47, implicit-def dead $eflags, debug-location !133; test.c:30:14
  $rsp = OR64rr $rsp(tied-def 0), killed %35:gr64_nosp, implicit-def dead $eflags, debug-location !133; test.c:30:14
  CALL64pcrel32 @fgetc_unlocked, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, post-instr-symbol <mcsymbol >, debug-location !133; test.c:30:14
  %36:gr64 = MOV64rm $rsp, 1, $noreg, -8, $noreg, debug-location !133; test.c:30:14
  %38:gr64_nosp = COPY $rsp, debug-location !133; test.c:30:14
  %37:gr64_nosp = SAR64ri killed %38:gr64_nosp(tied-def 0), 63, implicit-def dead $eflags, debug-location !133; test.c:30:14
  CMP64ri32 killed %36:gr64, <mcsymbol >, implicit-def $eflags, debug-location !133; test.c:30:14
  %39:gr64_nosp = CMOVNE64rr killed %37:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags, debug-location !133; test.c:30:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !133; test.c:30:14
  %10:gr32 = COPY $eax, debug-location !133; test.c:30:14
  DBG_VALUE %10:gr32, $noreg, !"source", !DIExpression(), debug-location !134; test.c:22:9 line no:22
  DBG_VALUE %10:gr32, $noreg, !"source2", !DIExpression(DW_OP_plus_uconst, 2, DW_OP_stack_value), debug-location !135; test.c:23:9 line no:23
  DBG_VALUE %10:gr32, $noreg, !"idx", !DIExpression(), debug-location !136; test.c:14:21 @[ test.c:32:5 ] line no:14
  DBG_VALUE %10:gr32, $noreg, !"k", !DIExpression(DW_OP_plus_uconst, 2, DW_OP_stack_value), debug-location !138; test.c:14:30 @[ test.c:32:5 ] line no:14
  %9:gr32 = MOV32r0 implicit-def dead $eflags
  CMP32mr $rip, 1, $noreg, @array1_size, $noreg, %10:gr32, implicit-def $eflags, debug-location !140 :: (dereferenceable load 4 from @array1_size, !tbaa !39); test.c:15:13 @[ test.c:32:5 ]
  JBE_1 %bb.6, implicit $eflags, debug-location !141; test.c:15:9 @[ test.c:32:5 ]
  JMP_1 %bb.2, debug-location !141; test.c:15:9 @[ test.c:32:5 ]

bb.6:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $eflags
  %25:gr64_nosp = CMOVA64rr %39:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags
  JMP_1 %bb.4, debug-location !141; test.c:15:9 @[ test.c:32:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x40000000), %bb.7(0x40000000); %bb.3(50.00%), %bb.7(50.00%)
  liveins: $eflags
  %26:gr64_nosp = CMOVBE64rr %39:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags
  %14:gr32 = nsw ADD32ri8 %10:gr32(tied-def 0), 2, implicit-def dead $eflags, debug-location !142; test.c:31:22
  DBG_VALUE %14:gr32, $noreg, !"source2", !DIExpression(), debug-location !135; test.c:23:9 line no:23
  DBG_VALUE %14:gr32, $noreg, !"k", !DIExpression(), debug-location !138; test.c:14:30 @[ test.c:32:5 ] line no:14
  %15:gr64 = MOVSX64rr32 %10:gr32, debug-location !143; test.c:16:13 @[ test.c:32:5 ]
  %40:gr32 = MOVZX32rm8 killed %15:gr64, 1, $noreg, @array1, $noreg, debug-location !143 :: (load 1 from %ir.arrayidx.i, !tbaa !48); test.c:16:13 @[ test.c:32:5 ]
  %41:gr32 = COPY %26.sub_32bit:gr64_nosp, debug-location !143; test.c:16:13 @[ test.c:32:5 ]
  %42:gr32 = OR32rr %41:gr32(tied-def 0), %40:gr32, implicit-def dead $eflags, debug-location !143; test.c:16:13 @[ test.c:32:5 ]
  CMP32rr %14:gr32, killed %42:gr32, implicit-def $eflags, debug-location !144; test.c:16:25 @[ test.c:32:5 ]
  JNE_1 %bb.7, implicit $eflags, debug-location !145; test.c:16:13 @[ test.c:32:5 ]
  JMP_1 %bb.3, debug-location !145; test.c:16:13 @[ test.c:32:5 ]

bb.7:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $eflags
  %27:gr64_nosp = CMOVE64rr %26:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags
  JMP_1 %bb.4, debug-location !145; test.c:16:13 @[ test.c:32:5 ]

bb.3.if.then3.i:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $eflags
  %28:gr64_nosp = CMOVNE64rr %26:gr64_nosp(tied-def 0), %20:gr64_nosp, implicit killed $eflags
  %19:gr8 = MOV8rm $rip, 1, $noreg, @array2, $noreg, debug-location !146 :: (dereferenceable load 1 from `i8* getelementptr inbounds ([131072 x i8], [131072 x i8]* @array2, i64 0, i64 0)`, align 16, !tbaa !48); test.c:17:21 @[ test.c:32:5 ]
  AND8mr $rip, 1, $noreg, @temp, $noreg, killed %19:gr8, implicit-def dead $eflags, debug-location !147 :: (store 1 into @temp, !tbaa !48), (dereferenceable load 1 from @temp, !tbaa !48); test.c:17:18 @[ test.c:32:5 ]

bb.4.cleanup:
; predecessors: %bb.3, %bb.5, %bb.6, %bb.7

  %43:gr64_nosp = PHI %28:gr64_nosp, %bb.3, %24:gr64_nosp, %bb.5, %25:gr64_nosp, %bb.6, %27:gr64_nosp, %bb.7
  %2:gr32 = PHI %5:gr32, %bb.5, %9:gr32, %bb.6, %9:gr32, %bb.7, %9:gr32, %bb.3, debug-location !149; test.c:0
  $eax = COPY %2:gr32, debug-location !150; test.c:34:1
  %44:gr64_nosp = SHL64ri killed %43:gr64_nosp(tied-def 0), 47, implicit-def dead $eflags, debug-location !150; test.c:34:1
  $rsp = OR64rr $rsp(tied-def 0), killed %44:gr64_nosp, implicit-def dead $eflags, debug-location !150; test.c:34:1
  RET 0, $eax, debug-location !150; test.c:34:1

# End machine code for function main.


********** X86 speculative load hardening : __llvm_retpoline_r11 **********
