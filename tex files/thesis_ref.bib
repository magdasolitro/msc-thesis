@inproceedings{Almeida2017,
	author	  = {Almeida, Jos\'{e} Bacelar and Barbosa, Manuel and Barthe, Gilles and Blot, Arthur and Gr\'{e}goire, Benjamin and Laporte, Vincent and Oliveira, Tiago and Pacheco, Hugo and Schmidt, Benedikt and Strub, Pierre-Yves},
	title  	  = {Jasmin: High-Assurance and High-Speed Cryptography},
	year  	  = {2017},
	isbn  	  = {9781450349468},
	publisher = {Association for Computing Machinery},
	address   = {New York, NY, USA},
	url		  = {https://doi.org/10.1145/3133956.3134078},
	doi 	  = {10.1145/3133956.3134078},
	abstract  = {Jasmin is a framework for developing high-speed and high-assurance cryptographic software. The framework is structured around the Jasmin programming language and its compiler. The language is designed for enhancing portability of programs and for simplifying verification tasks. The compiler is designed to achieve predictability and efficiency of the output code (currently limited to x64 platforms), and is formally verified in the Coq proof assistant. Using the supercop framework, we evaluate the Jasmin compiler on representative cryptographic routines and conclude that the code generated by the compiler is as efficient as fast, hand-crafted, implementations. Moreover, the framework includes highly automated tools for proving memory safety and constant-time security (for protecting against cache-based timing attacks). We also demonstrate the effectiveness of the verification tools on a large set of cryptographic routines.},
	booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
	pages 	  = {1807–1823},
	numpages  = {17},
	keywords  = {constant-time security, verified compiler, cryptographic implementations, safety},
	location  = {Dallas, Texas, USA},
	series	  = {CCS '17}
}

@inproceedings{Gomes2009,
	title={An overview on the Static Code Analysis approach in Software Development},
	author={Ivo Vieira Gomes and Pedro Morgado and Tiago Gomes and Rodrigo M. L. M. Moreira},
	year={2009}
}

@article{Church1936,
	ISSN = {00029327, 10806377},
	URL = {http://www.jstor.org/stable/2371045},
	author = {Alonzo Church},
	journal = {American Journal of Mathematics},
	number = {2},
	pages = {345--363},
	publisher = {Johns Hopkins University Press},
	title = {An Unsolvable Problem of Elementary Number Theory},
	urldate = {2022-04-23},
	volume = {58},
	year = {1936}
}

@article{Turing1937,
	author = {Turing, A. M.},
	title = {On Computable Numbers, with an Application to the Entscheidungsproblem},
	journal = {Proceedings of the London Mathematical Society},
	volume = {s2-42},
	number = {1},
	pages = {230-265},
	doi = {https://doi.org/10.1112/plms/s2-42.1.230},
	url = {https://londmathsoc.onlinelibrary.wiley.com/doi/abs/10.1112/plms/s2-42.1.230},
	eprint = {https://londmathsoc.onlinelibrary.wiley.com/doi/pdf/10.1112/plms/s2-42.1.230},
	year = {1937}
}

@article{Wang2019,
	author = {Wang, Guanhua and Chattopadhyay, Sudipta and Gotovchits, Ivan and Mitra, Tulika and Roychoudhury, Abhik},
	year = {2019},
	month = {11},
	pages = {1-1},
	title = {oo7: Low-Overhead Defense Against Spectre Attacks via Program Analysis},
	volume = {PP},
	journal = {IEEE Transactions on Software Engineering},
	doi = {10.1109/TSE.2019.2953709}
}

@inproceedings{Kocher2019,  
	author={Kocher, Paul and Horn, Jann and Fogh, Anders and Genkin, Daniel and Gruss, Daniel and Haas, Werner and Hamburg, Mike and Lipp, Moritz and Mangard, Stefan and Prescher, Thomas and Schwarz, Michael and Yarom, Yuval},  booktitle={2019 IEEE Symposium on Security and Privacy (SP)},   title={Spectre Attacks: Exploiting Speculative Execution},   year={2019},  volume={},  number={},  pages={1-19},  doi={10.1109/SP.2019.00002}}

@inproceedings {Canella2019,
	author = {Claudio Canella and Jo Van Bulck and Michael Schwarz and Moritz Lipp and Benjamin von Berg and Philipp Ortner and Frank Piessens and Dmitry Evtyushkin and Daniel Gruss},
	title = {A Systematic Evaluation of Transient Execution Attacks and Defenses},
	booktitle = {28th USENIX Security Symposium (USENIX Security 19)},
	year = {2019},
	isbn = {978-1-939133-06-9},
	address = {Santa Clara, CA},
	pages = {249--266},
	url = {https://www.usenix.org/conference/usenixsecurity19/presentation/canella},
	publisher = {USENIX Association},
	month = aug,
}

@article{Evtyushkin2018,
	author = {Evtyushkin, Dmitry and Riley, Ryan and Abu-Ghazaleh, Nael CSE and ECE and Ponomarev, Dmitry},
	title = {BranchScope: A New Side-Channel Attack on Directional Branch Predictor},
	year = {2018},
	issue_date = {February 2018},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {53},
	number = {2},
	issn = {0362-1340},
	url = {https://doi.org/10.1145/3296957.3173204},
	doi = {10.1145/3296957.3173204},
	abstract = {We present BranchScope - a new side-channel attack where the attacker infers the direction of an arbitrary conditional branch instruction in a victim program by manipulating the shared directional branch predictor. The directional component of the branch predictor stores the prediction on a given branch (taken or not-taken) and is a different component from the branch target buffer (BTB) attacked by previous work. BranchScope is the first fine-grained attack on the directional branch predictor, expanding our understanding of the side channel vulnerability of the branch prediction unit. Our attack targets complex hybrid branch predictors with unknown organization. We demonstrate how an attacker can force these predictors to switch to a simple 1-level mode to simplify the direction recovery. We carry out BranchScope on several recent Intel CPUs and also demonstrate the attack against an SGX enclave.},
	journal = {SIGPLAN Not.},
	month = {mar},
	pages = {693–707},
	numpages = {15},
	keywords = {microarchitecture security, SGX, timing attacks, branch predictor, performance counters, side-channel, attack}
}

@techreport{Perleberg1989,
	Author = {Perleberg, Chris H. and Smith, Alan Jay},
	Title = {Branch Target Buffer Design and Optimization},
	Institution = {EECS Department, University of California, Berkeley},
	Year = {1989},
	Month = {Dec},
	URL = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/1989/5904.html},
	Number = {UCB/CSD-89-552},
	Abstract = {The Branch Target Buffer (BTB) can reduce the performance penalty of branches in pipelined processors by predicting the path of the branch and caching information used by the branch. This paper discusses two major issues in the design of BTBs with the theme of achieving maximum performance with a limited number of bits allocated to the BTB design. First is the issue of BTB management -- when to enter and discard branches from the BTB. Higher performance can be obtained by entering branches into the BTB only when they experience a branch taken execution. A new method for discarding branches from the BTB is examined. This method discards the branch with the smallest expected value for improving performance, outperforming the LRU strategy by a small margin, at the cost of additional complexity. <p>The second major issue discussed is the question of what information to store in the BTB. A BTB entry can consist of one or more of the following: branch tag (i.e. the branch address), prediction information, the branch target address, and instructions at the branch target. A variety of BTB designs, with one or more of these fields, are evaluated and compared. This study is then extended to multilevel BTBs, in which different levels have different amounts of information per entry. For the specific implementation assumptions used, multilevel BTBs improved performance over single level BTBs only slightly, at the cost of additional complexity. Multi-level BTBs may provide significant performance improvements for other implementations, however. <p>Design target miss ratios for BTBs are also developed, so that the performance of BTBs for real workloads may be estimated.}
}

@inproceedings{Maisuradze2018,
	author = {Maisuradze, Giorgi and Rossow, Christian},
	title = {Ret2spec: Speculative Execution Using Return Stack Buffers},
	year = {2018},
	isbn = {9781450356930},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3243734.3243761},
	doi = {10.1145/3243734.3243761},
	abstract = {Speculative execution is an optimization technique that has been part of CPUs for over a decade. It predicts the outcome and target of branch instructions to avoid stalling the execution pipeline. However, until recently, the security implications of speculative code execution have not been studied. In this paper, we investigate a special type of branch predictor that is responsible for predicting return addresses. To the best of our knowledge, we are the first to study return address predictors and their consequences for the security of modern software. In our work, we show how return stack buffers (RSBs), the core unit of return address predictors, can be used to trigger misspeculations. Based on this knowledge, we propose two new attack variants using RSBs that give attackers similar capabilities as the documented Spectre attacks. We show how local attackers can gain arbitrary speculative code execution across processes, e.g., to leak passwords another user enters on a shared system. Our evaluation showed that the recent Spectre countermeasures deployed in operating systems can also cover such RSB-based cross-process attacks. Yet we then demonstrate that attackers can trigger misspeculation in JIT environments in order to leak arbitrary memory content of browser processes. Reading outside the sandboxed memory region with JIT-compiled code is still possible with 80% accuracy on average.},
	booktitle = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
	pages = {2109–2122},
	numpages = {14},
	keywords = {side channel attacks, javascript, hardware security},
	location = {Toronto, Canada},
	series = {CCS '18}
}

@inproceedings{Koruyeh2018,
	author = {Koruyeh, Esmaeil Mohammadian and Khasawneh, Khaled N. and Song, Chengyu and Abu-Ghazaleh, Nael},
	title = {Spectre Returns! Speculation Attacks Using the Return Stack Buffer},
	year = {2018},
	publisher = {USENIX Association},
	address = {USA},
	abstract = {The recent Spectre attacks exploit speculative execution, a pervasively used feature of modern microprocessors, to allow the exfiltration of sensitive data across protection boundaries. In this paper, we introduce a new Spectreclass attack that we call SpectreRSB. In particular, rather than exploiting the branch predictor unit, SpectreRSB exploits the return stack buffer (RSB), a common predictor structure in modern CPUs used to predict return addresses. We show that both local attacks (within the same process such as Spectre 1) and attacks on SGX are possible by constructing proof of concept attacks. We also analyze additional types of the attack on the kernel or across address spaces and show that under some practical and widely used conditions they are possible. Importantly, none of the known defenses including Retpoline and Intel's microcode patches stop all SpectreRSB attacks. We believe that future system developers should be aware of this vulnerability and consider it in developing defenses against speculation attacks. In particular, on Core-i7 Skylake and newer processors (but not on Intel's Xeon processor line), a patch called RSB refilling is used to address a vulnerability when the RSB underfills; this defense interferes with SpectreRSB's ability to launch attacks that switch into the kernel. We recommend that this patch should be used on all machines to protect against SpectreRSB.},
	booktitle = {Proceedings of the 12th USENIX Conference on Offensive Technologies},
	pages = {3},
	numpages = {1},
	location = {Baltimore, MD, USA},
	series = {WOOT'18}
}

@misc{Fog2021,
	Author = {Agner Fog},
	Title = {The microarchitecture of Intel, AMD, and
	VIA CPUs. An optimization guide for assembly programmers and
	compiler makers},
	Institution = {Technical University of Denmark, Lyngby},
	Year = {2021},
	Month = {May},
	URL = {https://www.agner.org/optimize/microarchitecture.pdf},
	numpages = {262}
}

@inproceedings{Zhang2017,
	author = {Zhang, Yinqian},
	title = {Cache Side Channels: State of the Art and Research Opportunities},
	year = {2017},
	isbn = {9781450349468},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3133956.3136064},
	doi = {10.1145/3133956.3136064},
	abstract = {Cache side channels are a type of attack vectors through which an adversary infers secret information of a running program by observing its use of CPU caches or other caching hardware. The study of cache side channels, particularly access-driven cache side channels, is gaining traction among security researchers in recent years. A large volume of papers on cache side-channel attacks or defenses is being published in both security and computer architecture conferences each year. However, due to the diversity of the research goals, methods, and perspectives, it becomes much harder for researchers new to this field to keep track of the frontiers of this research topic. As such, in this tutorial, we will provide a high-level overview of the studies of cache side channels to help other security researchers to comprehend the state of the art of this research area, and to identify research problems that have not been addressed by the community. We also hope to bridge the gaps between the security community and the computer architecture community on this specific research topic by summarizing research papers from both sides.},
	booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
	pages = {2617–2619},
	numpages = {3},
	keywords = {cache side channels},
	location = {Dallas, Texas, USA},
	series = {CCS '17}
}

@article{Page2002,
	author = {Page, Dan},
	year = {2002},
	month = {01},
	pages = {169},
	title = {Theoretical Use of Cache Memory as a Cryptanalytic Side-Channel},
	volume = {2002},
	journal = {IACR Cryptology ePrint Archive}
}

@inproceedings {Yarom2014,
	author = {Yuval Yarom and Katrina Falkner},
	title = {{FLUSH+RELOAD}: A High Resolution, Low Noise, L3 Cache {Side-Channel} Attack},
	booktitle = {23rd USENIX Security Symposium (USENIX Security 14)},
	year = {2014},
	isbn = {978-1-931971-15-7},
	address = {San Diego, CA},
	pages = {719--732},
	url = {https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/yarom},
	publisher = {USENIX Association},
	month = aug,
}

@inproceedings{Oswald2004,
	author = {Ors, Berna and Gurkaynak, Frank and Oswald, Elisabeth and Preneel, B.},
	year = {2004},
	month = {05},
	pages = {546 - 552 Vol.2},
	title = {Power-analysis attack on an ASIC AES implementation},
	volume = {2},
	isbn = {0-7695-2108-8},
	journal = {Proc of IEEE International Conference Information Technology: Coding and Computing},
	doi = {10.1109/ITCC.2004.1286711}
}

@book{Mangard2010,
	author = {Mangard, Stefan and Oswald, Elisabeth and Popp, Thomas},
	title = {Power Analysis Attacks: Revealing the Secrets of Smart Cards},
	year = {2010},
	isbn = {1441940391},
	publisher = {Springer Publishing Company, Incorporated},
	edition = {1st},
	abstract = {Power analysis attacks allow the extraction of secret information from smart cards. Smart cards are used in many applications including banking, mobile communications, pay TV, and electronic signatures. In all these applications, the security of the smart cards is of crucial importance. Power Analysis Attacks: Revealing the Secrets of Smart Cards is the first comprehensive treatment of power analysis attacks and countermeasures. Based on the principle that the only way to defend against power analysis attacks is to understand them, this book explains how power analysis attacks work. Using many examples, it discusses simple and differential power analysis as well as advanced techniques like template attacks. Furthermore, the authors provide an extensive discussion of countermeasures like shuffling, masking, and DPA-resistant logic styles. By analyzing the pros and cons of the different countermeasures, this volume allows practitioners to decide how to protect smart cards.}
}

@inproceedings{Mangard2003,
	author={Mangard, Stefan},
	editor= {Lee, Pil Joong and Lim, Chae Hoon} ,
	title={A Simple Power-Analysis (SPA) Attack on Implementations of the AES Key Expansion},
	booktitle={Information Security and Cryptology --- ICISC 2002},
	year={2003},
	publisher={Springer Berlin Heidelberg},
	address={Berlin, Heidelberg},
	pages={343--358},
	abstract={This article presents a simple power-analysis (SPA) attack on implementations of the AES key expansion. The attack reveals the secret key of AES software implementations on smart cards by exploiting the fact that the power consumption of most smart-card processors leaks information during the AES key expansion. The presented attack efficiently utilizes this information leakage to substantially reduce the key space that needs to be considered in a brute-force search for the secret key. The details of the attack are described on the basis of smart cards that leak the Hamming weight of intermediate results occurring during the AES key expansion.},
	isbn={978-3-540-36552-5}
}

@article{Buchanan2017,
	author = {Owen Lo and William J. Buchanan and Douglas Carson},
	title = {Power analysis attacks on the AES-128 S-box using differential power analysis (DPA) and correlation power analysis (CPA)},
	journal = {Journal of Cyber Security Technology},
	volume = {1},
	number = {2},
	pages = {88-107},
	year  = {2017},
	publisher = {Taylor & Francis},
	doi = {10.1080/23742917.2016.1231523},
	URL = {https://doi.org/10.1080/23742917.2016.1231523},
	eprint = {https://doi.org/10.1080/23742917.2016.1231523}
	
}

@inproceedings{Neve2007,
	author={Neve, Michael and Seifert, Jean-Pierre},
	editor={Biham, Eli and Youssef, Amr M.},
	title={Advances on Access-Driven Cache Attacks on AES},
	booktitle={Selected Areas in Cryptography},
	year={2007},
	publisher={Springer Berlin Heidelberg},
	address={Berlin, Heidelberg},
	pages={147--162},
	abstract={An access-driven attack is a class of cache-based side channel analysis. Like the time-driven attack, the cache's timings are under inspection as a source of information leakage. Access-driven attacks scrutinize the cache behavior with a finer granularity, rather than evaluating the overall execution time. Access-driven attacks leverage the ability to detect whether a cache line has been evicted, or not, as the primary mechanism for mounting an attack. In this paper we focus on the case of AES and we show that the vast majority of processors suffer from this cache-based vulnerability. Our best results are indeed performed on a processor without the multi-threading capabilities --- in contrast to previous works in this area that had suggested that multi-threading actually improved, or even made possible, this class of attack.},
	isbn={978-3-540-74462-7}
}

@inproceedings{Lipp2018,
	author = {Moritz Lipp and Michael Schwarz and Daniel Gruss and Thomas Prescher and Werner Haas and Anders Fogh and Jann Horn and Stefan Mangard and Paul Kocher and Daniel Genkin and Yuval Yarom and Mike Hamburg},
	title = {Meltdown: Reading Kernel Memory from User Space},
	booktitle = {27th {USENIX} Security Symposium ({USENIX} Security 18)},
	year = {2018},
}